<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Runtime全方位装逼指南]]></title>
    <url>%2F2018%2F09%2F13%2FRuntime%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A3%85%E9%80%BC%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[�楔子Runtime是什么？见名知意，其概念无非就是“因为 Objective-C 是一门动态语言，所以它需要一个运行时系统……这就是 Runtime 系统”云云。对博主这种菜鸟而言，Runtime 在实际开发中，其实就是一组C语言的函数。胡适说：“多研究些问题，少谈些主义”，云山雾罩的概念听多了总是容易头晕，接下来我们直接从代码入手学习 Runtime。� 1、由objc_msgSend说开去：Objective-C 中的方法调用，不是简单的方法调用，而是发送消息，也就是说，其实 [receiver message] 会被编译器转化为: objc_msgSend(receiver, selector)，何以证明？新建一个类 MyClass，其.m文件如下： 12345678910111213#import &quot;MyClass.h&quot;@implementation MyClass-(instancetype)init&#123; if (self = [super init]) &#123; [self showUserName]; &#125; return self;&#125;-(void)showUserName&#123; NSLog(@&quot;Dave Ping&quot;);&#125; 使用 clang 重写命令: 1$ clang -rewrite-objc MyClass.m 然后在同一目录下会多出一个 MyClass.cpp 文件，双击打开，可以看到 init 方法已经被编译器转化为下面这样： 123456static instancetype _I_MyClass_init(MyClass * self, SEL _cmd) &#123; if (self = ((MyClass *(*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;MyClass&quot;))&#125;, sel_registerName(&quot;init&quot;))) &#123; ((void (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;showUserName&quot;)); &#125; return self;&#125; 我们要找的就是它： 1((void (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;showUserName&quot;)) objc_msgSend 函数被定义在 objc/message.h 目录下，其函数原型是酱紫滴： 1OBJC_EXPORT void objc_msgSend(void /* id self, SEL op, ... */ ) �该函数有两个参数，一个 id 类型，一个 SEL 类型。 2、SELSEL 被定义在 �objc/objc.h 目录下： 1typedef struct objc_selector *SEL; 其实它就是个映射到方法的C字符串，你可以用 Objective-C 编译器命令 @selector() 或者 Runtime 系统的 sel_registerName 函数来获得一个 SEL 类型的方法选择器。 3、id与 SEL 一样，id 也被定义在 �objc/objc.h 目录下： 1typedef struct objc_object *id; id 是一个结构体指针类型，它可以指向 Objective-C 中的任何对象。objc_object 结构体定义如下： 1struct objc_object &#123; Class isa OBJC_ISA_AVAILABILITY;&#125;; 我们通常所说的对象，就长这个样子，这个结构体只有一个成员变量� isa，�对象可以通过 �isa 指针找到其所属的类。isa 是一个 �Class 类型的成员变量，那么 Class 又是什么呢？ 4、ClassClass 也是一个结构体指针类型： 1typedef struct objc_class *Class; objc_class 结构体是酱紫滴： 12345678910111213141516struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY;#if !__OBJC2__ Class super_class OBJC2_UNAVAILABLE; const char *name OBJC2_UNAVAILABLE; long version OBJC2_UNAVAILABLE; long info OBJC2_UNAVAILABLE; long instance_size OBJC2_UNAVAILABLE; struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; struct objc_method_list **methodLists OBJC2_UNAVAILABLE; struct objc_cache *cache OBJC2_UNAVAILABLE; struct objc_protocol_list *protocols OBJC2_UNAVAILABLE;#endif&#125; OBJC2_UNAVAILABLE; 我们通常说的�类就长这样子：·Class 也有一个 isa 指针，指向其所属的元类（meta）.·super_class：指向其超类.·name：是类名.·version：是类的版本信息.·info：是类的详情.·instance_size：是该类的实例对象的大小.·ivars：指向该类的成员变量列表.·methodLists：指向该类的实例方法列表，它将方法选择器和方法实现地址联系起来。methodLists 是指向 ·objc_method_list 指针的指针，也就是说可以动态修改 *methodLists 的值来添加成员方法，这也是 Category 实现的原理，同样解释了 Category 不能添加属性的原因.·cache：Runtime 系统会把被调用的方法存到 �cache 中（理论上讲一个方法如果被调用�，那么它有可能今后还会被调用），下次查找的时候效率更高.·protocols：指向该类的协议列表. 说到这里有点乱了，我们来捋一下，当我们调用一个方法时，其运行过程大致如下： 首先，Runtime 系统会把方法调用转化为消息发送，即 objc_msgSend，并且把方法的调用者，和方法选择器，当做参数传递过去. 此时，方法的调用者会通过 isa 指针来找到其所属的类，然后在 cache 或者 methodLists 中查找该方法，找得到就跳到对应的方法去执行. 如果在类中没有找到该方法，则通过 super_class 往上一级超类查找（如果一直找到 NSObject 都没有找到该方法的话，这种情况，我们放到后面消息转发的时候再说）. 前面我们说 methodLists 指向该类的实例方法列表，实例方法即-方法，那么类方法（+方法）存储在哪儿呢？类方法被存储在元类中，Class 通过 isa 指针即可找到其所属的元类. 上图实线是 super_class 指针，虚线是 isa 指针。根元类的超类是NSObject，而 isa 指向了自己。NSObject 的超类为 nil，也就是它没有超类。 5、使用objc_msgSend前面我们使用 clang 重写命令，看到 Runtime 是如何将方法调用转化为消息发送的。我们也可以依样画葫芦，来学习使用一下 objc_msgSend。新建一个类 TestClass，添加如下方法： 12345678910111213141516171819-(void)showAge&#123; NSLog(@&quot;24&quot;);&#125;-(void)showName:(NSString *)aName&#123; NSLog(@&quot;name is %@&quot;,aName);&#125;-(void)showSizeWithWidth:(float)aWidth andHeight:(float)aHeight&#123; NSLog(@&quot;size is %.2f * %.2f&quot;,aWidth, aHeight);&#125;-(float)getHeight&#123; return 187.5f;&#125;-(NSString *)getInfo&#123; return @&quot;Hi, my name is Dave Ping, I&apos;m twenty-four years old in the year, I like apple, nice to meet you.&quot;;&#125; 我们可以像下面这样，使用 objc_msgSend 依次调用这些方法： 12345678910111213TestClass *objct = [[TestClass alloc] init];((void (*) (id, SEL)) objc_msgSend) (objct, sel_registerName(&quot;showAge&quot;));((void (*) (id, SEL, NSString *)) objc_msgSend) (objct, sel_registerName(&quot;showName:&quot;), @&quot;Dave Ping&quot;);((void (*) (id, SEL, float, float)) objc_msgSend) (objct, sel_registerName(&quot;showSizeWithWidth:andHeight:&quot;), 110.5f, 200.0f);float f = ((float (*) (id, SEL)) objc_msgSend_fpret) (objct, sel_registerName(&quot;getHeight&quot;));NSLog(@&quot;height is %.2f&quot;,f);NSString *info = ((NSString* (*) (id, SEL)) objc_msgSend) (objct, sel_registerName(&quot;getInfo&quot;));NSLog(@&quot;%@&quot;,info); 也许你已经注意到，objc_msgSend 在使用时都被强制转换了一下，这是因为 objc_msgSend 这个函数至少要有两个参数，一个id消息接受者，一个SEL消息名称。后面三个点代表参数，是变参。也就是说方法携带的参数，可以没有，可以有多个。如果我们把调用 showAge 方法改成这样： 1objc_msgSend(objct, sel_registerName(&quot;showAge&quot;)); Xcode 就会报错： 1Too many arguments to function call, expected 0, have 2. 完整的 objc_msgSend 使用代码在�这里。 6、objc_msgSendSuper编译器会根据情况在 objc_msgSend，objc_msgSend_stret，objc_msgSendSuper，objc_msgSendSuper_stret 或 objc_msgSend_fpret 五个方法中选择一个来调用。如果消息是传递给超类，那么会调用 objc_msgSendSuper 方法，如果消息返回值是数据结构，就会调用 objc_msgSendSuper_stret 方法，如果返回值是浮点数，则调用 objc_msgSend_fpret 方法。 这里我们重点说一下 objc_msgSendSuper，objc_msgSendSuper 函数原型如下： 1OBJC_EXPORT void objc_msgSendSuper(void /* struct objc_super *super, SEL op, ... */ ) �当我们调用 [super selector] 时，Runtime 会调用 objc_msgSendSuper 方法，objc_msgSendSuper 方法有两个参数，super 和 op，Runtime 会把 selector 方法选择器赋值给 op。而 super 是一个 objc_super 结构体指针，objc_super 结构体定义如下： 12345678910111213struct objc_super &#123; /// Specifies an instance of a class. __unsafe_unretained id receiver; /// Specifies the particular superclass of the instance to message. #if !defined(__cplusplus) &amp;&amp; !__OBJC2__ /* For compatibility with old objc-runtime.h header */ __unsafe_unretained Class class;#else __unsafe_unretained Class super_class;#endif /* super_class is the first class to search */&#125;; Runtime 会创建一个 objc_spuer 结构体变量，将其地址作为参数（super）传递给 objc_msgSendSuper，并且将 self 赋值给 receiver：super—&gt;receiver=self.举个栗子，问下面的代码输出什么： 123456789101112@implementation Son : Father- (id)init&#123; self = [super init]; if (self) &#123; NSLog(@&quot;%@&quot;, NSStringFromClass([self class])); NSLog(@&quot;%@&quot;, NSStringFromClass([super class])); &#125; return self;&#125;@end 答案是全部输出 Son.使用 clang 重写命令，发现上述代码被转化为: 12NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;class&quot;))));NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123; (id)self, (id)class_getSuperclass(objc_getClass(&quot;Son&quot;)) &#125;, sel_registerName(&quot;class&quot;)))); 当调用 [super class] 时，会转换成 objc_msgSendSuper 函数： 第一步先构造 objc_super 结构体，结构体第一个成员就是 self。第二个成员是 (id)class_getSuperclass(objc_getClass(“Son”)). 第二步是去 Father 这个类里去找 - (Class)class，没有，然后去 NSObject 类去找，找到了。最后内部是使用 objc_msgSend(objc_super-&gt;receiver, @selector(class)) 去调用，此时已经和 [self class] 调用相同了，所以两个输出结果都是 Son。 7、�对象关联对象关联允许开发者对已经存在的类在 Category 中添加自定义的属性： 1OBJC_EXPORT void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy) __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1); ·object 是源对象.·value 是被关联的对象.·key 是关联的键，objc_getAssociatedObject 方法通过不同的 key 即可取出对应的被关联对象.·policy 是一个枚举值，表示关联对象的行为，从命名就能看出各个枚举值的含义： 1234567891011typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123; OBJC_ASSOCIATION_ASSIGN = 0, /**&lt; Specifies a weak reference to the associated object. */ OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. * The association is not made atomically. */ OBJC_ASSOCIATION_COPY_NONATOMIC = 3, /**&lt; Specifies that the associated object is copied. * The association is not made atomically. */ OBJC_ASSOCIATION_RETAIN = 01401, /**&lt; Specifies a strong reference to the associated object. * The association is made atomically. */ OBJC_ASSOCIATION_COPY = 01403 /**&lt; Specifies that the associated object is copied. * The association is made atomically. */&#125;; 要取出被关联的对象使用 objc_getAssociatedObject 方法即可，要删除一个被关联的对象，使用 objc_setAssociatedObject 方法将对应的 key 设置成 nil 即可： 1objc_setAssociatedObject(self, associatedKey, nil, OBJC_ASSOCIATION_COPY_NONATOMIC); objc_removeAssociatedObjects 方法将会移除源对象中所有的关联对象.举个栗子，假如我们要给 UIButton 添加一个监听单击事件的 block 属性，新建 UIButton 的 Category，其.m文件如下： 12345678910111213141516171819202122232425262728#import &quot;UIButton+ClickBlock.h&quot;#import &lt;objc/runtime.h&gt;static const void *associatedKey = &quot;associatedKey&quot;;@implementation UIButton (ClickBlock)//Category中的属性，只会生成setter和getter方法，不会生成成员变量-(void)setClick:(clickBlock)click&#123; objc_setAssociatedObject(self, associatedKey, click, OBJC_ASSOCIATION_COPY_NONATOMIC); [self removeTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside]; if (click) &#123; [self addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside]; &#125;&#125;-(clickBlock)click&#123; return objc_getAssociatedObject(self, associatedKey);&#125;-(void)buttonClick&#123; if (self.click) &#123; self.click(); &#125;&#125;@end 然后在代码中，就可以使用 UIButton 的属性来监听单击事件了： 123456UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];button.frame = self.view.bounds;[self.view addSubview:button];button.click = ^&#123; NSLog(@&quot;buttonClicked&quot;);&#125;; 完整的对象关联代码点这里 8、�自动归档博主在学习 Runtime 之前，归档的时候是酱紫写的： 123456789101112- (void)encodeWithCoder:(NSCoder *)aCoder&#123; [aCoder encodeObject:self.name forKey:@&quot;name&quot;]; [aCoder encodeObject:self.ID forKey:@&quot;ID&quot;];&#125;- (id)initWithCoder:(NSCoder *)aDecoder&#123; if (self = [super init]) &#123; self.ID = [aDecoder decodeObjectForKey:@&quot;ID&quot;]; self.name = [aDecoder decodeObjectForKey:@&quot;name&quot;]; &#125; return self;&#125; 那么问题来了，如果当前 Model 有100个属性的话，就需要写100行这种代码： 1[aCoder encodeObject:self.name forKey:@&quot;name&quot;]; 想想都头疼，通过 Runtime 我们就可以轻松解决这个问题：�1.使用 class_copyIvarList 方法获取当前 Model 的所有成员变量.2.使用 ivar_getName 方法获取成员变量的名称.3.通过 KVC 来读取 Model 的属性值（encodeWithCoder:），以及给 Model 的属性赋值（initWithCoder:）. 举个栗子，新建一个 Model 类，其.m文件如下： 123456789101112131415161718192021222324252627282930313233343536#import &quot;TestModel.h&quot;#import &lt;objc/runtime.h&gt;#import &lt;objc/message.h&gt;@implementation TestModel- (void)encodeWithCoder:(NSCoder *)aCoder&#123; unsigned int outCount = 0; Ivar *vars = class_copyIvarList([self class], &amp;outCount); for (int i = 0; i &lt; outCount; i ++) &#123; Ivar var = vars[i]; const char *name = ivar_getName(var); NSString *key = [NSString stringWithUTF8String:name]; // 注意kvc的特性是，如果能找到key这个属性的setter方法，则调用setter方法 // 如果找不到setter方法，则查找成员变量key或者成员变量_key，并且为其赋值 // 所以这里不需要再另外处理成员变量名称的“_”前缀 id value = [self valueForKey:key]; [aCoder encodeObject:value forKey:key]; &#125;&#125;- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder&#123; if (self = [super init]) &#123; unsigned int outCount = 0; Ivar *vars = class_copyIvarList([self class], &amp;outCount); for (int i = 0; i &lt; outCount; i ++) &#123; Ivar var = vars[i]; const char *name = ivar_getName(var); NSString *key = [NSString stringWithUTF8String:name]; id value = [aDecoder decodeObjectForKey:key]; [self setValue:value forKey:key]; &#125; &#125; return self;&#125;@end 完整的自动归档代码在这里 9、字典与模型互转最开始博主是这样用字典给 Model 赋值的： 1234567-(instancetype)initWithDictionary:(NSDictionary *)dict&#123; if (self = [super init]) &#123; self.age = dict[@&quot;age&quot;]; self.name = dict[@&quot;name&quot;]; &#125; return self;&#125; 可想而知，遇到的问题跟归档时候一样（后来使用MJExtension），这里我们稍微来学习一下其中原理，字典转模型的时候：1.�根据字典的 key 生成 setter 方法.2.使用 objc_msgSend 调用 setter 方法为 Model 的属性赋值（或者 KVC）. 模型转字典的时候：�1.调用 class_copyPropertyList 方法获取当前 Model 的所有属性.2.调用 property_getName 获取属性名称.3.根据属性名称生成 getter 方法.4.使用 objc_msgSend 调用 getter 方法获取属性值（或者 KVC）. 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#import &quot;NSObject+KeyValues.h&quot;#import &lt;objc/runtime.h&gt;#import &lt;objc/message.h&gt;@implementation NSObject (KeyValues)//字典转模型+(id)objectWithKeyValues:(NSDictionary *)aDictionary&#123; id objc = [[self alloc] init]; for (NSString *key in aDictionary.allKeys) &#123; id value = aDictionary[key]; /*判断当前属性是不是Model*/ objc_property_t property = class_getProperty(self, key.UTF8String); unsigned int outCount = 0; objc_property_attribute_t *attributeList = property_copyAttributeList(property, &amp;outCount); objc_property_attribute_t attribute = attributeList[0]; NSString *typeString = [NSString stringWithUTF8String:attribute.value]; if ([typeString isEqualToString:@&quot;@\&quot;TestModel\&quot;&quot;]) &#123; value = [self objectWithKeyValues:value]; &#125; /**********************/ //生成setter方法，并用objc_msgSend调用 NSString *methodName = [NSString stringWithFormat:@&quot;set%@%@:&quot;,[key substringToIndex:1].uppercaseString,[key substringFromIndex:1]]; SEL setter = sel_registerName(methodName.UTF8String); if ([objc respondsToSelector:setter]) &#123; ((void (*) (id,SEL,id)) objc_msgSend) (objc,setter,value); &#125; &#125; return objc;&#125;//模型转字典-(NSDictionary *)keyValuesWithObject&#123; unsigned int outCount = 0; objc_property_t *propertyList = class_copyPropertyList([self class], &amp;outCount); NSMutableDictionary *dict = [NSMutableDictionary dictionary]; for (int i = 0; i &lt; outCount; i ++) &#123; objc_property_t property = propertyList[i]; //生成getter方法，并用objc_msgSend调用 const char *propertyName = property_getName(property); SEL getter = sel_registerName(propertyName); if ([self respondsToSelector:getter]) &#123; id value = ((id (*) (id,SEL)) objc_msgSend) (self,getter); /*判断当前属性是不是Model*/ if ([value isKindOfClass:[self class]] &amp;&amp; value) &#123; value = [value keyValuesWithObject]; &#125; /**********************/ if (value) &#123; NSString *key = [NSString stringWithUTF8String:propertyName]; [dict setObject:value forKey:key]; &#125; &#125; &#125; return dict;&#125;@end 完整代码在这里 10、�动态方法解析前面我们留下了一点东西没说，那就是如果某个对象调用了不存在的方法时会怎么样，一般情况下程序会crash，错误信息类似下面这样： 1unrecognized selector sent to instance 0x7fd0a141afd0 但是在程序crash之前，Runtime 会给我们动态方法解析的机会，消息发送的步骤大致如下： 1.检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain，release 这些函数了. 2.检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉. 3.如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了找得到就跳到对应的函数去执行.如果 cache 找不到就找一下方法分发表. 4.如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止. 这里写图片描述 1.进入 resolveInstanceMethod: 方法，指定是否动态添加方法。若返回NO，则进入下一步，若返回YES，则通过 class_addMethod 函数动态地添加方法，消息得到处理，此流程完毕. 2.resolveInstanceMethod: 方法返回 NO 时，就会进入 forwardingTargetForSelector: 方法，这是 Runtime 给我们的第二次机会，用于指定哪个对象响应这个 selector。返回nil，进入下一步，返回某个对象，则会调用该对象的方法. 3.若 forwardingTargetForSelector: 返回的是nil，则我们首先要通过 methodSignatureForSelector: 来指定方法签名，返回nil，表示不处理，若返回方法签名，则会进入下一步. 4当第 methodSignatureForSelector: 方法返回方法签名后，就会调用 forwardInvocation: 方法，我们可以通过 anInvocation 对象做很多处理，比如修改实现方法，修改响应对象等. 如果到最后，消息还是没有得到响应，程序就会crash，详细代码在这里。 Objective-C Runtime [转自 戴尼玛]（https://www.jianshu.com/p/efeb33712445）]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RunTime应用实例--关于埋点的思考]]></title>
    <url>%2F2018%2F09%2F13%2FRunTime%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B-%E5%85%B3%E4%BA%8E%E5%9F%8B%E7%82%B9%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[埋点是现在很多App中都需要用到的，这个问题可能每个人都能处理，但是怎样来减少埋点所带来的侵入性，怎样用更加简洁的方式来处理埋点问题，怎样减少误埋，如果上线了发现少埋了怎么办？下面是本文讨论的重点（本文Demo已上传GitHub，可以下载讨论）: 什么是埋点？埋点的作用是什么？其实埋点也叫日志上报，其实就是根据需求上报一系列关于用户行为的数据，比如：用户点击了哪个按钮，用户浏览了哪个网站，用户在某个页面停留了多久等数据。这些数据对于运营来说很有用，他们可以用来分析某个功能开发的是不是合理，是不是因为某个地方的不合理而到导致了转化率的下降，从而对我们的App进行相应的改进，我们来看下某个第三方平台提供的埋点实例。 埋点统计字段定义 上图中说明了，某个时间对应的事件ID,以及针对这个事件需要关联的字段。下面是后台系统对某个埋点所做的数据统计:[图片上传失败…(image-5a9faa-1512050850766)] 后台系统对埋点的数据分析 这样我们就可以详细的分析出用户对于App的反馈，从而及时的修改我们的产品。 常规的埋点的处理方式是怎样的?其实很简单，我们就在相应的事件里面加入相关的代码，给服务器上报数据不就得了。如下所示: 123456789101112// 这个一个按钮的响应事件 - (void)someButtonAction:(UIButton *)someButton&#123;// 该按钮需要处理的业务[self upDateSomthing]// 开始埋点// eid:事件id，sa:用户id, cI:当前时间NSDictionary *upLoadDic = @&#123;@&quot;eid&quot;:@&quot;311&quot;,@&quot;sa&quot;:@&quot;706976487532177&quot;,@&quot;cI&quot;:@&quot;2016-6-4 12:11:34&quot;&#125;;[ZHUpLoadManager upLoadWithDic:upLoadDic];&#125; 这样一个埋点问题就解决了，单同时却隐藏着很多问题:1.这样每点击一个一下按钮就请求一次网络会不会出现性能问题？2.如果这样频繁的数据上报会不会消耗更多的用户流量？3.这样的代码能经受住需求的变更吗？比如字段变了，或者你把cI看错了，应该是cl。4.这样的代码会不会造成难以测试？5.这样的频繁上报会不会增加服务器端的压力？6.代码整洁吗？……(程序员的一个好习惯是:这个代码能否经受住需求的变更。) 我们可以怎样优化？ 首先我们可以用一个类，来专门处理这些需要上报的埋点的字段，将这些字段作为常量,例如: 123456789// LogManager.hextern NSString * const kLogEventKey; //事件idextern NSString * const kLogUserIdKey; //用户idextern NSString * const kLogOperationInterval; //操作时间// LogManager.mNSString * const kLogEventKey = @&quot;co&quot;; //事件idNSString * const kLogUserIdKey = @&quot;sa&quot;; //用户idNSString * const kLogOperationInterval = @&quot;cq&quot;; //操作时间 对于用户id，当前时间，用户手机型号，手机品牌，等等与用户所在页面无关的内容，可以用统一的一个类进行处理，将其作为这个类的一个属性，使用getter方法将其相应的数值返回即可(对于恒定不变的可以使用懒加载)。 这样的数据传输策略是有问题的，每次点击都上报，可能一个面需要上报的地方很多，这就会造成很大的性能问题，我们可以先将需要上传的数据缓存起来，然后缓存够50条数据上报一次，或者每隔5分钟上报一次; 为了节省流量我们可以，1）将数据压缩之后再上报,可以参考我的另一篇文章；2）和服务端商量，用尽可能短的字段，如:cityName = @&quot;北京&quot;;变为cn = @&quot;北京&quot;;3)尽量不要上传的频率过高，如第三点。 如何解决代码的整洁，易于测试的问题？请看下面。 怎样使用RunTime来进行优化？我么能不能利用RunTime来给每一个Button的响应事件中添加一段代码，利用这段代码来进行埋点上报呢？或者进一步来说我们能不能给所有继承自UIControl的对象都添加这样一段代码呢？这样我们不是可以捕获所有的用户事件了吗？(其实答案是否定的，看第五条);这时我们可以利用Mehod Swizzle,或者叫方法注入,或者叫hook住了某个方法，听着挺玄乎，其实就是RunTime的一个API,这个API能够交换两个方法的实现。通过这个API,我们可以这样实现方法注入。如下图所示: 方法注入的实现过程 1- (void)sendAction:(SEL)action to:(nullable id)target forEvent:(nullable UIEvent *)event; 这个方法里面嵌入相应的代码片段。我们可以这样:1.将互换方法实现的的这个方法放到一个工具类中，因为我们可能不止一处要用到这种方法。2.我们给UIControl添加一个Category,然后在里面调用这个工具类然后实现所插入的代码片段。这里我们既然可以得到target还有action,那么很多情况下我们就可以唯一确定这个埋点了，那么我们怎样从这么多的埋点中选出这个这个埋点呢？我们其实可以用字典和数组结合的方式将这些方法的target和方法的参数一一存起来，然后在嵌入的方法内部获取其对应的方法，以及其相应的，这个事先配置好的字典和数组的结合放在哪里比较合适呢？plist。下面就以最简单的形式展示这种思路: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586 // 工具类 @interface ZHSwizzleTool : NSObject + (void)zhSwizzleWithClass:(Class)processedClass originalSelector:(SEL)originSelector swizzleSelector:(SEL)swizzlSelector; @end @implementation ZHSwizzleTool +(void)zhSwizzleWithClass:(Class)processedClass originalSelector:(SEL)originSelector swizzleSelector:(SEL)swizzlSelector&#123;Method originMethod = class_getInstanceMethod(processedClass, originSelector);Method swizzleMethod = class_getInstanceMethod(processedClass, swizzlSelector);BOOL didAddMethod = class_addMethod(processedClass, originSelector, method_getImplementation(swizzleMethod), method_getTypeEncoding(swizzleMethod));if (didAddMethod) &#123; class_replaceMethod(processedClass, swizzlSelector, method_getImplementation(originMethod), method_getTypeEncoding(originMethod)); &#125;else&#123; method_exchangeImplementations(originMethod, swizzleMethod); &#125;&#125;@end // 分类@implementation UIControl (ZHSwizzle)+(void)load&#123;static dispatch_once_t onceToken;dispatch_once(&amp;onceToken, ^&#123; SEL originSEL = @selector(sendAction:to:forEvent:); SEL swizzleSEL = @selector(sendSwizzleAction:to:forEvent:); [ZHSwizzleTool zhSwizzleWithClass:[self class]originalSelector:originSEL swizzleSelector:swizzleSEL]; &#125;);&#125; - (void)sendSwizzleAction:(SEL)action to:(id)target forEvent:(UIEvent *)event&#123;// 注意这里调用的是原来的系统方法[self sendSwizzleAction:action to:target forEvent:event];NSString *selectorName = NSStringFromSelector(action);// 这个plist中存储的数据格式是这样的:@&#123;@&quot;someViewController&quot;:@&quot;selector0&quot;:@[para0,para1,para2],@&quot;selector1&quot;:@[para0,para1]]&#125;;NSString *pathString = [[NSBundle mainBundle]pathForResource:@&quot;ZHLogInfo&quot; ofType:@&quot;plist&quot;];NSDictionary *plistDic = [NSDictionary dictionaryWithContentsOfFile:pathString];//1. 获取Target的名字NSDictionary *controllerDic = plistDic[NSStringFromClass([target class])];//2. 获取这个方法对应的参数列表NSArray *parameterArray = controllerDic[selectorName];//3. 实例化数据中心ZHLogDataCenter *logCenter = [[ZHLogDataCenter alloc]init];NSMutableDictionary *logInfoDic = [NSMutableDictionary dictionary];for (NSString *parameter in parameterArray) &#123; NSString *getSelector = [NSString stringWithFormat:@&quot;%@&quot;,parameter]; SEL getSeletor = NSSelectorFromString(getSelector); //4. 从数据中心中获取相应的数据 id value = [logCenter performSelector:getSeletor withObject:nil]; //5.获取成功则将其存入需要上传的字典 if (value) [logInfoDic setObject:value forKey:parameter]; &#125; //6.将这个字典存入埋点管理类，其会将其存入缓存并等待上传[ZHLogCenter zhLogWithInforDictionary:logInfoDic];&#125;@end 下面是这个代码中用到的Plist中的配置: 埋点相关字段的plist配置 在实践中遇到了什么问题以及解决方案？ 并不是所有的事件都是有继承自UIControl的控件来发出的，比如：手势，点击Cell。 并不是所有的按钮点击了之后就立马需要埋点上传？可能在按钮的响应方法中经过了层层的if(){ } else{ }最后才需要埋点。 和事件所在类无关的埋点数据可以同意从ZHLogDataCenter这个类中中取，那么如果这个数据是和所在类有关呢？ 对于代理方法该怎样处理？ 如果很多个按钮对应着一个事件该怎样处理？ 项目中事件的处理方法不尽相同，方法的参数个数不一样，并且方法的返回值也不一样，如何对他们进行统一的处理?下面我们来一一解决这些问题。 问题1：对于不是来自UIControl的子类发出的事件，我们一样是可以进行hooK，只不过方法有所不同。我们在UIControl的分类中写了一段嵌入的代码，确实hook住了系统UIButton的点击事件，是因为UIButton自身会调用UIControl的这个方法。但是对于点击事件，这个是我们自己写的一个方法，它的父类UIViewController中是没有的，所以在执行我们自己点击事件的方法时UIViewController分类中要嵌入的方法是不会被调用的，这时候怎么办，我们可以动态的给我们自己要hook的ViewController动态的添加一个方法，然后就可以hook了（这一点不太好理解）。具体的添加方法，可以参考本文的实例代码。 问题2：对于是否上传和具体的业务逻辑相关的情况，我们可以用方法所在类的一个属性值进行标记，这个属性写在.m文件中即可(KVC可以获取.m文件中的属性值。)，我们先执行要hook那个类的方法，然后根据plist中配置的相关标记进行相应的处理（这里的属性值其实也是不必要的，我么可以根据类名和方法名字符串的哈希生成唯一的key，然后利用runtime自动关联到这个类的mf_condition属性上，这个属性是一个字典其key就是刚才生成的，value就是运行完这个方法之后得到的值，然后这个值再跟plist中的配置做以比较）。 问题3：对于和事件所在类有紧密关联的埋点数据，比如某个页面对应的产品ID,比如某个页面点击了cell，之后这个cell对应的model的ID。这个时候我们可以参考方法2，添加一个属性，用一个属性值来存储这些这些需要上传的具体数据。 问题4：代理方法和手势的处理也是一样的，既然一个类实现了某个代理方法，那么其[someInstance respondsToSelector:someSelector]所返回的BOOL值应该是YES的，然后其它的就和手势的处理是一样的了。 问题5：对于很多按钮对应一个响应事件的情况，我们可以利用RunTime动态的给按钮添加一个属性，比如:buttonIdentifier,这样我们就可以在plist中进行相应的配置，以进行相应的埋点处理。 问题6：这个问题其实就是hook住所有的方法，然后给他们添加同一个代码段的问题，这时候我们可以使用Aspects这个第三方框架： 123456+ (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector withOptions:(AspectOptions)options usingBlock:(id)block error:(NSError **)error &#123;return aspect_add((id)self, selector, options, block, error); &#125; 调用这个接口，因为在UIViewController的分类中调用这个接口的对象不一样，并且我们根据plist中的配置hook的selector不一样，然而最后执行的block却是一样的，这就很好的解决了问题。 最理想的埋点是什么样的？最理想的埋点是动态的，就是PM给我们说需要哪些埋点，然后服务器给我们发一个类似与上文中提到的plist一样的文件，或者一个json,我们存到本地，如果这些埋点没有更新，我们就从本地中读取相应的文件，做相应的埋点，如果有更新，我们重新从服务器获取最新的需要埋的点，然后进行相应埋点。这样就解决了少埋，或者埋点不恰当，需要添加埋点的问题。 其中可能存在的问题是什么？当然这里面也有其难以处理的问题，比如我们使用了一个第三方控件，这个第三方控件的事件回调不是用delegate实现的，而是用block实现的，并且这个埋点和具体的业务逻辑有关系，那么这种方法就难以处理了。 如果很多事件的逻辑处理放到了block中进行，那么也将造难以处理。 [转自 击水湘江]]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Objective-C isa 指针 与 runtime 机制]]></title>
    <url>%2F2018%2F09%2F13%2FObjective-C-isa-%E6%8C%87%E9%92%88-%E4%B8%8E-runtime-%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[一.isa指针要认识什么是isa指针，我们得先明确一点： 在Objective-C中，任何类的定义都是对象。类和类的实例（对象）没有任何本质上的区别。任何对象都有isa指针。 那么什么是类呢？在xcode中用快捷键Shift＋Cmd＋O 打开文件objc.h 能看到类的定义： 可以看出: Class 是一个 objc_class 结构类型的指针, id是一个 objc_object 结构类型的指针. 我们再来看看 objc_class 的定义： 稍微解释一下各个参数的意思： isa：是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。 super_class：父类，如果该类已经是最顶层的根类,那么它为NULL。 version：类的版本信息,默认为0 info：供运行期使用的一些位标识。 instance_size：该类的实例变量大小 ivars：成员变量的数组 再来看看各个类实例变量的继承关系： 每一个对象本质上都是一个类的实例。其中类定义了成员变量和成员方法的列表。对象通过对象的isa指针指向类。 每一个类本质上都是一个对象，类其实是元类（meteClass）的实例。元类定义了类方法的列表。类通过类的isa指针指向元类。 所有的元类最终继承一个根元类，根元类isa指针指向本身，形成一个封闭的内循环。 二.runtime 机制runtime：指一个程序在运行（或者在被执行）的状态。也就是说，当你打开一个程序使它在电脑上运行的时候，那个程序就是处于运行时刻。在一些编程语言中，把某些可以重用的程序或者实例打包或者重建成为“运行库”。这些实例可以在它们运行的时候被连接或者被任何程序调用。 objective-c中runtime：是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。 在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码。 runtime的应用： 1.动态创建一个类(比如KVO的底层实现) 2.动态地为某个类添加属性\方法, 修改属性值\方法 3.遍历一个类的所有成员变量(属性)\所有方法 实质上，以上的是通过相关方法来获取对象或者类的isa指针来实现的。 相关函数 增加 增加函数:class_addMethod 增加实例变量:class_addIvar 增加属性:@dynamic标签，或者class_addMethod，因为属性其实就是由getter和setter函数组成 增加Protocol:classaddProtocol (说实话我真不知道动态增加一个protocol有什么用,--!!) 获取 获取函数列表及每个函数的信息(函数指针、函数名等等):class_getClassMethod method_getName … 获取属性列表及每个属性的信息:class_copyPropertyList property_getName 获取类本身的信息,如类名等：class_getName class_getInstanceSize 获取变量列表及变量信息：class_copyIvarList 获取变量的值 替换 将实例替换成另一个类：object_setClass 替换类方法的定义：class_replaceMethod 4.其他常用方法： 交换两个方法的实现：method_exchangeImplementations. 设置一个方法的实现：method_setImplementation. [转自 曲年]]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Objective-C-消息发送与转发机制原理]]></title>
    <url>%2F2018%2F09%2F13%2FObjective-C-%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E4%B8%8E%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[消息发送和转发流程可以概括为：消息发送（Messaging）是 Runtime 通过 selector 快速查找 IMP 的过程，有了函数指针就可以执行对应的方法实现；消息转发（Message Forwarding）是在查找 IMP 失败后执行一系列转发流程的慢速通道，如果不作转发处理，则会打日志和抛出异常。 本文不讲述开发者在消息发送和转发流程中需要做的事，而是讲述原理。能够很好地阅读本文的前提是你对 Objective-C Runtime 已经有一定的了解，关于什么是消息，Class 的结构，selector、IMP、元类等概念将不再赘述。本文用到的源码为 objc4-680 和 CF-1153.18，逆向 CoreFoundation.framework 的系统版本为 macOS 10.11.5，汇编语言架构为 x86_64。 八面玲珑的 objc_msgSend此函数是消息发送必经之路，但只要一提 objc_msgSend，都会说它的伪代码如下或类似的逻辑，反正就是获取 IMP 并调用： 12345id objc_msgSend(id self, SEL _cmd, ...) &#123; Class class = object_getClass(self); IMP imp = class_getMethodImplementation(class, _cmd); return imp ? imp(self, _cmd, ...) : 0;&#125; 源码解析为啥老用伪代码？因为 objc_msgSend 是用汇编语言写的，针对不同架构有不同的实现。如下为 x86_64 架构下的源码，可以在 objc-msg-x86_64.s 文件中找到，关键代码如下： 1234567891011121314151617181920 ENTRY _objc_msgSend MESSENGER_START NilTest NORMAL GetIsaFast NORMAL // r11 = self-&gt;isa CacheLookup NORMAL // calls IMP on success NilTestSupport NORMAL GetIsaSupport NORMAL// cache miss: go search the method listsLCacheMiss: // isa still in r11 MethodTableLookup %a1, %a2 // r11 = IMP cmp %r11, %r11 // set eq (nonstret) for forwarding jmp *%r11 // goto *imp END_ENTRY _objc_msgSend 这里面包含一些有意义的宏： NilTest 宏，判断被发送消息的对象是否为 nil 的。如果为 nil，那就直接返回 nil。这就是为啥也可以对 nil发消息。 GetIsaFast 宏可以『快速地』获取到对象的 isa 指针地址（放到 r11 寄存器，r10 会被重写；在 arm 架构上是直接赋值到 r9） CacheLookup 这个宏是在类的缓存中查找 selector 对应的 IMP（放到 r10）并执行。如果缓存没中，那就得到 Class 的方法表中查找了。 MethodTableLookup 宏是重点，负责在缓存没命中时在方法表中负责查找 IMP： 12345678910111213141516171819.macro MethodTableLookup MESSENGER_END_SLOW SaveRegisters // _class_lookupMethodAndLoadCache3(receiver, selector, class) movq $0, %a1 movq $1, %a2 movq %r11, %a3 call __class_lookupMethodAndLoadCache3 // IMP is now in %rax movq %rax, %r11 RestoreRegisters.endmacro 从上面的代码可以看出方法查找 IMP 的工作交给了 OC 中的 _class_lookupMethodAndLoadCache3 函数，并将 IMP 返回（从 r11 挪到 rax）。最后在 objc_msgSend 中调用 IMP。 为什么使用汇编语言其实在 objc-msg-x86_64.s 中包含了多个版本的 objc_msgSend 方法，它们是根据返回值的类型和调用者的类型分别处理的： objc_msgSendSuper:向父类发消息，返回值类型为 id objc_msgSend_fpret:返回值类型为 floating-point，其中包含 objc_msgSend_fp2ret 入口处理返回值类型为 long double 的情况 objc_msgSend_stret:返回值为结构体 objc_msgSendSuper_stret:向父类发消息，返回值类型为结构体 当需要发送消息时，编译器会生成中间代码，根据情况分别调用 objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, 或 objc_msgSendSuper_stret 其中之一。 这也是为什么 objc_msgSend 要用汇编语言而不是 OC、C 或 C++ 语言来实现，因为单独一个方法定义满足不了多种类型返回值，有的方法返回 id，有的返回 int。考虑到不同类型参数返回值排列组合映射不同方法签名（method signature）的问题，那 switch 语句得老长了。。。这些原因可以总结为 Calling Convention，也就是说函数调用者与被调用者必须约定好参数与返回值在不同架构处理器上的存取规则，比如参数是以何种顺序存储在栈上，或是存储在哪些寄存器上。除此之外还有其他原因，比如其可变参数用汇编处理起来最方便，因为找到 IMP 地址后参数都在栈上。要是用 C++ 传递可变参数那就悲剧了，prologue 机制会弄乱地址（比如 i386 上为了存储 ebp 向后移位 4byte），最后还要用 epilogue 打扫战场。而且汇编程序执行效率高，在 Objective-C Runtime 中调用频率较高的函数好多都用汇编写的。 使用 lookUpImpOrForward 快速查找 IMP上一节中说到的 _class_lookupMethodAndLoadCache3 函数其实只是简单的调用了 lookUpImpOrForward 函数： 12345IMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)&#123; return lookUpImpOrForward(cls, sel, obj, YES/*initialize*/, NO/*cache*/, YES/*resolver*/);&#125; 注意 lookUpImpOrForward 调用时使用缓存参数传入为 NO，因为之前已经尝试过查找缓存了。IMP lookUpImpOrForward(Class cls, SEL sel, id inst, bool initialize, bool cache, bool resolver)实现了一套查找 IMP 的标准路径，也就是在消息转发（Forward）之前的逻辑。 优化缓存查找&amp;类的初始化先对 debug 模式下的 assert 进行 unlock： 1runtimeLock.assertUnlocked(); runtimeLock 本质上是对 Darwin 提供的线程读写锁 pthread_rwlock_t 的一层封装，提供了一些便捷的方法。 lookUpImpOrForward 接着做了如下两件事： 如果使用缓存（cache 参数为 YES），那就调用 cache_getImp 方法从缓存查找 IMP。cache_getImp 是用汇编语言写的，也可以在 objc-msg-x86_64.s 找到，其依然用了之前说过的 CacheLookup 宏。因为 _class_lookupMethodAndLoadCache3 调用 lookUpImpOrForward 时 cache 参数为 NO，这步直接略过。 如果是第一次用到这个类且 initialize 参数为 YES（initialize &amp;&amp; !cls-&gt;isInitialized()），需要进行初始化工作，也就是开辟一个用于读写数据的空间。先对 runtimeLock 写操作加锁，然后调用 cls 的 initialize方法。如果 sel == initialize 也没关系，虽然 initialize 还会被调用一次，但不会起作用啦，因为 cls-&gt;isInitialized() 已经是 YES 啦。 继续在类的继承体系中查找考虑到运行时类中的方法可能会增加，需要先做读操作加锁，使得方法查找和缓存填充成为原子操作。添加 category 会刷新缓存，之后如果旧数据又被重填到缓存中，category 添加操作就会被忽略掉。 1runtimeLock.read(); 之后的逻辑整理如下： 如果 selector 是需要被忽略的垃圾回收用到的方法，则将 IMP 结果设为 _objc_ignored_method，这是个汇编程序入口，可以理解为一个标记。对此种情况进行缓存填充操作后，跳到第 7 步；否则执行下一步。 查找当前类中的缓存，跟之前一样，使用 cache_getImp 汇编程序入口。如果命中缓存获取到了 IMP，则直接跳到第 7 步；否则执行下一步。 在当前类中的方法列表（method list）中进行查找，也就是根据 selector 查找到 Method 后，获取 Method 中的 IMP（也就是 method_imp 属性），并填充到缓存中。查找过程比较复杂，会针对已经排序的列表使用二分法查找，未排序的列表则是线性遍历。如果成功查找到 Method 对象，就直接跳到第 7 步；否则执行下一步。 在继承层级中递归向父类中查找，情况跟上一步类似，也是先查找缓存，缓存没中就查找方法列表。这里跟上一步不同的地方在于缓存策略，有个 _objc_msgForward_impcache 汇编程序入口作为缓存中消息转发的标记。也就是说如果在缓存中找到了 IMP，但如果发现其内容是 _objc_msgForward_impcache，那就终止在类的继承层级中递归查找，进入下一步；否则跳到第 7 步。 当传入 lookUpImpOrForward 的参数 resolver 为 YES 并且是第一次进入第 5 步时，时进入动态方法解析；否则进入下一步。这步消息转发前的最后一次机会。此时释放读入锁（runtimeLock.unlockRead()），接着间接地发送 +resolveInstanceMethod 或 +resolveClassMethod 消息。这相当于告诉程序员『赶紧用 Runtime 给类里这个 selector 弄个对应的 IMP 吧』，因为此时锁已经 unlock 了所以不会缓存结果，甚至还需要软性地处理缓存过期问题可能带来的错误。这里的业务逻辑稍微复杂些，后面会总结。因为这些工作都是在非线程安全下进行的，完成后需要回到第 1 步再次查找 IMP。 此时不仅没查找到 IMP，动态方法解析也不奏效，只能将 _objc_msgForward_impcache 当做 IMP 并写入缓存。这也就是之前第 4 步中为何查找到 _objc_msgForward_impcache 就表明了要进入消息转发了。 读操作解锁，并将之前找到的 IMP 返回。（无论是正经 IMP 还是不正经的 _objc_msgForward_impcache）这步还偏执地做了一些脑洞略大的 assert，很有趣。 对于第 5 步，其实是直接调用 _class_resolveMethod 函数，在这个函数中实现了复杂的方法解析逻辑。如果 cls 是元类则会发送 +resolveClassMethod，然后根据 lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/) 函数的结果来判断是否发送 +resolveInstanceMethod；如果不是元类，则只需要发送 +resolveInstanceMethod 消息。这里调用 +resolveInstanceMethod 或 +resolveClassMethod 时再次用到了 objc_msgSend，而且第三个参数正是传入 lookUpImpOrForward 的那个 sel。在发送方法解析消息之后还会调用 lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/) 来判断是否已经添加上 sel 对应的 IMP 了，打印出结果。 最后 lookUpImpOrForward 方法也会把真正的 IMP 或者需要消息转发的 _objc_msgForward_impcache 返回，并最终专递到 objc_msgSend 中。而 _objc_msgForward_impcache 会在转化成 _objc_msgForward 或 _objc_msgForward_stret。这个后面会讲解原理。 回顾 objc_msgSend 伪代码回过头来会发现 objc_msgSend 的伪代码描述得很传神啊，因为class_getMethodImplementation 的实现如下： 1234567891011IMP class_getMethodImplementation(Class cls, SEL sel)&#123; IMP imp; if (!cls || !sel) return nil; imp = lookUpImpOrNil(cls, sel, nil, YES/*initialize*/, YES/*cache*/, YES/*resolver*/); // Translate forwarding function to C-callable external version if (!imp) &#123; return _objc_msgForward; &#125; return imp;&#125; lookUpImpOrNil 函数获取不到 IMP 时就返回 _objc_msgForward，后面会讲到它。lookUpImpOrNil 跟 lookUpImpOrForward 的功能很相似，只是将 lookUpImpOrForward 实现中的 _objc_msgForward_impcache 替换成了 nil: 1234567IMP lookUpImpOrNil(Class cls, SEL sel, id inst, bool initialize, bool cache, bool resolver)&#123; IMP imp = lookUpImpOrForward(cls, sel, inst, initialize, cache, resolver); if (imp == _objc_msgForward_impcache) return nil; else return imp;&#125; lookUpImpOrNil 方法可以查找到 selector 对应的 IMP 或是 nil，所以如果不考虑返回值类型为结构体的情况，用那几行伪代码来表示复杂的汇编实现还是挺恰当的。 forwarding 中路漫漫的消息转发objc_msgForward_impcache 的转换_objc_msgForward_impcache 只是个内部的函数指针，只存储于上节提到的类的方法缓存中，需要被转化为 _objc_msgForward 和 _objc_msgForward_stret 才能被外部调用。但在 Mac OS X macOS 10.6 及更早版本的 libobjc.A.dylib 中是不能直接调用的，况且我们根本不会直接用到它。带 stret 后缀的函数依旧是返回值为结构体的版本。 上一节最后讲到如果没找到 IMP，就会将 _objc_msgForward_impcache 返回到 objc_msgSend 函数，而正是因为它是用汇编语言写的，所以将内部使用的 _objc_msgForward_impcache 转化成外部可调用的 _objc_msgForward 或 _objc_msgForward_stret 也是由汇编代码来完成。实现原理很简单，就是增加个静态入口 __objc_msgForward_impcache，然后根据此时 CPU 的状态寄存器的内容来决定转换成哪个。如果是 NE(Not Equal) 则转换成 _objc_msgForward_stret，反之是 EQ(Equal) 则转换成 _objc_msgForward: 12jne __objc_msgForward_stretjmp __objc_msgForward 为何根据状态寄存器的值来判断转换成哪个函数指针呢？回过头来看看 objc_msgSend 中调用完 MethodTableLookup之后干了什么： 123MethodTableLookup %a1, %a2 // r11 = IMPcmp %r11, %r11 // set eq (nonstret) for forwardingjmp *%r11 // goto *imp 再看看返回值为结构体的 objc_msgSend_stret 这里的逻辑： 123MethodTableLookup %a2, %a3 // r11 = IMPtest %r11, %r11 // set ne (stret) for forward; r11!=0jmp *%r11 // goto *imp 稍微懂汇编的人一眼就看明白了，不懂的看注释也懂了，我就不墨迹了。现在总算是把消息转发前的逻辑绕回来构成闭环了。 上一节中提到 class_getMethodImplementation 函数的实现，在查找不到 IMP 时返回 _objc_msgForward，而 _objc_msgForward_stret 正好对应着 class_getMethodImplementation_stret: 123456789IMP class_getMethodImplementation_stret(Class cls, SEL sel)&#123; IMP imp = class_getMethodImplementation(cls, sel); // Translate forwarding function to struct-returning version if (imp == (IMP)&amp;_objc_msgForward /* not _internal! */) &#123; return (IMP)&amp;_objc_msgForward_stret; &#125; return imp;&#125; 也就是说 _objc_msgForward* 系列本质都是函数指针，都用汇编语言实现，都可以与 IMP 类型的值作比较。_objc_msgForward 和 _objc_msgForward_stret 声明在 message.h 文件中。_objc_msgForward_impcache 在早期版本的 Runtime 中叫做 _objc_msgForward_internal。 objc_msgForward 也只是个入口从汇编源码可以很容易看出 _objc_msgForward 和 _objc_msgForward_stret 会分别调用 _objc_forward_handler 和 _objc_forward_handler_stret： 12345678910111213141516ENTRY __objc_msgForward// Non-stret versionmovq __objc_forward_handler(%rip), %r11jmp *%r11END_ENTRY __objc_msgForwardENTRY __objc_msgForward_stret// Struct-return versionmovq __objc_forward_stret_handler(%rip), %r11jmp *%r11END_ENTRY __objc_msgForward_stret 这两个 handler 函数的区别从字面上就能看出来，不再赘述。 也就是说，消息转发过程是现将 _objc_msgForward_impcache 强转成 _objc_msgForward 或 _objc_msgForward_stret，再分别调用 _objc_forward_handler 或 _objc_forward_handler_stret。 objc_setForwardHandler 设置了消息转发的回调在 Objective-C 2.0 之前，默认的 _objc_forward_handler 或 _objc_forward_handler_stret 都是 nil，而新版本的默认实现是这样的： 1234567891011121314151617181920// Default forward handler halts the process.__attribute__((noreturn)) void objc_defaultForwardHandler(id self, SEL sel)&#123; _objc_fatal(&quot;%c[%s %s]: unrecognized selector sent to instance %p &quot; &quot;(no message forward handler is installed)&quot;, class_isMetaClass(object_getClass(self)) ? &apos;+&apos; : &apos;-&apos;, object_getClassName(self), sel_getName(sel), self);&#125;void *_objc_forward_handler = (void*)objc_defaultForwardHandler;#if SUPPORT_STRETstruct stret &#123; int i[100]; &#125;;__attribute__((noreturn)) struct stret objc_defaultForwardStretHandler(id self, SEL sel)&#123; objc_defaultForwardHandler(self, sel);&#125;void *_objc_forward_stret_handler = (void*)objc_defaultForwardStretHandler;#endif objc_defaultForwardHandler 中的 _objc_fatal 作用就是打日志并调用 __builtin_trap() 触发 crash，可以看到我们最熟悉的那句 “unrecognized selector sent to instance” 日志。__builtin_trap() 在杀掉进程的同时还能生成日志，比调用 exit() 更好。objc_defaultForwardStretHandler 就是装模作样搞个形式主义，把 objc_defaultForwardHandler 包了一层。__attribute__((noreturn)) 属性通知编译器函数从不返回值，当遇到类似函数需要返回值而却不可能运行到返回值处就已经退出来的情况，该属性可以避免出现错误信息。这里正适合此属性，因为要求返回结构体哒。 因为默认的 Handler 干的事儿就是打日志触发 crash，我们想要实现消息转发，就需要替换掉 Handler 并赋值给 _objc_forward_handler 或 _objc_forward_handler_stret，赋值的过程就需要用到 objc_setForwardHandler函数，实现也是简单粗暴，就是赋值啊： 1234567void objc_setForwardHandler(void *fwd, void *fwd_stret)&#123; _objc_forward_handler = fwd;#if SUPPORT_STRET _objc_forward_stret_handler = fwd_stret;#endif&#125; 逆向工程助力刨根问底重头戏在于对 objc_setForwardHandler 的调用，以及之后的消息转发调用栈。这回不是在 Objective-C Runtime （libobjc.dylib）中啦，而是在 Core Foundation（CoreFoundation.framework）中。虽然 CF 是开源的，但有意思的是苹果故意在开源的代码中删除了在 CFRuntime.c 文件 __CFInitialize() 中调用 objc_setForwardHandler 的代码。__CFInitialize() 函数是在 CF runtime 连接到进程时初始化调用的。从反编译得到的汇编代码中可以很容易跟 C 源码对比出来，我用红色标出了同一段代码的差异。 汇编语言还是比较好理解的，红色标出的那三个指令就是把 __CF_forwarding_prep_0 和 ___forwarding_prep_1___作为参数调用 objc_setForwardHandler 方法（那么之前那两个 DefaultHandler 卵用都没有咯，反正不出意外会被 CF 替换掉）： 反编译后的 __CFInitialize() 汇编代码 然而在源码中对应的代码却被删掉啦： 苹果提供的 __CFInitialize() 函数源码 在早期版本的 CF 源码中，还是可以看到 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 的声明的，但是不会有实现源码，也没有对 objc_setForwardHandler 的调用。这些细节从函数调用栈中无法看出，只能逆向工程看汇编指令。但从函数调用栈可以看出 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 这两个 Forward Handler 做了啥： 12345678910111213142016-06-14 12:50:15.385 MessageForward[67364:7174239] -[MFObject sendMessage]: unrecognized selector sent to instance 0x1006001a02016-06-14 12:50:15.387 MessageForward[67364:7174239] *** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[MFObject sendMessage]: unrecognized selector sent to instance 0x1006001a0&apos;*** First throw call stack:( 0 CoreFoundation 0x00007fff8fa554f2 __exceptionPreprocess + 178 1 libobjc.A.dylib 0x00007fff98396f7e objc_exception_throw + 48 2 CoreFoundation 0x00007fff8fabf1ad -[NSObject(NSObject) doesNotRecognizeSelector:] + 205 3 CoreFoundation 0x00007fff8f9c5571 ___forwarding___ + 1009 4 CoreFoundation 0x00007fff8f9c50f8 _CF_forwarding_prep_0 + 120 5 MessageForward 0x0000000100000f1f main + 79 6 libdyld.dylib 0x00007fff8bc2c5ad start + 1 7 ??? 0x0000000000000001 0x0 + 1)libc++abi.dylib: terminating with uncaught exception of type NSException 这个日志场景熟悉得不能再熟悉了，可以看出 _CF_forwarding_prep_0 函数调用了 ___forwarding___ 函数，接着又调用了 doesNotRecognizeSelector 方法，最后抛出异常。但是靠这些是无法说服看客的，还得靠逆向工程反编译后再反汇编成伪代码来一探究竟，刨根问底。 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 函数都调用了 ___forwarding___，只是传入参数不同。___forwarding___ 有两个参数，第一个参数为将要被转发消息的栈指针（可以简单理解成 IMP），第二个参数标记是否返回结构体。__CF_forwarding_prep_0 第二个参数传入 0，___forwarding_prep_1___ 传入的是 1，从函数名都能看得出来。下面是这两个函数的伪代码： 12345678910111213141516171819202122232425int __CF_forwarding_prep_0(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) &#123; rax = ____forwarding___(rsp, 0x0); if (rax != 0x0) &#123; // 转发结果不为空，将内容返回 rax = *rax; &#125; else &#123; // 转发结果为空，调用 objc_msgSend(id self, SEL _cmd,...); rsi = *(rsp + 0x8); rdi = *rsp; rax = objc_msgSend(rdi, rsi); &#125; return rax;&#125;int ___forwarding_prep_1___(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) &#123; rax = ____forwarding___(rsp, 0x1); if (rax != 0x0) &#123;// 转发结果不为空，将内容返回 rax = *rax; &#125; else &#123;// 转发结果为空，调用 objc_msgSend_stret(void * st_addr, id self, SEL _cmd, ...); rdx = *(rsp + 0x10); rsi = *(rsp + 0x8); rdi = *rsp; rax = objc_msgSend_stret(rdi, rsi, rdx); &#125; return rax;&#125; 在 x86_64 架构中，rax 寄存器一般是作为返回值，rsp 寄存器是栈指针。在调用 objc_msgSend 函数时，参数 arg0(self), arg1(_cmd), arg2, arg3, arg4, arg5 分别使用寄存器 rdi, rsi, rdx, rcx, r8, r9 的值。在调用 objc_msgSend_stret 时第一个参数为 st_addr，其余参数依次后移。为了能够打包出 NSInvocation 实例并传入后续的 forwardInvocation: 方法，在调用 ___forwarding___ 函数之前会先将所有参数压入栈中。因为寄存器 rsp为栈指针指向栈顶，所以 rsp 的内容就是 self 啦，因为 x86_64 是小端，栈增长方向是由高地址到低地址，所以从栈顶往下移动一个指针需要加 0x8（64bit）。而将参数入栈的顺序是从后往前的，也就是说 arg0 是最后一个入栈的，位于栈顶： 12345678910111213141516171819202122 __CF_forwarding_prep_0:0000000000085080 push rbp ; XREF=___CFInitialize+1380000000000085081 mov rbp, rsp0000000000085084 sub rsp, 0xd0000000000008508b mov qword [ss:rsp+0xb0], rax0000000000085093 movq qword [ss:rsp+0xa0], xmm7000000000008509c movq qword [ss:rsp+0x90], xmm600000000000850a5 movq qword [ss:rsp+0x80], xmm500000000000850ae movq qword [ss:rsp+0x70], xmm400000000000850b4 movq qword [ss:rsp+0x60], xmm300000000000850ba movq qword [ss:rsp+0x50], xmm200000000000850c0 movq qword [ss:rsp+0x40], xmm100000000000850c6 movq qword [ss:rsp+0x30], xmm000000000000850cc mov qword [ss:rsp+0x28], r900000000000850d1 mov qword [ss:rsp+0x20], r800000000000850d6 mov qword [ss:rsp+0x18], rcx00000000000850db mov qword [ss:rsp+0x10], rdx00000000000850e0 mov qword [ss:rsp+0x8], rsi00000000000850e5 mov qword [ss:rsp], rdi00000000000850e9 mov rdi, rsp ; argument #1 for method ____forwarding___00000000000850ec mov rsi, 0x0 ; argument #2 for method ____forwarding___00000000000850f3 call ____forwarding___ 消息转发的逻辑几乎都写在 ___forwarding___ 函数中了，实现比较复杂，反编译出的伪代码也不是很直观。我对 arigrant.com 的结果完善如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485int __forwarding__(void *frameStackPointer, int isStret) &#123; id receiver = *(id *)frameStackPointer; SEL sel = *(SEL *)(frameStackPointer + 8); const char *selName = sel_getName(sel); Class receiverClass = object_getClass(receiver); // 调用 forwardingTargetForSelector: if (class_respondsToSelector(receiverClass, @selector(forwardingTargetForSelector:))) &#123; id forwardingTarget = [receiver forwardingTargetForSelector:sel]; if (forwardingTarget &amp;&amp; forwarding != receiver) &#123; if (isStret == 1) &#123; int ret; objc_msgSend_stret(&amp;ret,forwardingTarget, sel, ...); return ret; &#125; return objc_msgSend(forwardingTarget, sel, ...); &#125; &#125; // 僵尸对象 const char *className = class_getName(receiverClass); const char *zombiePrefix = &quot;_NSZombie_&quot;; size_t prefixLen = strlen(zombiePrefix); // 0xa if (strncmp(className, zombiePrefix, prefixLen) == 0) &#123; CFLog(kCFLogLevelError, @&quot;*** -[%s %s]: message sent to deallocated instance %p&quot;, className + prefixLen, selName, receiver); &lt;breakpoint-interrupt&gt; &#125; // 调用 methodSignatureForSelector 获取方法签名后再调用 forwardInvocation if (class_respondsToSelector(receiverClass, @selector(methodSignatureForSelector:))) &#123; NSMethodSignature *methodSignature = [receiver methodSignatureForSelector:sel]; if (methodSignature) &#123; BOOL signatureIsStret = [methodSignature _frameDescriptor]-&gt;returnArgInfo.flags.isStruct; if (signatureIsStret != isStret) &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: method signature and compiler disagree on struct-return-edness of &apos;%s&apos;. Signature thinks it does%s return a struct, and compiler thinks it does%s.&quot;, selName, signatureIsStret ? &quot;&quot; : not, isStret ? &quot;&quot; : not); &#125; if (class_respondsToSelector(receiverClass, @selector(forwardInvocation:))) &#123; NSInvocation *invocation = [NSInvocation _invocationWithMethodSignature:methodSignature frame:frameStackPointer]; [receiver forwardInvocation:invocation]; void *returnValue = NULL; [invocation getReturnValue:&amp;value]; return returnValue; &#125; else &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: object %p of class &apos;%s&apos; does not implement forwardInvocation: -- dropping message&quot;, receiver, className); return 0; &#125; &#125; &#125; SEL *registeredSel = sel_getUid(selName); // selector 是否已经在 Runtime 注册过 if (sel != registeredSel) &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: selector (%p) for message &apos;%s&apos; does not match selector known to Objective C runtime (%p)-- abort&quot;, sel, selName, registeredSel); &#125; // doesNotRecognizeSelector else if (class_respondsToSelector(receiverClass,@selector(doesNotRecognizeSelector:))) &#123; [receiver doesNotRecognizeSelector:sel]; &#125; else &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: object %p of class &apos;%s&apos; does not implement doesNotRecognizeSelector: -- abort&quot;, receiver, className); &#125; // The point of no return. kill(getpid(), 9);&#125; 这么一大坨代码就是整个消息转发路径的逻辑，概括如下： 先调用 forwardingTargetForSelector 方法获取新的 target 作为 receiver 重新执行 selector，如果返回的内容不合法（为 nil 或者跟旧 receiver 一样），那就进入第二步。 调用 methodSignatureForSelector 获取方法签名后，判断返回类型信息是否正确，再调用 forwardInvocation执行 NSInvocation 对象，并将结果返回。如果对象没实现 methodSignatureForSelector 方法，进入第三步。 调用 doesNotRecognizeSelector 方法。 doesNotRecognizeSelector 之前其实还有个判断 selector 在 Runtime 中是否注册过的逻辑，但在我们正常发消息的时候不会出此问题。但如果手动创建一个 NSInvocation 对象并调用 invoke，并将第二个参数设置成一个不存在的 selector，那就会导致这个问题，并输入日志 “does not match selector known to Objective C runtime”。较真儿的读者可能会有疑问：何这段逻辑判断干脆用不到却还存在着？难道除了 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 函数还有其他函数也调用 ___forwarding___ 么？莫非消息转发还有其他路径？其实并不是！原因是 ___forwarding___ 调用了 ___invoking___ 函数，所以上面的伪代码直接把 ___invoking___ 函数的逻辑也『翻译』过来了。除了 ___forwarding___ 函数，以下方法也会调用___invoking___ 函数: 123-[NSInvocation invoke]-[NSInvocation invokeUsingIMP:]-[NSInvocation invokeSuper] doesNotRecognizeSelector 方法其实在 libobj.A.dylib 中已经废弃了，而是在 CF 框架中实现，而且也不是开源的。从函数调用栈可以发现 doesNotRecognizeSelector 之后会抛出异常，而 Runtime 中废弃的实现只是打日志后直接杀掉进程（__builtin_trap()）。下面是 CF 中实现的伪代码： 123456789101112131415161718192021222324void -[NSObject doesNotRecognizeSelector:](void * self, void * _cmd, void * arg2) &#123; r14 = ___CFFullMethodName([self class], self, arg2); _CFLog(0x3, @&quot;%@: unrecognized selector sent to instance %p&quot;, r14, self, r8, r9, stack[2048]); rbx = _CFMakeCollectable(_CFStringCreateWithFormat(___kCFAllocatorSystemDefault, 0x0, @&quot;%@: unrecognized selector sent to instance %p&quot;)); if (*(int8_t *)___CFOASafe != 0x0) &#123; ___CFRecordAllocationEvent(); &#125; rax = _objc_rootAutorelease(rbx); rax = [NSException exceptionWithName:@&quot;NSInvalidArgumentException&quot; reason:rax userInfo:0x0]; objc_exception_throw(rax); return;&#125;void +[NSObject doesNotRecognizeSelector:](void * self, void * _cmd, void * arg2) &#123; r14 = ___CFFullMethodName([self class], self, arg2); _CFLog(0x3, @&quot;%@: unrecognized selector sent to class %p&quot;, r14, self, r8, r9, stack[2048]); rbx = _CFMakeCollectable(_CFStringCreateWithFormat(___kCFAllocatorSystemDefault, 0x0, @&quot;%@: unrecognized selector sent to class %p&quot;)); if (*(int8_t *)___CFOASafe != 0x0) &#123; ___CFRecordAllocationEvent(); &#125; rax = _objc_rootAutorelease(rbx); rax = [NSException exceptionWithName:@&quot;NSInvalidArgumentException&quot; reason:rax userInfo:0x0]; objc_exception_throw(rax); return;&#125; 也就是说我们可以 override doesNotRecognizeSelector 或者捕获其抛出的异常。在这里还是大有文章可做的。 总结我将整个实现流程绘制出来，过滤了一些不会进入的分支路径和跟主题无关的细节： 消息发送与转发路径流程图 介于国内关于这块知识的好多文章描述不够准确和详细，或是对消息转发的原理描述理解不够深刻，或是侧重贴源码而欠思考，所以我做了一个比较全面详细的讲解。 转自 玉令天下的博客]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[runtime理解]]></title>
    <url>%2F2018%2F09%2F13%2Fruntime%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[什么是Runtime 我们写的代码在程序运行过程中都会被转化成runtime的C代码执行，例如[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));。 OC中一切都被设计成了对象，我们都知道一个类被初始化成一个实例，这个实例是一个对象。实际上一个类本质上也是一个对象，在runtime中用结构体表示。 相关的定义： 1234567891011/// 描述类中的一个方法typedef struct objc_method *Method;/// 实例变量typedef struct objc_ivar *Ivar;/// 类别Categorytypedef struct objc_category *Category;/// 类中声明的属性typedef struct objc_property *objc_property_t; 类在runtime中的表示 12345678910111213141516171819//类在runtime中的表示struct objc_class &#123; Class isa;//指针，顾名思义，表示是一个什么， //实例的isa指向类对象，类对象的isa指向元类#if !__OBJC2__ Class super_class; //指向父类 const char *name; //类名 long version; long info; long instance_size struct objc_ivar_list *ivars //成员变量列表 struct objc_method_list **methodLists; //方法列表 struct objc_cache *cache;//缓存 //一种优化，调用过的方法存入缓存列表，下次调用先找缓存 struct objc_protocol_list *protocols //协议列表 #endif&#125; OBJC2_UNAVAILABLE;/* Use `Class` instead of `struct objc_class *` */ 获取列表有时候会有这样的需求，我们需要知道当前类中每个属性的名字（比如字典转模型，字典的Key和模型对象的属性名字不匹配）。我们可以通过runtime的一系列方法获取类的一些信息（包括属性列表，方法列表，成员变量列表，和遵循的协议列表）。 123456789101112131415161718192021222324252627282930unsigned int count; //获取属性列表 objc_property_t *propertyList = class_copyPropertyList([self class], &amp;count); for (unsigned int i=0; i&lt;count; i++) &#123; const char *propertyName = property_getName(propertyList[i]); NSLog(@&quot;property----&gt;%@&quot;, [NSString stringWithUTF8String:propertyName]); &#125; //获取方法列表 Method *methodList = class_copyMethodList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Method method = methodList[i]; NSLog(@&quot;method----&gt;%@&quot;, NSStringFromSelector(method_getName(method))); &#125; //获取成员变量列表 Ivar *ivarList = class_copyIvarList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Ivar myIvar = ivarList[i]; const char *ivarName = ivar_getName(myIvar); NSLog(@&quot;Ivar----&gt;%@&quot;, [NSString stringWithUTF8String:ivarName]); &#125; //获取协议列表 __unsafe_unretained Protocol **protocolList = class_copyProtocolList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Protocol *myProtocal = protocolList[i]; const char *protocolName = protocol_getName(myProtocal); NSLog(@&quot;protocol----&gt;%@&quot;, [NSString stringWithUTF8String:protocolName]); &#125; 在Xcode上跑一下看看输出吧，需要给你当前的类写几个属性，成员变量，方法和协议，不然获取的列表是没有东西的。注意，调用这些获取列表的方法别忘记导入头文件#import &lt;objc/runtime.h&gt;。 方法调用让我们看一下方法调用在运行时的过程（参照前文类在runtime中的表示） 如果用实例对象调用实例方法，会到实例的isa指针指向的对象（也就是类对象）操作。如果调用的是类方法，就会到类对象的isa指针指向的对象（也就是元类对象）中操作。 首先，在相应操作的对象中的缓存方法列表中找调用的方法，如果找到，转向相应实现并执行。 如果没找到，在相应操作的对象中的方法列表中找调用的方法，如果找到，转向相应实现执行 如果没找到，去父类指针所指向的对象中执行1，2. 以此类推，如果一直到根类还没找到，转向拦截调用。 如果没有重写拦截调用的方法，程序报错。 以上的过程给我带来的启发： 重写父类的方法，并没有覆盖掉父类的方法，只是在当前类对象中找到了这个方法后就不会再去父类中找了。 如果想调用已经重写过的方法的父类的实现，只需使用super这个编译器标识，它会在运行时跳过在当前的类对象中寻找方法的过程。 拦截调用在方法调用中说到了，如果没有找到方法就会转向拦截调用。那么什么是拦截调用呢。拦截调用就是，在找不到调用的方法程序崩溃之前，你有机会通过重写NSObject的四个方法来处理。 12345+ (BOOL)resolveClassMethod:(SEL)sel;+ (BOOL)resolveInstanceMethod:(SEL)sel;//后两个方法需要转发到其他的类处理- (id)forwardingTargetForSelector:(SEL)aSelector;- (void)forwardInvocation:(NSInvocation *)anInvocation; 第一个方法是当你调用一个不存在的类方法的时候，会调用这个方法，默认返回NO，你可以加上自己的处理然后返回YES。 第二个方法和第一个方法相似，只不过处理的是实例方法。 第三个方法是将你调用的不存在的方法重定向到一个其他声明了这个方法的类，只需要你返回一个有这个方法的target。 第四个方法是将你调用的不存在的方法打包成NSInvocation传给你。做完你自己的处理后，调用invokeWithTarget:方法让某个target触发这个方法。 动态添加方法重写了拦截调用的方法并且返回了YES，我们要怎么处理呢？有一个办法是根据传进来的SEL类型的selector动态添加一个方法。 首先从外部隐式调用一个不存在的方法： 12//隐式调用方法[target performSelector:@selector(resolveAdd:) withObject:@&quot;test&quot;]; 然后，在target对象内部重写拦截调用的方法，动态添加方法。 1234567891011void runAddMethod(id self, SEL _cmd, NSString *string)&#123; NSLog(@&quot;add C IMP &quot;, string);&#125;+ (BOOL)resolveInstanceMethod:(SEL)sel&#123; //给本类动态添加一个方法 if ([NSStringFromSelector(sel) isEqualToString:@&quot;resolveAdd:&quot;]) &#123; class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;); &#125; return YES;&#125; 其中class_addMethod的四个参数分别是： Class cls给哪个类添加方法，本例中是self SEL name添加的方法，本例中是重写的拦截调用传进来的selector。 IMP imp方法的实现，C方法的方法实现可以直接获得。如果是OC方法，可以用+ (IMP)instanceMethodForSelector:(SEL)aSelector;获得方法的实现。 &quot;v@:*&quot;方法的签名，代表有一个参数的方法。 关联对象现在你准备用一个系统的类，但是系统的类并不能满足你的需求，你需要额外添加一个属性。这种情况的一般解决办法就是继承。但是，只增加一个属性，就去继承一个类，总是觉得太麻烦类。这个时候，runtime的关联属性就发挥它的作用了。 123456//首先定义一个全局变量，用它的地址作为关联对象的keystatic char associatedObjectKey;//设置关联对象objc_setAssociatedObject(target, &amp;associatedObjectKey, @&quot;添加的字符串属性&quot;, OBJC_ASSOCIATION_RETAIN_NONATOMIC); //获取关联对象NSString *string = objc_getAssociatedObject(target, &amp;associatedObjectKey);NSLog(@&quot;AssociatedObject = %@&quot;, string); objc_setAssociatedObject的四个参数： id object给谁设置关联对象。 const void *key关联对象唯一的key，获取时会用到。 id value关联对象。 objc_AssociationPolicy关联策略，有以下几种策略： 1234567enum &#123; OBJC_ASSOCIATION_ASSIGN = 0, OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, OBJC_ASSOCIATION_COPY_NONATOMIC = 3, OBJC_ASSOCIATION_RETAIN = 01401, OBJC_ASSOCIATION_COPY = 01403 &#125;; 如果你熟悉OC，看名字应该知道这几种策略的意思了吧。 objc_getAssociatedObject的两个参数。 id object获取谁的关联对象。 const void *key根据这个唯一的key获取关联对象。 其实，你还可以把添加和获取关联对象的方法写在你需要用到这个功能的类的类别中，方便使用。 12345678//添加关联对象- (void)addAssociatedObject:(id)object&#123; objc_setAssociatedObject(self, @selector(getAssociatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;//获取关联对象- (id)getAssociatedObject&#123; return objc_getAssociatedObject(self, _cmd);&#125; 注意：这里面我们把getAssociatedObject方法的地址作为唯一的key，_cmd代表当前调用方法的地址。 方法交换方法交换，顾名思义，就是将两个方法的实现交换。例如，将A方法和B方法交换，调用A方法的时候，就会执行B方法中的代码，反之亦然。话不多说，这是参考Mattt大神在NSHipster上的文章自己写的代码。 123456789101112131415161718192021222324252627282930313233343536373839404142#import &quot;UIViewController+swizzling.h&quot;#import &lt;objc/runtime.h&gt;@implementation UIViewController (swizzling)//load方法会在类第一次加载的时候被调用//调用的时间比较靠前，适合在这个方法里做方法交换+ (void)load&#123; //方法交换应该被保证，在程序中只会执行一次 static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; //获得viewController的生命周期方法的selector SEL systemSel = @selector(viewWillAppear:); //自己实现的将要被交换的方法的selector SEL swizzSel = @selector(swiz_viewWillAppear:); //两个方法的Method Method systemMethod = class_getInstanceMethod([self class], systemSel); Method swizzMethod = class_getInstanceMethod([self class], swizzSel); //首先动态添加方法，实现是被交换的方法，返回值表示添加成功还是失败 BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(swizzMethod), method_getTypeEncoding(swizzMethod)); if (isAdd) &#123; //如果成功，说明类中不存在这个方法的实现 //将被交换方法的实现替换到这个并不存在的实现 class_replaceMethod(self, swizzSel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod)); &#125;else&#123; //否则，交换两个方法的实现 method_exchangeImplementations(systemMethod, swizzMethod); &#125; &#125;);&#125;- (void)swiz_viewWillAppear:(BOOL)animated&#123; //这时候调用自己，看起来像是死循环 //但是其实自己的实现已经被替换了 [self swiz_viewWillAppear:animated]; NSLog(@&quot;swizzle&quot;);&#125;@end 在一个自己定义的viewController中重写viewWillAppear 1234- (void)viewWillAppear:(BOOL)animated&#123; [super viewWillAppear:animated]; NSLog(@&quot;viewWillAppear&quot;);&#125; Run起来看看输出吧！ 我的理解： 方法交换对于我来说更像是实现一种思想的最佳技术：AOP面向切面编程。 既然是切面，就一定不要忘记，交换完再调回自己。 一定要保证只交换一次，否则就会很乱。 最后，据说这个技术很危险，谨慎使用。 [转自 兴宇是谁]]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[事件的传递和响应机制]]></title>
    <url>%2F2018%2F09%2F12%2F%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[事件的生命周期 事件的产生和传递（事件如何从父控件传递到子控件并寻找到最合适的view、寻找最合适的view的底层实现、拦截事件的处理）-&gt;找到最合适的view后事件的处理（touches方法的重写，也就是事件的响应） ​ 其中重点和难点是： 1.如何寻找最合适的view 2.寻找最合适的view的底层实现（hitTest:withEvent:底层实现） iOS中的事件iOS中的事件可以分为3大类型： 触摸事件 加速计事件 远程控制事件 本文只讨论接触事件 响应者对象(UIResponder)学习触摸事件首先要了解一个比较重要的概念-响应者对象（UIResponder）。 在iOS中不是任何对象都能处理事件，只有继承了UIResponder的对象才能接受并处理事件，我们称之为“响应者对象”。以下都是继承自UIResponder的，所以都能接收并处理事件。 UIApplication UIViewController UIView 那么为什么继承自UIResponder的类就能够接收并处理事件呢？ 因为UIResponder中提供了以下4个对象方法来处理触摸事件。 12345678910111213141516UIResponder内部提供了以下方法来处理事件触摸事件- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;加速计事件- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event;- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event;- (void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event;远程控制事件- (void)remoteControlReceivedWithEvent:(UIEvent *)event;作者：VV木公子链接：https://www.jianshu.com/p/2e074db792ba來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 iOS中的事件的产生和传递事件的产生发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中,为什么是队列而不是栈？因为队列的特点是FIFO，即先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。 UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。 事件的传递 触摸事件的传递是从父控件传递到子控件 也就是UIApplication-&gt;window-&gt;寻找处理事件最合适的view 注 意: 如果父控件不能接受触摸事件，那么子控件就不可能接收到触摸事件 应用如何找到最合适的控件来处理事件？1.首先判断主窗口（keyWindow）自己是否能接受触摸事件 2.判断触摸点是否在自己身上 3.子控件数组中从后往前遍历子控件，重复前面的两个步骤（所谓从后往前遍历子控件，就是首先查找子控件数组中最后一个元素，然后执行1、2步骤） 4.view，比如叫做fitView，那么会把这个事件交给这个fitView，再遍历这个fitView的子控件，直至没有更合适的view为止。 5.如果没有符合条件的子控件，那么就认为自己最合适处理这个事件，也就是自己是最合适的view。 UIView不能接收触摸事件的三种情况： 不允许交互：userInteractionEnabled = NO 隐藏：如果把父控件隐藏，那么子控件也会隐藏，隐藏的控件不能接受事件 透明度：如果设置一个控件的透明度&lt;0.01，会直接影响子控件的透明度。alpha：0.0~0.01为透明。 注 意:默认UIImageView不能接受触摸事件，因为不允许交互，即userInteractionEnabled = NO。所以如果希望UIImageView可以交互，需要设置UIImageView的userInteractionEnabled = YES。 总结一下1.点击一个UIView或产生一个触摸事件A，这个触摸事件A会被添加到由UIApplication管理的事件队列中（即，首先接收到事件的是UIApplication）。2.UIApplication会从事件对列中取出最前面的事件（此处假设为触摸事件A），把事件A传递给应用程序的主窗口（keyWindow）。3.窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件。（至此，第一步已完成） (重难点）如何寻找最合适的view应用如何找到最合适的控件来处理事件？1.首先判断主窗口（keyWindow）自己是否能接受触摸事件2.触摸点是否在自己身上3.从后往前遍历子控件，重复前面的两个步骤（首先查找数组中最后一个元素）4.如果没有符合条件的子控件，那么就认为自己最合适处理 详述：1.主窗口接收到应用程序传递过来的事件后，首先判断自己能否接手触摸事件。如果能，那么在判断触摸点在不在窗口自己身上 2.如果触摸点也在窗口身上，那么窗口会从后往前遍历自己的子控件（遍历自己的子控件只是为了寻找出来最合适的view） 3.遍历到每一个子控件后，又会重复上面的两个步骤（传递事件给子控件，1.判断子控件能否接受事件，2.点在不在子控件上） 4.如此循环遍历子控件，直到找到最合适的view，如果没有更合适的子控件，那么自己就成为最合适的view。找到最合适的view后，就会调用该view的touches方法处理具体的事件。所以，只有找到最合适的view，把事件传递给最合适的view后，才会调用touches方法进行接下来的事件处理。找不到最合适的view，就不会调用touches方法进行事件处理。注意：之所以会采取从后往前遍历子控件的方式寻找最合适的view只是为了做一些循环优化。因为相比较之下，后添加的view在上面，降低循环次数。 寻找最合适的view底层剖析两个重要的方法：hitTest:withEvent:方法pointInside方法 3.3.1.1.hitTest：withEvent：方法什么时候调用？ 只要事件一传递给一个控件,这个控件就会调用他自己的hitTest：withEvent：方法 作用 寻找并返回最合适的view(能够响应事件的那个最合适的view) 注 意：不管这个控件能不能处理事件，也不管触摸点在不在这个控件上，事件都会先传递给这个控件，随后再调用hitTest:withEvent:方法 拦截事件的处理 正因为hitTest：withEvent：方法可以返回最合适的view，所以可以通过重写hitTest：withEvent：方法，返回指定的view作为最合适的view。 不管点击哪里，最合适的view都是hitTest：withEvent：方法中返回的那个view。 通过重写hitTest：withEvent：，就可以拦截事件的传递过程，想让谁处理事件谁就处理事件。 事件传递给谁，就会调用谁的hitTest:withEvent:方法。注 意：如果hitTest:withEvent:方法中返回nil，那么调用该方法的控件本身和其子控件都不是最合适的view，也就是在自己身上没有找到更合适的view。那么最合适的view就是该控件的父控件。所以事件的传递顺序是这样的： 产生触摸事件-&gt;UIApplication事件队列-&gt;[UIWindow hitTest:withEvent:]-&gt;返回更合适的view-&gt;[子控件 hitTest:withEvent:]-&gt;返回最合适的view 事件传递给窗口或控件的后，就调用hitTest:withEvent:方法寻找更合适的view。所以是，先传递事件，再根据事件在自己身上找更合适的view。不管子控件是不是最合适的view，系统默认都要先把事件传递给子控件，经过子控件调用子控件自己的hitTest:withEvent:方法验证后才知道有没有更合适的view。即便父控件是最合适的view了，子控件的hitTest:withEvent:方法还是会调用，不然怎么知道有没有更合适的！即，如果确定最终父控件是最合适的view，那么该父控件的子控件的hitTest:withEvent:方法也是会被调用的。技巧：想让谁成为最合适的view就重写谁自己的父控件的hitTest:withEvent:方法返回指定的子控件，或者重写自己的hitTest:withEvent:方法 return self。但是，建议在父控件的hitTest:withEvent:中返回子控件作为最合适的view！ 原因在于在自己的hitTest:withEvent:方法中返回自己有时候会出现问题。因为会存在这么一种情况：当遍历子控件时，如果触摸点不在子控件A自己身上而是在子控件B身上，还要要求返回子控件A作为最合适的view，采用返回自己的方法可能会导致还没有来得及遍历A自己，就有可能已经遍历了点真正所在的view，也就是B。这就导致了返回的不是自己而是触摸点真正所在的view。所以还是建议在父控件的hitTest:withEvent:中返回子控件作为最合适的view！例如：whiteView有redView和greenView两个子控件。redView先添加，greenView后添加。如果要求无论点击那里都要让redView作为最合适的view（把事件交给redView来处理）那么只能在whiteView的hitTest:withEvent:方法中return self.subViews[0];这种情况下在redView的hitTest:withEvent:方法中return self;是不好使的！ 123456789101112131415161718192021// 这里redView是whiteView的第0个子控件#import &quot;redView.h&quot;@implementation redView- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; return self;&#125;- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@&quot;red-touch&quot;);&#125;@end// 或者#import &quot;whiteView.h&quot;@implementation whiteView- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; return self.subviews[0];&#125;- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@&quot;white-touch&quot;);&#125;@end 特殊情况：谁都不能处理事件，窗口也不能处理。 重写window的hitTest：withEvent：方法return nil 只能有窗口处理事件。 控制器的view的hitTest：withEvent：方法return nil或者window的hitTest：withEvent：方法return self return nil的含义：hitTest：withEvent：中return nil的意思是调用当前hitTest：withEvent：方法的view不是合适的view，子控件也不是合适的view。如果同级的兄弟控件也没有合适的view，那么最合适的view就是父控件。 寻找最合适的view底层剖析之hitTest：withEvent：方法底层做法/** hitTest:withEvent:方法底层实现**/ 12345678910111213141516171819202122232425262728293031323334353637383940#import &quot;WSWindow.h&quot;@implementation WSWindow// 什么时候调用:只要事件一传递给一个控件，那么这个控件就会调用自己的这个方法// 作用:寻找并返回最合适的view// UIApplication -&gt; [UIWindow hitTest:withEvent:]寻找最合适的view告诉系统// point:当前手指触摸的点// point:是方法调用者坐标系上的点- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; // 1.判断下窗口能否接收事件 if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) return nil; // 2.判断下点在不在窗口上 // 不在窗口上 if ([self pointInside:point withEvent:event] == NO) return nil; // 3.从后往前遍历子控件数组 int count = (int)self.subviews.count; for (int i = count - 1; i &gt;= 0; i--) &#123; // 获取子控件 UIView *childView = self.subviews[i]; // 坐标系的转换,把窗口上的点转换为子控件上的点 // 把自己控件上的点转换成子控件上的点 CGPoint childP = [self convertPoint:point toView:childView]; UIView *fitView = [childView hitTest:childP withEvent:event]; if (fitView) &#123; // 如果能找到最合适的view return fitView; &#125; &#125; // 4.没有找到更合适的view，也就是没有比自己更合适的view return self; &#125; // 作用:判断下传入过来的点在不在方法调用者的坐标系上 // point:是方法调用者坐标系上的点 //- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event //&#123; // return NO; //&#125; - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@&quot;%s&quot;,__func__); &#125; @end hit:withEvent:方法底层会调用pointInside:withEvent:方法判断点在不在方法调用者的坐标系上。 3.3.1.2.pointInside:withEvent:方法pointInside:withEvent:方法判断点在不在当前view上（方法调用者的坐标系上）如果返回YES，代表点在方法调用者的坐标系上;返回NO代表点不在方法调用者的坐标系上，那么方法调用者也就不能处理事件。 3.3.2.练习屏幕上现在有一个viewA，viewA有一个subView叫做viewB，要求触摸viewB时,viewB会响应事件，而触摸viewA本身，不会响应该事件。如何实现？ 1234567- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; UIView *view = [super hitTest:point withEvent:event]; if (view == self) &#123; return nil; &#125; return view;&#125; 事件的响应触摸事件处理的整体过程1&gt;用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件2&gt;找到最合适的视图控件后，就会调用控件的touches方法来作具体的事件处理touchesBegan…touchesMoved…touchedEnded…3&gt;这些touches方法的默认做法是将事件顺着响应者链条向上传递（也就是touch方法默认不处理事件，只传递事件），将事件交给上一个响应者进行处理 响应者链条示意图响应者链条：在iOS程序中无论是最后面的UIWindow还是最前面的某个按钮，它们的摆放是有前后关系的，一个控件可以放到另一个控件上面或下面，那么用户点击某个控件时是触发上面的控件还是下面的控件呢，这种先后关系构成一个链条就叫“响应者链”。也可以说，响应者链是由多个响应者对象连接起来的链条。在iOS中响应者链的关系可以用下图表示： 响应者对象： 作用： 如何判断上一个响应者 1&gt; 如果当前这个view是控制器的view,那么控制器就是上一个响应者 2&gt; 如果当前这个view不是控制器的view,那么父控件就是上一个响应者 响应者链的事件传递过程: 1&gt;如果当前view是控制器的view，那么控制器就是上一个响应者，事件就传递给控制器；如果当前view不是控制器的view，那么父视图就是当前view的上一个响应者，事件就传递给它的父视图 2&gt;在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理 3&gt;如果window对象也不处理，则其将事件或消息传递给UIApplication对象 4&gt;如果UIApplication也不能处理该事件或消息，则将其丢弃 事件处理的整个流程总结： 1.触摸屏幕产生触摸事件后，触摸事件会被添加到由UIApplication管理的事件队列中（即，首先接收到事件的是UIApplication）。 2.UIApplication会从事件队列中取出最前面的事件，把事件传递给应用程序的主窗口（keyWindow）。 3.主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件。（至此，第一步已完成) 4.最合适的view会调用自己的touches方法处理事件 5.touches默认做法是把事件顺着响应者链条向上抛。touches的默认做法： 1234567891011#import &quot;WSView.h&quot;@implementation WSView //只要点击控件,就会调用touchBegin,如果没有重写这个方法,自己处理不了触摸事件// 上一个响应者可能是父控件- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; // 默认会把事件传递给上一个响应者,上一个响应者是父控件,交给父控件处理[super touchesBegan:touches withEvent:event]; // 注意不是调用父控件的touches方法，而是调用父类的touches方法// super是父类 superview是父控件 &#125;@end 事件的传递与响应：1、当一个事件发生后，事件会从父控件传给子控件，也就是说由UIApplication -&gt; UIWindow -&gt; UIView -&gt; initial view,以上就是事件的传递，也就是寻找最合适的view的过程。 2、接下来是事件的响应。首先看initial view能否处理这个事件，如果不能则会将事件传递给其上级视图（inital view的superView）；如果上级视图仍然无法处理则会继续往上传递；一直传递到视图控制器view controller，首先判断视图控制器的根视图view是否能处理此事件；如果不能则接着判断该视图控制器能否处理此事件，如果还是不能则继续向上传 递；（对于第二个图视图控制器本身还在另一个视图控制器中，则继续交给父视图控制器的根视图，如果根视图不能处理则交给父视图控制器处理）；一直到 window，如果window还是不能处理此事件则继续交给application处理，如果最后application还是不能处理此事件则将其丢弃 3、在事件的响应中，如果某个控件实现了touches…方法，则这个事件将由该控件来接受，如果调用了[supertouches….];就会将事件顺着响应者链条往上传递，传递给上一个响应者；接着就会调用上一个响应者的touches….方法 如何做到一个事件多个对象处理：因为系统默认做法是把事件上抛给父控件，所以可以通过重写自己的touches方法和父控件的touches方法来达到一个事件多个对象处理的目的。 123456- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; // 1.自己先处理事件...NSLog(@&quot;do somthing...&quot;);// 2.再调用系统的默认做法，再把事件交给上一个响应者处理[super touchesBegan:touches withEvent:event]; &#125; 事件的传递和响应的区别：事件的传递是从上到下（父控件到子控件），事件的响应是从下到上（顺着响应者链条向上传递：子控件到父控件。 转自VV木公子（简书作者）]]></content>
      <categories>
        <category>UI视图</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[UITableView相关]]></title>
    <url>%2F2018%2F09%2F11%2FUITableView%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[前言先来点概念性的东西， 卡顿&amp;掉帧 概念：在规定的16.7ms之内，下一帧VSync信号到来之前，并没有CPU和GPU共同完成下一帧画面的合成，于是就会造成卡顿和掉帧 滑动优化方案 CPU 对象创建、调整、销毁 预排版（布局计算、文本计算） 预渲染（文本等异步绘制，图片编解码等） GPU 纹理渲染 视图混合 离屏渲染 概念：当我们处理图层的属性在被指定为未被预合成之前不能直接在屏幕上显示，就触发了离屏渲染。离屏渲染的概念起源与GPU层面，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作 何时会触发 圆角（当和maskToBounds一起使用时） 图层蒙版 阴影 光栅化 为何要避免 上下文切换，GPU额外的开销 创建新的渲染缓冲区，内存损耗 高级回答：触发离屏渲染会增加GPU的工作量，而增加了GPU的工作量很有可能导致CPU和GPU的工作总耗时超过了16.67ms，有可能导致UI的卡顿和掉帧 UITableView性能优化当获取到 API JSON 数据后，我会把每条 Cell 需要的数据都在后台线程计算并封装为一个布局对象 CellLayout。CellLayout 包含所有文本的 CoreText 排版结果、Cell 内部每个控件的高度、Cell 的整体高度。每个 CellLayout 的内存占用并不多，所以当生成后，可以全部缓存到内存，以供稍后使用。这样，TableView 在请求各个高度函数时，不会消耗任何多余计算量；当把 CellLayout 设置到 Cell 内部时，Cell 内部也不用再计算布局了。 缓存高度对于通常的 TableView 来说，提前在后台计算好布局结果是非常重要的一个性能优化点。为了达到最高性能，你可能需要牺牲一些开发速度，不要用 Autolayout 等技术，少用 UILabel 等文本控件。但如果你对性能的要求并不那么高，可以尝试用 TableView 的预估高度的功能，并把每个 Cell 高度缓存下来。这里有个来自百度知道团队的开源项目可以很方便的帮你实现这一点：FDTemplateLayoutCell。 tableviewcell高度缓存具体实现方式 预渲染微博的头像在某次改版中换成了圆形，所以我也跟进了一下。当头像下载下来后，我会在后台线程将头像预先渲染为圆形并单独保存到一个 ImageCache 中去。 对于 TableView 来说，Cell 内容的离屏渲染会带来较大的 GPU 消耗。在 Twitter Demo 中，我为了图省事儿用到了不少 layer 的圆角属性，你可以在低性能的设备（比如 iPad 3）上快速滑动一下这个列表，能感受到虽然列表并没有较大的卡顿，但是整体的平均帧数降了下来。用 Instument 查看时能够看到 GPU 已经满负荷运转，而 CPU 却比较清闲。为了避免离屏渲染，你应当尽量避免使用 layer 的 border、corner、shadow、mask 等技术，而尽量在后台线程预先绘制好对应内容。 离屏渲染​ 在使用圆角、阴影和遮罩等视图功能的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，所有就需要在屏幕外的上下文中渲染，即离屏渲染。 离屏渲染产生原因离屏渲染之所以会特别消耗性能，是因为要创建一个屏幕外的缓冲区，然后从当屏缓冲区切换到屏幕外的缓冲区，然后再完成渲染；其中，创建缓冲区和切换上下文最消耗性能，而绘制其实不是性能损耗的主要原因。 设置了以下属性时，就会触发离屏绘制： shouldRasterize（光栅化） masks（遮罩） shadows（阴影） edge antialiasing（抗锯齿） group opacity（不透明） 复杂形状设置圆角等 渐变 光栅化光栅化概念:将图转化为一个个栅格组成的图象。 光栅化特点:每个元素对应帧缓冲区中的一像素。 ​ shouldRasterize = YES在其他属性触发离屏渲染的同时,会将光栅化后的内容缓存起来,如果对应的layer及其sublayers没有发生改变,在下一帧的时候可以直接复用。shouldRasterize = YES,这将隐式的创建一个位图,各种阴影遮罩等效果也会保存到位图中并缓存起来,从而减少渲染的频度 当你使用光栅化时,你可以开启“Color Hits Green and Misses Red”来检查该场景下光栅化操作是否是一个好的选择。绿色表示缓存被复用,红色表示缓存在被重复创建。 如果光栅化的层变红得太频繁那么光栅化对优化可能没有多少用处。位图缓存从内存中删除又重新创建得太过频繁,红色表明缓存重建得太迟。可以针对性的选择某个较小而较深的层结构进行光栅化,来尝试减少渲染时间。 我们经常的TableViewCell,因为TableViewCell的重绘是很频繁的(因为Cell的复用),如果Cell的内容不断变化,则Cell需要不断重绘,如果此时设置了cell.layer可光栅化。则会造成大量的离屏渲染,降低图形性能。 有时候我们可以把那些需要屏幕外绘制的图层开启光栅化以作为一个优化方式,前提是这些图层并不会被频繁地重绘。 针对光栅化处理 12345678910//离屏渲染 - 异步绘制 耗电self.layer.drawsAsynchronously = true //栅格化 - 异步绘制之后 ，会生成一张独立的图片 cell 在屏幕上滚动的时候，本质上滚动的是这张图片 //cell 优化，要尽量减少图层的数量，想当于只有一层//停止滚动之后，可以接受监听self.layer.shouldRasterize = true //使用 “栅格化” 必须指定分辨率self.layer.rasterizationScale = UIScreen.main.scale 阴影处理 12// 指定阴影曲线，防止阴影效果带来的离屏渲染 imageView.layer.shadowPath = UIBezierPath(rect: imageView.bounds).cgPath ​ 遮罩masks(遮罩) mask是layer的一个属性. 当透明度改变的时候,这个 mask 就是覆盖上去的那个阴影。该层的layer的alpha决定了多少层背景跟内容通过并显示,完全或者部分不透明的像素允许潜在的内容 通过并显示。 默认是nil,当配置一个遮罩的时候,记得设置遮罩的大小、位置。已确保跟盖图层对齐。如果你想给这个属性赋值,前提是必须没有 superLayer,如果有superLayer,这个行为则是无效的。 shadows(阴影)在项目中,当我们想要设置View的阴影效果时,可以通过shadow*相关方法实现,如: self.layer.shadowOffset = CGSizeMake(4, -2); self.layer.shadowOpacity = 0.5; self.layer.shadowColor = [[UIColor blackColor] colorWithAlphaComponent:0.5].CGColor; shadows可以给视图周边添加阴影,当给一些滑动视图加阴影时,您可能会注意到在动画不是很流畅,有卡顿。这是因为计算阴影需要Core Animation做一个离屏渲染,以View准确的形状确定清楚如何呈现其阴影。 ####屏幕渲染有如下三种 GPU中的屏幕渲染： 1、On-Screen Rendering 意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行 2、Off-Screen Rendering 意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作 3、CPU中的离屏渲染（特殊离屏渲染，即不在GPU中的渲染） 如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染 切圆角优化切圆角是开发app过程中经常会用到的功能，但是使用不同的方式，性能损耗也会不同，下面会介绍3种切圆角的方法；其中，方法三的性能相对最好。 方法一使用cornerRadius进行切圆角，在iOS9之前会产生离屏渲染，比较消耗性能，而之后系统做了优化，则不会产生离屏渲染，但是操作最简单 12iv.layer.cornerRadius = 30;iv.layer.masksToBounds = YES; 方法二利用mask设置圆角，利用的是UIBezierPath和CAShapeLayer来完成 1234CAShapeLayer *mask1 = [[CAShapeLayer alloc] init];mask1.opacity = 0.5;mask1.path = [UIBezierPath bezierPathWithOvalInRect:iv.bounds].CGPath;iv.layer.mask = mask1; 方法三利用CoreGraphics画一个圆形上下文，然后把图片绘制上去，得到一个圆形的图片，达到切圆角的目的。 12345678910111213141516171819- (UIImage *)drawCircleImage:(UIImage*)image&#123; CGFloat side = MIN(image.size.width, image.size.height); UIGraphicsBeginImageContextWithOptions(CGSizeMake(side, side), false, [UIScreen mainScreen].scale); CGContextAddPath(UIGraphicsGetCurrentContext(), [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0, 0, side, side)].CGPath); CGContextClip(UIGraphicsGetCurrentContext()); CGFloat marginX = -(image.size.width - side) * 0.5; CGFloat marginY = -(image.size.height - side) * 0.5; [image drawInRect:CGRectMake(marginX, marginY, image.size.width, image.size.height)]; CGContextDrawPath(UIGraphicsGetCurrentContext(), kCGPathFillStroke); UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return newImage;&#125; 异步绘制当想进一步优化tableview性能时可以考虑异步绘制cell及文本控件等。大神的YYAsyncLayer实现了异步绘制的控件。 UITableView优化总结UITableView的优化主要从三个方面入手： 123提前计算并缓存好高度（布局），因为heightForRowAtIndexPath:是调用最频繁的方法；异步绘制，遇到复杂界面，遇到性能瓶颈时，可能就是突破口；滑动时按需加载，这个在大量图片展示，网络加载的时候很管用！（SDWebImage已经实现异步加载，配合这条性能杠杠的）。 除了上面最主要的三个方面外，还有很多几乎大伙都很熟知的优化点： 1234567正确使用reuseIdentifier来重用Cells尽量使所有的view opaque，包括Cell自身尽量少用或不用透明图层如果Cell内现实的内容来自web，使用异步加载，缓存请求结果减少subviews的数量在heightForRowAtIndexPath:中尽量不使用cellForRowAtIndexPath:，如果你需要用到它，只用一次然后缓存结果尽量少用addView给Cell动态添加View，可以初始化时就添加，然后通过hide来控制是否显示 参考: ibiremeiOS 保持界面流畅的技巧 mo_xiao_moUITableView的优化技巧－异步绘制Cell iOS_小松哥UITableView自动计算cell高度并缓存，再也不用管高度啦]]></content>
      <categories>
        <category>UI视图</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS runtime应用：关联对象]]></title>
    <url>%2F2018%2F01%2F23%2FiOS-runtime%E5%BA%94%E7%94%A8%EF%BC%9A%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[前言给已有类添加方法使用Category就可以了，但如果向分类里添加一个或多个属性的话会报错，使用属性不能正确创建实例及存取方法。 但是我们可以实现runtime的Associated Objects(关联对象)，它可以让对象在运行时关联任何值。 runtime中提供给我们的方法：123456//关联对象void objc_setAssociatedObject(id object,const void *key,id value,objc_AssociationPolicy policy);//获取关联的对象id objc_getAssociatedObject(id object,const void *key);//移除关联的对象void objc_removeAssociatedObjects(id object); 变量说明：1234id object:被关联的对象const void *key:关联的key，要求唯一id value:关联的对象Objc_AssociationPolicy poliy:内存管理策略 Objc_AssociationPolicy policy的enum值有:1234567891011typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123; OBJC_ASSOCIATION_ASSIGN = 0, /**&lt; Specifies a weak reference to the associated object. */ OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. * The association is not made atomically. */ OBJC_ASSOCIATION_COPY_NONATOMIC = 3, /**&lt; Specifies that the associated object is copied. * The association is not made atomically. */ OBJC_ASSOCIATION_RETAIN = 01401, /**&lt; Specifies a strong reference to the associated object. * The association is made atomically. */ OBJC_ASSOCIATION_COPY = 01403 /**&lt; Specifies that the associated object is copied. * The association is made atomically. */&#125;; 不同的objc_AssociationPolicy对应了不同的属性修饰符。 Objc_AssociationPolicy应用:UIButton扩展之动态添加属性.h文件 1234567#import &lt;UIKit/UIKit.h&gt;typedef void (^block)(void);@interface UIButton (Block)@property(nonatomic,assign) NSString *name;@end .m文件 1234567891011121314151617#import &lt;objc/runtime.h&gt;static const char myKey;@implementation UIButton (Block)- (void)setName:(NSString *)name&#123; //关联对象 objc_setAssociatedObject(self, &amp;myKey, name, OBJC_ASSOCIATION_COPY_NONATOMIC);&#125;- (NSString *)name&#123; //获取关联对象 return objc_getAssociatedObject(self, &amp;myKey);&#125;@end Viewcontroller.m 123456789101112131415161718192021222324#import &quot;ViewController.h&quot;#import &quot;UIButton+Block.h&quot;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; [self.view addSubview:btn]; btn.backgroundColor = [UIColor redColor]; btn.frame = CGRectMake(100, 100, 100, 50); btn.name = @&quot;darling&quot;; [btn addTarget:self action:@selector(message:) forControlEvents:UIControlEventTouchUpInside ]; // Do any additional setup after loading the view, typically from a nib.&#125;- (void)message:(UIButton *)btn&#123; NSLog(@&quot;name = %@&quot;,btn.name);&#125; UIButton扩展之动态添加方法.h文件 123456#import &lt;UIKit/UIKit.h&gt;typedef void (^btnBlock)(void);@interface UIButton (Block)- (void)handelWithBlock:(btnBlock)block;@end .m文件 12345678910111213141516#import &quot;UIButton+Block.h&quot;#import &lt;objc/runtime.h&gt;static const char myKey;@implementation UIButton (Block)- (void)handelWithBlock:(block)block&#123; if (block) &#123; objc_setAssociatedObject(self, &amp;myKey, block, OBJC_ASSOCIATION_COPY_NONATOMIC); &#125; [self addTarget:self action:@selector(btnAction) forControlEvents:UIControlEventTouchUpInside];&#125;- (void)btnAction&#123; block block = objc_getAssociatedObject(self, &amp;myKey); block();&#125;@end ViewController.m文件 1234567891011121314151617181920#import &quot;ViewController.h&quot;#import &quot;UIButton+Block.h&quot;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; [self.view addSubview:btn]; btn.backgroundColor = [UIColor redColor]; btn.frame = CGRectMake(100, 100, 100, 50); [btn handelWithBlock:^&#123; NSLog(@&quot;darling&quot;); &#125;]; // Do any additional setup after loading the view, typically from a nib.&#125; 参考文献 objc_setAssociatedObject与Block的简单使用 objc_setAssociatedObject/objc_getAssociatedObject]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS DES总结]]></title>
    <url>%2F2018%2F01%2F15%2FiOS-DES%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[iOS中使用DES加密总结 常见的对称加密有:DES、3DES、RC4、AES等；加密算法都有几个共同的特点：1.秘钥长度；2.加密模式；3.块加密算法里的填充区分；以下是我对做项目时遇到的问题所做的小结 1234567891011ccStatus = CCCrypt(encryptOperation, kCCAlgorithmDES, kCCOptionPKCS7Padding|kCCOptionECBMode, vkey, kCCKeySizeDES, iv, dataIn, dataInLength, (void *)dataOut, dataOutAvailable, &amp;dataOutMoved); 第一个参数encryptOperation：告诉函数加密还是解密 第二个参数kCCAlgorithmDES：使用DES加密 第三个参数 kCCOptionPKCS7Padding|kCCOptionECBMode使用ECB加密模式和PKCS7Padding填充模式，如果使用kCCOptionPKCS7Padding就代表使用CBC加密模式并且使用PKCS7Padding的填充模式。 在DES中加密数据包单位长度是8字节，在8自己的情况下PKCS7Padding等价于PKCS5Padding。 后台大哥给了一个线上加密的地址让我对。 http://tool.chacuo.net/cryptdes 调试了半天原来是我自己的加密模式不对，使用了CBC模式，而后台用的是ECB。 参考资料： http://blog.csdn.net/u010184533/article/details/38975871]]></content>
      <categories>
        <category>加密</category>
      </categories>
  </entry>
</search>
