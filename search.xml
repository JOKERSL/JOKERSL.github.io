<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[XMPP的使用]]></title>
    <url>%2F2018%2F09%2F17%2FXMPP%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[[转自 Qian Chia 工作室]（http://www.cnblogs.com/QianChia/p/6411914.html） iOS - XMPP 的使用本文目录 1、XMPP 2、XMPPFramework 框架简介 3、XMPPFramework 框架使用 4、XMPPFramework 实现简单聊天 5、XMPPFramework 快速登录 6、XMPPFramework 重连以及其他问题 回到顶部 1、XMPP XMPP 是一个基于 Socket 通信的即时通讯的协议，它规范了即时通信在网络上数据的传输格式，比如登录，获取好友列表等等的格式。XMPP 在网络传输的数据是 XML 格式。 开发架构： iOS 框架：XMPPFramework 服务器：Openfire 数据库：MySQL 回到顶部 2、XMPPFramework 框架简介2.1 XMPPFramework 简介 XMPPFramework 是一个 OS X/iOS 平台的开源项目，使用 Objective-C 实现了 XMPP 协议（RFC-3920），同时还提供了用于读写 XML 的工具，大大简化了基于 XMPP 的通信应用的开发。 2.2 XMPPFramework 结构 1、XMPPFramework 的目录结构如下： | 目录 | 说明 || ————– | —————————————- || Authentication | 授权，与授权验证相关，如用户名密码等 || Categories | 分类，XMPP 自己写的一些分类，尤其是 NSXMLElement+XMPP 扩展是必备的 || Core | 核心，这里是 XMPP 的核心文件目录，我们最主要的目光还是要放在这个目录上 || Extensions | 扩展，XMPP 的扩展模块，用于扩展各种协议和各种独立的功能，其下每个子目录都是对应的一个单独的子功能 || Utilities | 工具，都是辅助类，我们开发者不用关心这里 || Vendor | 第三方库，这个目录是 XMPP 所引用的第三方类库，我们也不用关心这里 | 虽然这里有很多个目录，但是我们在开发中基本只关心 Core 和 Extensions 这两个目录下的类。 在 Core 中： | 目录 | 说明 || ———— | ———————— || XMPPElement | 是一个基类，延展出三个子类 || XMPPIQ | 请求，用户登录，用户注册，添加好友等 || XMPPMessage | 消息，用来发各种消息等 || XMPPPresence | 展现，用户上线下线提示等 || XMPPStream | 流，非常常用，大部分类的加载都在写在流的懒加载里 | 在 Extensions 中： | 目录 | 说明 || ————————– | ———– || CoreDataStorage | coreData 存储 || Reconnect | 重新连接 || Roster | 好友管理 || SystemInputActivityMonitor | 系统输入的活动监控 | 在 Vendor 中： | 文件夹 | 说明 || —————- | ——— || CocoaAsyncSocket | 异步 Socket || CocoaLumberjack | ⽇志相关 || KissXML | XML 解析 | 2、XMPPFramework 中常用的类： | 类 | 说明 || —————————————- | ————————————- || XMPPStream | XMPP 基础服务类 || XMPPRoster | 好友列表类 || XMPPUserCoreDataStorageObject | 管理用户的类 || XMPPRosterCoreDataStorage | 好友列表（用户账号）在 core data 中的操作类 || XMPPvCardCoreDataStorage | 好友名片（昵称，签名，性别，年龄等信息）在 core data 中的操作类 || XMPPvCardTemp | 好友名片实体类，从数据库里取出来的都是它 || xmppvCardAvatarModule | 好友头像 || XMPPReconnect | 如果失去连接，自动重连 || XMPPRoom | 提供多用户聊天支持 || XMPPPubSub | 发布订阅 || XMPPMessageArchiving | 其中有数据表 || XMPPMessageArchiving_Message_CoreDataObject | 取出当前信息的类 | 3、XMPPFramework 几个常用到的扩展协议： | 协议 | 协议简介 || ——– | —————————————- || XEP-0006 | 使能与网络上某个 XMPP 实体间的通信 || XEP-0009 | 在两个 XMPP 实体间传输 XML-RPC 编码请求和响应 || XEP-0012 | 最后的活动（判断上线，离开断开） || XEP-0045 | 多人聊天相关协议 || XEP-0054 | 名片格式的标准文档，个人信息设置 || XEP-0060 | 提供通用公共订阅功能 || XEP-0065 | 两个 XMPP 用户之间建立一个带外流，主要用于文件传输，sockets5 字节流 || XEP-0066 | 二进制数据传输（特殊信息的发送） || XEP-0082 | 日期和时间信息的标准化表示 || XEP-0085 | 聊天对话中通知用户状态，聊天状态通知 || XEP-0100 | 表述了 XMPP 客户端与提供传统的 IM 服务的代理网关之间交换的最佳实践 || XEP-0115 | 广播和动态发现客户端、设备、或一般实体能力 || XEP-0136 | 为服务端备份和检索 XMPP 消息定义机制和偏好设置，聊天记录归档 || XEP-0153 | 用于交换用户头像，基于名片的头像 || XEP-0184 | 消息送达回执协议 || XEP-0199 | XMPP ping 协议（用来 ping 服务器和 ping 自己） || XEP-0202 | 用于交换实体间的本地时间信息 || XEP-0203 | 用于延迟发送 || XEP-0224 | 引起另一个用户注意的协议 || XEP-0335 | JSON 容器（可能以后某些信息传输将用 JSON 格式） | XMPP 的扩展协议 Jingle) 使得其支持语音和视频，目前 iOS 尚不支持。 iOS 发送附件（图片，语音，文档…）时比较麻烦，XMPP 框架没有提供发送附件的功能，需要自己实现。 iOS 发送附件实现方法： 1、将获取到的图片／音频文件通过 base64 加密，直接通过 xmpp 的消息体发送过去，然后解码。 2、通过 http 请求的方式将图片／音频文件上传到服务器，然后将图片／音频文件的下载地址通过 xmpp 消息体发送过去，另外一个客户端下载。 音频文件建议转码为 amr，这种格式的音频文件比较小。 2.3 XMPPJID 类 登录需要到账号，而所谓的账号其实就是用户唯一标识符（JID），在 XMPP 中使用 XMPPJID 类来表示。 JID 一般由三部分构成：用户名，域名和资源名，格式为 user@domain/resource，例如：test@example.com/Anthony。对应于 XMPPJID 类中的三个属性 user、domain、resource。 如果没有设置主机名（HOST），则使用 JID 的域名（domain）作为主机名，而端口号是可选的，默认是 5222，一般也没有必要改动它。 2.4 XMPPStream 类 我们要与服务器连接，就必须通过 XMPPStream 类了，它提供了很多的 API 和属性设置，通过 socket 来实现的。Verdor 目录包含了 CocoaAsyncSocket 这个非常有名的 socket 编程库。XMPPStream 类还遵守并实现了 GCDAsyncSocketDelegate 代理，用于客户端与服务器交互。 1@interface XMPPStream : NSObject &lt;GCDAsyncSocketDelegate&gt; 当我们创建 XMPPStream 对象后，我们需要设置代理，才能回调我们的代理方法，这个是支持 multicast delegate，也就是说对于一个 XMPPStream 对象，可以设置多个代理对象，其中协议是XMPPStreamDelegate。 1- (void)addDelegate:(id)delegate delegateQueue:(dispatch_queue_t)delegateQueue; 而当我们不希望某个 XMPPStream 对象继续接收到代理回调时，我们通过这样的方式来移除代理。 12- (void)removeDelegate:(id)delegate delegateQueue:(dispatch_queue_t)delegateQueue;- (void)removeDelegate:(id)delegate; 接下来，我们要设置主机和端口，通过设置这两个属性。 12345// 主机，可选设置，如果没有设置默认会使用 domain@property (readwrite, copy) NSString *hostName;// 端口号，默认为 5222@property (readwrite, assign) UInt16 hostPort; XMPPStream 有 XMPPJID 类对象作为属性，标识用户，因为我们后续很多操作都需要到 myJID。 1@property (readwrite, copy) XMPPJID *myJID; 而管理用户在线状态的就交由 XMPPPresence 类了，它同样被作为 XMPPStream 的属性，组合到 XMPPStream 中，后续很多关于用户的操作是需要到处理用户状态的。 1@property (strong, readonly) XMPPPresence *myPresence; 2.5 XMPPStreamDelegate 这个协议是非常关键的，我们的很多主要操作都集中在这个协议的代理回调上。它分为好几种类型的代理 API，比如授权的、注册的、安全的等。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131@protocol XMPPStreamDelegate@optional// 将要与服务器连接- (void)xmppStreamWillConnect:(XMPPStream *)sender;// 已经与服务器连接，// 当 TCP Socket 已经与远程主机连接上时会回调此方法// 若 App 要求在后台运行，需要设置 XMPPStream&apos;s enableBackgroundingOnSocket 属性- (void)xmppStream:(XMPPStream *)sender socketDidConnect:(GCDAsyncSocket *)socket;// 当 TCP 与服务器建立连接后会回调此方法- (void)xmppStreamDidStartNegotiation:(XMPPStream *)sender;// TLS 传输层协议在将要验证安全设置时会回调// 参数 settings 会被传到 startTLS，此方法可以不实现的// 若服务端使用自签名的证书，需要在 settings 中添加 GCDAsyncSocketManuallyEvaluateTrust = YES- (void)xmppStream:(XMPPStream *)sender willSecureWithSettings:(NSMutableDictionary *)settings;// 上面的方法执行后，下一步就会执行这个代理回调// 用于在 TCP 握手时手动验证是否受信任- (void)xmppStream:(XMPPStream *)sender didReceiveTrust:(SecTrustRef)trust completionHandler:(void (^)(BOOL shouldTrustPeer))completionHandler;// 当 stream 通过了 SSL/TLS 的安全验证时，会回调此代理方法- (void)xmppStreamDidSecure:(XMPPStream *)sender;// 当 XML 流已经完全打开时（也就是与服务器的连接完成时）会回调此代理方法。此时可以安全地与服务器通信了- (void)xmppStreamDidConnect:(XMPPStream *)sender;// 注册新用户成功时的回调- (void)xmppStreamDidRegister:(XMPPStream *)sender;// 注册新用户失败时的回调- (void)xmppStream:(XMPPStream *)sender didNotRegister:(NSXMLElement *)error;// 授权通过时的回调，也就是登录成功的回调- (void)xmppStreamDidAuthenticate:(XMPPStream *)sender;// 授权失败时的回调，也就是登录失败时的回调- (void)xmppStream:(XMPPStream *)sender didNotAuthenticate:(NSXMLElement *)error;// 将要绑定 JID resource 时的回调，这是授权程序的标准部分// 当验证 JID 用户名通过时，下一步就验证 resource。若使用标准绑定处理，return nil 或者不要实现此方法- (id &lt;XMPPCustomBinding&gt;)xmppStreamWillBind:(XMPPStream *)sender;// 如果服务器出现 resouce 冲突而导致不允许 resource 选择时，会回调此代理方法// 返回指定的 resource 或者返回 nil 让服务器自动帮助我们来选择。一般不用实现它- (NSString *)xmppStream:(XMPPStream *)sender alternativeResourceForConflictingResource:(NSString *)conflictingResource;// 将要接收 IQ（消息查询）时的回调- (XMPPIQ *)xmppStream:(XMPPStream *)sender willReceiveIQ:(XMPPIQ *)iq;// 将要接收到消息时的回调- (XMPPMessage *)xmppStream:(XMPPStream *)sender willReceiveMessage:(XMPPMessage *)message;// 将要接收到用户在线状态时的回调- (XMPPPresence *)xmppStream:(XMPPStream *)sender willReceivePresence:(XMPPPresence *)presence;// 通过实现此代理方法，可以知道被过滤的原因，有一定的帮助// 当 xmppStream:willReceiveX: (也就是前面这三个 API 回调后)，过滤了 stanza，会回调此代理方法- (void)xmppStreamDidFilterStanza:(XMPPStream *)sender;// 在接收了 IQ（消息查询后）会回调此代理方法- (BOOL)xmppStream:(XMPPStream *)sender didReceiveIQ:(XMPPIQ *)iq;// 在接收了消息后会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message;// 在接收了用户在线状态消息后会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didReceivePresence:(XMPPPresence *)presence;// 在接收 IQ/messag、presence 出错时，会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didReceiveError:(NSXMLElement *)error;// 将要发送 IQ（消息查询时）时会回调此代理方法- (XMPPIQ *)xmppStream:(XMPPStream *)sender willSendIQ:(XMPPIQ *)iq;// 在将要发送消息时，会回调此代理方法- (XMPPMessage *)xmppStream:(XMPPStream *)sender willSendMessage:(XMPPMessage *)message;// 在将要发送用户在线状态信息时，会回调此方法- (XMPPPresence *)xmppStream:(XMPPStream *)sender willSendPresence:(XMPPPresence *)presence;// 在发送 IQ（消息查询）成功后会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didSendIQ:(XMPPIQ *)iq;// 在发送消息成功后，会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didSendMessage:(XMPPMessage *)message;// 在发送用户在线状态信息成功后，会回调此方法- (void)xmppStream:(XMPPStream *)sender didSendPresence:(XMPPPresence *)presence;// 在发送 IQ（消息查询）失败后会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didFailToSendIQ:(XMPPIQ *)iq error:(NSError *)error;// 在发送消息失败后，会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didFailToSendMessage:(XMPPMessage *)message error:(NSError *)error;// 在发送用户在线状态失败信息后，会回调此方法- (void)xmppStream:(XMPPStream *)sender didFailToSendPresence:(XMPPPresence *)presence error:(NSError *)error;// 当修改了 JID 信息时，会回调此代理方法- (void)xmppStreamDidChangeMyJID:(XMPPStream *)xmppStream;// 当 Stream 被告知与服务器断开连接时会回调此代理方法- (void)xmppStreamWasToldToDisconnect:(XMPPStream *)sender;// 当发送了 &lt;/stream:stream&gt; 节点时，会回调此代理方法- (void)xmppStreamDidSendClosingStreamStanza:(XMPPStream *)sender;// 连接超时时会回调此代理方法- (void)xmppStreamConnectDidTimeout:(XMPPStream *)sender;// 当与服务器断开连接后，会回调此代理方法- (void)xmppStreamDidDisconnect:(XMPPStream *)sender withError:(NSError *)error;// P2P 类型相关的- (void)xmppStream:(XMPPStream *)sender didReceiveP2PFeatures:(NSXMLElement *)streamFeatures;- (void)xmppStream:(XMPPStream *)sender willSendP2PFeatures:(NSXMLElement *)streamFeatures;- (void)xmppStream:(XMPPStream *)sender didRegisterModule:(id)module;- (void)xmppStream:(XMPPStream *)sender willUnregisterModule:(id)module;// 当发送非 XMPP 元素节点时，会回调此代理方法// 也就是说，如果发送的 element 不是 &lt;iq&gt;, &lt;message&gt; 或者 &lt;presence&gt;，那么就会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didSendCustomElement:(NSXMLElement *)element;// 当接收到非 XMPP 元素节点时，会回调此代理方法// 也就是说，如果接收的element不是 &lt;iq&gt;, &lt;message&gt; 或者 &lt;presence&gt;，那么就会回调此代理方法- (void)xmppStream:(XMPPStream *)sender didReceiveCustomElement:(NSXMLElement *)element; 2.6 XMPPIQ 类 消息查询（IQ）就是通过此类来处理的了。XMPP 给我们提供了 IQ 方便创建的类，用于快速生成 XML 数据。 123456789101112131415161718192021222324252627282930313233343536373839@interface XMPPIQ : XMPPElement// 生成 IQ+ (XMPPIQ *)iq;+ (XMPPIQ *)iqWithType:(NSString *)type;+ (XMPPIQ *)iqWithType:(NSString *)type to:(XMPPJID *)jid;+ (XMPPIQ *)iqWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid;+ (XMPPIQ *)iqWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid child:(NSXMLElement *)childElement;+ (XMPPIQ *)iqWithType:(NSString *)type elementID:(NSString *)eid;+ (XMPPIQ *)iqWithType:(NSString *)type elementID:(NSString *)eid child:(NSXMLElement *)childElement;+ (XMPPIQ *)iqWithType:(NSString *)type child:(NSXMLElement *)childElement;- (id)init;- (id)initWithType:(NSString *)type;- (id)initWithType:(NSString *)type to:(XMPPJID *)jid;- (id)initWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid;- (id)initWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid child:(NSXMLElement *)childElement;- (id)initWithType:(NSString *)type elementID:(NSString *)eid;- (id)initWithType:(NSString *)type elementID:(NSString *)eid child:(NSXMLElement *)childElement;- (id)initWithType:(NSString *)type child:(NSXMLElement *)childElement;// IQ 类型- (NSString *)type;// 判断 type 类型- (BOOL)isGetIQ;- (BOOL)isSetIQ;- (BOOL)isResultIQ;- (BOOL)isErrorIQ;// 当 type 为 get 或者 set 时，这个 API 是很有用的，用于指定是否要求有响应- (BOOL)requiresResponse;- (NSXMLElement *)childElement;- (NSXMLElement *)childErrorElement;@end IQ 是一种请求／响应机制，从一个实体发送请求，另外一个实体接受请求并进行响应。例如，Client 在 stream 的上下文中插入一个元素，向 Server 请求得到自己的好友列表，Server 返回一个，里面是请求的结果。 &lt;type&gt;&lt;/type&gt; 有以下类别（可选设置如：&lt;type&gt;get&lt;/type&gt;） | type | 说明 || —— | —————————— || get | 获取当前域值。类似于 http get 方法 || set | 设置或替换 get 查询的值。类似于 http put 方法 || result | 说明成功的响应了先前的查询。类似于 http 状态码 200 || error | 查询和响应中出现的错误 | 下面是一个 IQ 例子： 123456&lt;iqfrom=&quot;huangyibiao@welcome.com/ios&quot; id=&quot;xxxxxxx&quot; to=&quot;biaoge@welcome.com/ios&quot; type=&quot;get&quot;&gt; &lt;queryxmlns=&quot;jabber:iq:roster&quot;/&gt; &lt;/iq&gt; 2.7 XMPPPresence 类 这个类代表节点，我们通过此类提供的方法来生成 XML 数据。presence 它代表用户在线状态。 123456789101112131415161718192021222324252627@interface XMPPPresence : XMPPElement// Converts an NSXMLElement to an XMPPPresence element in place (no memory allocations or copying)+ (XMPPPresence *)presenceFromElement:(NSXMLElement *)element;+ (XMPPPresence *)presence;+ (XMPPPresence *)presenceWithType:(NSString *)type;// type：用户在线状态，to：接收方的 JID+ (XMPPPresence *)presenceWithType:(NSString *)type to:(XMPPJID *)to;- (id)init;- (id)initWithType:(NSString *)type;- (id)initWithType:(NSString *)type to:(XMPPJID *)to;- (NSString *)type;- (NSString *)show;- (NSString *)status;- (int)priority;- (int)intShow;- (BOOL)isErrorPresence;@end presence 用来表明用户的状态，如：online、offline、away、dnd (请勿打扰) 等。当改变自己的状态时，就会在 stream 的上下文中插入一个 Presence 元素，来表明自身的状态。要想接受 presence 消息，必须经过一个叫做 presence subscription 的授权过程。 &lt;type&gt;&lt;/type&gt; 有以下类别（可选设置如：&lt;type&gt;subscribe&lt;/type&gt;）： | type | 说明 || ————– | —————– || available | 上线 || unavailable | 下线 || away | 离开 || do not disturb | 忙碌 || subscribe | 订阅其他用户的状态 || probe | 请求获取其他用户的状态 || unavailable | 不可用，离线（offline）状态 | &lt;show&gt;&lt;/show&gt; 节点有以下类别，如 &lt;show&gt;dnd&lt;/show&gt; ： | show | 说明 || —- | —————– || chat | 聊天中 || away | 暂时离开 || xa | eXtend Away，长时间离开 || dnd | 勿打扰 | &lt;status&gt;&lt;/status&gt; 节点 这个节点表示状态信息，内容比较自由，几乎可以是所有类型的内容。常用来表示用户当前心情，活动，听的歌曲，看的视频，所在的聊天室，访问的网页，玩的游戏等等。 &lt;priority&gt;&lt;/priority&gt; 节点 范围 -128~127。高优先级的 resource 能接受发送到 bare JID 的消息，低优先级的 resource 不能。优先级为负数的 resource 不能收到发送到 bare JID 的消息。 发送一个用户在线状态的例子： 1234&lt;presencefrom=&quot;alice@wonderland.lit/pda&quot;&gt; &lt;show&gt;dnd&lt;/show&gt; &lt;status&gt;浏览器搜索&lt;/status&gt; &lt;/presence&gt; 2.8 XMPPMessage 类 XMPPMessage 是 XMPP 框架给我们提供的，方便用于生成 XML 消息的数据。 123456789101112131415161718192021222324252627282930313233343536373839404142@interface XMPPMessage : XMPPElement// Converts an NSXMLElement to an XMPPMessage element in place (no memory allocations or copying)+ (XMPPMessage *)messageFromElement:(NSXMLElement *)element;+ (XMPPMessage *)message;+ (XMPPMessage *)messageWithType:(NSString *)type;+ (XMPPMessage *)messageWithType:(NSString *)type to:(XMPPJID *)to;+ (XMPPMessage *)messageWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid;+ (XMPPMessage *)messageWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid child:(NSXMLElement *)childElement;+ (XMPPMessage *)messageWithType:(NSString *)type elementID:(NSString *)eid;+ (XMPPMessage *)messageWithType:(NSString *)type elementID:(NSString *)eid child:(NSXMLElement *)childElement;+ (XMPPMessage *)messageWithType:(NSString *)type child:(NSXMLElement *)childElement;- (id)init;- (id)initWithType:(NSString *)type;- (id)initWithType:(NSString *)type to:(XMPPJID *)to;- (id)initWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid;- (id)initWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid child:(NSXMLElement *)childElement;- (id)initWithType:(NSString *)type elementID:(NSString *)eid;- (id)initWithType:(NSString *)type elementID:(NSString *)eid child:(NSXMLElement *)childElement;- (id)initWithType:(NSString *)type child:(NSXMLElement *)childElement;- (NSString *)type;- (NSString *)subject;- (NSString *)body;- (NSString *)bodyForLanguage:(NSString *)language;- (NSString *)thread;- (void)addSubject:(NSString *)subject;- (void)addBody:(NSString *)body;- (void)addBody:(NSString *)body withLanguage:(NSString *)language;- (void)addThread:(NSString *)thread;- (BOOL)isChatMessage;- (BOOL)isChatMessageWithBody;- (BOOL)isErrorMessage;- (BOOL)isMessageWithBody;- (NSError *)errorMessage;@end message 是一种基本 推送 消息方法，它不要求响应。主要用于 IM、groupChat、alert 和 notification 之类的应用中。 &lt;type&gt;&lt;/type&gt; 有以下类别（可选设置如：&lt;type&gt;chat&lt;/type&gt;）： | type | 说明 || ——— | ————————————– || normal | 类似于 email，主要特点是不要求响应 || chat | 类似于 qq 里的好友即时聊天，主要特点是实时通讯 || groupchat | 类似于聊天室里的群聊 || headline | 用于发送 alert 和 notification || error | 如果发送 message 出错，发现错误的实体会用这个类别来通知发送者出错了 | &lt;body&gt;&lt;/body&gt; 节点 所要发送的内容就放在 body 节点下 消息节点的例子： 123&lt;messageto=&quot;lily@jabber.org/contact&quot; type=&quot;chat&quot;&gt; &lt;body&gt;您好？&lt;/body&gt;&lt;/message&gt; 回到顶部 3、XMPPFramework 框架使用3.1 CocoaPods 导入框架 1、通过 CocoaPods 导入第三方框架 XMPPFramework。 在 Podfile 文件中加入如下代码，在终端中，使用命令 pod install 下载添加 XMPPFramework 框架。 12345678platform :ios, &apos;8.0&apos;target &apos;XMPPDemo&apos; do use_frameworks! pod &apos;XMPPFramework&apos;, &apos;~&gt; 3.7.0&apos;end 2、在需要使用 XMPPFramework 的文件中导入以下头文件。 1#import &lt;XMPPFramework/XMPPFramework.h&gt; 3.2 导入框架过程中问题解决 1、用 Cocoapods 集成 XMPPFramework 遇 Module ‘KissXML’ not found 等问题解决方法。 一般来说，通过 Coacopods 集成集成第三方框架，不会再有依赖库方面的问题，所以需要检查导入方式是否正确，最终找到原因，仔细看 githup 上导入说明 123456InstallThe minimum deployment target is iOS 8.0 / macOS 10.8.The easiest way to install XMPPFramework is using CocoaPods. Remember to add to the top of your Podfile the use_frameworks! line (even if you are not using swift): 因此，Podfile 里必须写入这一句 1use_frameworks! 2、Xcode8 之后 XMPP 重定义 Redefinition of module ‘dnssd’ 问题解决方法。 在升级 Xcode 到 8 之后，原来的关于 XMPP 的项目运行报错，错误信息为： Redefinition of module ‘dnssd’。系统和XMPP框架同时用到了 ‘dnssd’，大概就是错误的原因。 解决方案： 1234567891011# The version pushed to CocoaPods is very out of date, use master branch for now pod &apos;XMPPFramework&apos;, :git =&gt; &quot;https://github.com/robbiehanson/XMPPFramework.git&quot;, :branch =&gt; &apos;master&apos;大概意思是需要更新 XMPP 框架，需要把 Podfile 文件中的 pod &apos;XMPPFramework&apos;, &apos;~&gt; 3.6.6&apos; 用 pod &apos;XMPPFramework&apos;, :git =&gt; &quot;https://github.com/robbiehanson/XMPPFramework.git&quot;, :branch =&gt; &apos;master&apos;来替换或者直接改成 pod &apos;XMPPFramework&apos;, &apos;~&gt; 3.7.0&apos; 3、在 pod update 的过程中有的童鞋会遇到下面这样的错误。 这个是因为更新的 XMPP 框架中支持的最低版本为 iOS 8.0 / macOS 10.8。The minimum deployment target is iOS 8.0 / macOS 10.8. 把 Podfile 文件中 1platform：ios, &apos;7.0&apos; 的 7.0 改为 8.0 或以上。 4、pod 更新完成了，出现下面这样的错误。 到报错的工程里面搜一下 1Enable Strict Checking of objc_msgSend Calls 改成相反的值就行了，别改没有报错的工程。 回到顶部 4、XMPPFramework 实现简单聊天 聊天实现的原理就是，一个客户端通过 XMPP 协议把信息传给服务器，服务器再发消息发给另一个客户端。 4.1 用户注册 初始化 12345678910111213141516171819202122232425/// 包含头文件#import &lt;XMPPFramework/XMPPFramework.h&gt;/// 遵守协议&lt;XMPPStreamDelegate&gt;/// 定义 XMPP 服务器相关信息#define HOST_DOMAIN @&quot;jhq0228-macbookair.local&quot;#define HOST_NAME @&quot;jhq0228-macbookair.local&quot;#define HOST_PORT 5222/// 注册的账号@property (nonatomic, copy) NSString *registerUserName;/// 注册的密码@property (nonatomic, copy) NSString *registerPassWord;/// XMPP 流@property (nonatomic, strong) XMPPStream *stream;/// 初始化self.stream = [[XMPPStream alloc] init];self.stream.hostName = HOST_NAME;self.stream.hostPort = HOST_PORT;[self.stream addDelegate:self delegateQueue:dispatch_get_main_queue()]; 与服务器建立链接 123456789101112131415161718192021222324/// 与服务器建立链接[self connectToSercerWithUserName:self.registerUserName resource:nil];#pragma mark 与服务器连接通信 /// 与服务器建立链接，自定义方法 - (void)connectToSercerWithUserName:(NSString *)userName resource:(NSString *)resource &#123; if ([self.stream isConnected]) &#123; [self disconnectWithServer]; &#125; // jid self.stream.myJID = [XMPPJID jidWithUser:userName domain:HOST_DOMAIN resource:resource]; NSError *error = nil; // 进行链接 [self.stream connectWithTimeout:30.0 error:&amp;error]; if (error != nil) &#123; NSLog(@&quot;连接出现问题&quot;); &#125; &#125; 进行注册 1234567891011121314151617181920212223242526272829303132#pragma mark XMPPStreamDelegate 协议方法 /// 与服务器连接成功 - (void)xmppStreamDidConnect:(XMPPStream *)sender &#123; NSError *error1 = nil; // 进行注册 [self.stream registerWithPassword:self.registerPassWord error:&amp;error1]; if (error1 != nil) &#123; NSLog(@&quot;注册出现问题&quot;); &#125; &#125; /// 与服务器连接超时 - (void)xmppStreamConnectDidTimeout:(XMPPStream *)sender &#123; NSLog(@&quot;连接服务器超时，请检查网络链接后再试！&quot;); &#125; /// 注册成功 - (void)xmppStreamDidRegister:(XMPPStream *)sender &#123; NSLog(@&quot;注册成功&quot;); &#125; /// 注册失败 - (void)xmppStream:(XMPPStream *)sender didNotRegister:(DDXMLElement *)error &#123; NSLog(@&quot;注册失败&quot;); &#125; 4.2 用户登录、注销 初始化 12345678910111213141516171819202122232425/// 包含头文件#import &lt;XMPPFramework/XMPPFramework.h&gt;/// 遵守协议&lt;XMPPStreamDelegate&gt;/// 定义 XMPP 服务器相关信息#define HOST_DOMAIN @&quot;jhq0228-macbookair.local&quot;#define HOST_NAME @&quot;jhq0228-macbookair.local&quot;#define HOST_PORT 5222/// 登录的账号@property (nonatomic, copy) NSString *loginUserName;/// 登录的密码@property (nonatomic, copy) NSString *loginPassWord;/// XMPP 流@property (nonatomic, strong) XMPPStream *stream;/// 初始化self.stream = [[XMPPStream alloc] init];self.stream.hostName = HOST_NAME;self.stream.hostPort = HOST_PORT;[self.stream addDelegate:self delegateQueue:dispatch_get_main_queue()]; 与服务器建立链接 123456789101112131415161718192021222324/// 与服务器建立链接[self connectToSercerWithUserName:self.loginUserName resource:nil];#pragma mark 与服务器连接通信 /// 与服务器建立链接，自定义方法 - (void)connectToSercerWithUserName:(NSString *)userName resource:(NSString *)resource &#123; if ([self.stream isConnected]) &#123; [self disconnectWithServer]; &#125; // jid self.stream.myJID = [XMPPJID jidWithUser:userName domain:HOST_DOMAIN resource:resource]; NSError *error = nil; // 进行连接 [self.stream connectWithTimeout:30.0 error:&amp;error]; if (error != nil) &#123; NSLog(@&quot;连接出现问题&quot;); &#125; &#125; 进行登录认证 123456789101112131415161718192021222324252627282930313233343536#pragma mark XMPPStreamDelegate 协议方法 /// 与服务器连接成功 - (void)xmppStreamDidConnect:(XMPPStream *)sender &#123; NSError *error = nil; // 进行登录认证 [self.stream authenticateWithPassword:self.loginPassWord error:&amp;error]; if (error != nil) &#123; NSLog(@&quot;登录认证出现问题&quot;); &#125; &#125; /// 与服务器连接超时 - (void)xmppStreamConnectDidTimeout:(XMPPStream *)sender &#123; NSLog(@&quot;连接服务器超时，请检查网络链接后再试！&quot;); &#125; /// 登录成功 - (void)xmppStreamDidAuthenticate:(XMPPStream *)sender &#123; NSLog(@&quot;登录成功&quot;); // 设置用户在线状态，如果没有添加，别人给你发的消息服务器默认为离线状态，是不会给你发送的 XMPPPresence *presence = [XMPPPresence presenceWithType:@&quot;available&quot;]; [self.stream sendElement:presence]; &#125; /// 登录失败 - (void)xmppStream:(XMPPStream *)sender didNotAuthenticate:(DDXMLElement *)error &#123; NSLog(@&quot;登录失败&quot;); &#125; 与服务器断开链接，用户注销 1234567891011121314151617181920#pragma mark 与服务器连接通信 /// 与服务器断开链接，用户注销，自定义方法 - (void)disconnectWithServer &#123; // 断开链接 [self.stream disconnect]; &#125;#pragma mark XMPPStreamDelegate 协议方法 /// 注销成功 - (void)xmppStreamDidDisconnect:(XMPPStream *)sender withError:(NSError *)error &#123; NSLog(@&quot;注销成功&quot;); // 设置用户下线状态 XMPPPresence *presene = [XMPPPresence presenceWithType:@&quot;unavailable&quot;]; [self.stream sendElement:presene]; &#125; 用户登录信息本地化存储 添加第三方框架 SAMKeychain。 123456789101112131415161718192021222324252627282930313233343536373839404142/// 包含头文件#import &lt;SAMKeychain/SAMKeychain.h&gt;/// 用户名和密码@property (nonatomic, copy) NSString *userName;@property (nonatomic, copy) NSString *userPasswd;/// 是否记住密码@property (nonatomic, assign, getter=isSavePasswd) BOOL savePasswd;/// 保存用户登录信息- (void)saveUserLoginInfo &#123; NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults]; [userDefaults setObject:self.userName forKey:@&quot;userNameKey&quot;]; [userDefaults setBool:self.isSavePasswd forKey:@&quot;isSavePwdKey&quot;]; [userDefaults synchronize]; if (self.isSavePasswd) &#123; [SAMKeychain setPassword:self.userPasswd forService:[NSBundle mainBundle].bundleIdentifier account:self.userName]; NSLog(@&quot;保存用户登录信息&quot;); &#125; else &#123; self.userPasswd = nil; [SAMKeychain deletePasswordForService:[NSBundle mainBundle].bundleIdentifier account:self.userName]; NSLog(@&quot;不保存用户登录信息&quot;); &#125;&#125;/// 读取用户登录信息- (void)loadUserLoginInfo &#123; NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults]; self.userName = [userDefaults objectForKey:@&quot;userNameKey&quot;]; self.savePasswd = [userDefaults boolForKey:@&quot;isSavePwdKey&quot;]; self.userPasswd = [SAMKeychain passwordForService:[NSBundle mainBundle].bundleIdentifier account:self.userName];&#125; 4.3 好友管理 初始化 1234567891011121314151617/// 遵守协议&lt;XMPPStreamDelegate, XMPPRosterDelegate, XMPPRosterMemoryStorageDelegate&gt;/// 好友列表@property (nonatomic, strong) XMPPRoster *roster;/// 本地好友存储器@property (nonatomic, strong) XMPPRosterMemoryStorage *rosterMemoryStorage;// 添加好友模块self.rosterMemoryStorage = [[XMPPRosterMemoryStorage alloc] init];self.roster = [[XMPPRoster alloc] initWithRosterStorage:self.rosterMemoryStorage dispatchQueue:dispatch_get_global_queue(0, 0)];[self.roster activate:self.stream]; // 激活[self.roster addDelegate:self delegateQueue:dispatch_get_main_queue()]; // 设置代理[self.roster setAutoFetchRoster:YES]; // 设置好友同步策略，XMPP 一旦连接成功，自动同步好友到本地[self.roster setAutoAcceptKnownPresenceSubscriptionRequests:NO]; // 关掉自动接收好友请求，默认开启自动同意 获取好友列表 12345678910111213141516171819202122232425262728293031// 手动同步好友列表到本地好友存储器[self.roster fetchRoster];// 获取好友列表，从本地好友存储器中读取好友信息NSArray *users = self.rosterMemoryStorage.unsortedUsers;// 获取好友账号名称NSString *userName = [user[0] jid].user;// 获取好友昵称NSString *userName = [users[0] nickname];// 获取好友在线状态BOOL userStatus = [user[0] isOnline];#pragma mark XMPPRosterDelegate 协议方法 /// 开始同步好友列表到本地 - (void)xmppRosterDidBeginPopulating:(XMPPRoster *)sender withVersion:(NSString *)version &#123; &#125; /// 同步到一个好友节点到本地 - (void)xmppRoster:(XMPPRoster *)sender didReceiveRosterItem:(NSXMLElement *)item &#123; &#125; /// 同步好友列表到本地完成 - (void)xmppRosterDidEndPopulating:(XMPPRoster *)sender &#123; &#125; 刷新好友列表 1234567#pragma mark - XMPPRosterMemoryStorageDelegate 协议方法 /// 本地好友存储器发生改变 - (void)xmppRosterDidChange:(XMPPRosterMemoryStorage *)sender &#123; // 如果设置了自动同步，当服务器的好友列表发生改变时，会自动同步存入本地好友存储器 &#125; 刷新好友状态 12345678910111213#pragma mark XMPPStreamDelegate 协议方法 /// 好友状态改变 - (void)xmppStream:(XMPPStream *)sender didReceivePresence:(XMPPPresence *)presence &#123; // 收到对方取消定阅我的消息，对方删除我、对方状态改变 if ([presence.type isEqualToString:@&quot;unsubscribe&quot;]) &#123; // 从我的本地好友存储器中将对方移除 [self.roster removeUser:presence.from]; &#125; &#125; 添加好友 123456789101112131415161718/// 添加好友，自定义方法- (void)addFriendWithUserName:(NSString *)userName remarkName:(NSString *)remarkName &#123; NSString *jidString = userName; // 判断有没有域名，如果没有域名，自己添加形成完整的 jid NSString *domainString = [NSString stringWithFormat:@&quot;@%@&quot;, HOST_DOMAIN]; if (![jidString containsString:domainString]) &#123; jidString = [jidString stringByAppendingString:domainString]; &#125; XMPPJID *friendJID = [XMPPJID jidWithString:jidString]; // 添加好友，remarkName 为备注名称 [self.roster addUser:friendJID withNickname:remarkName]; // [self.roster subscribePresenceToUser:friendJID];&#125; 收到添加好友申请 12345678910111213#pragma mark XMPPRosterDelegate 协议方法 /// 收到添加好友请求 - (void)xmppRoster:(XMPPRoster *)sender didReceivePresenceSubscriptionRequest:(XMPPPresence *)presence &#123; NSString *name = [NSString stringWithFormat:@&quot;添加 %@ 为好友？&quot;, presence.from.user]; // 同意并添加对方为好友，YES 存入本地好友存储器 [self.roster acceptPresenceSubscriptionRequestFrom:presence.from andAddToRoster:YES]; // 拒绝添加对方为好友 [self.roster rejectPresenceSubscriptionRequestFrom:presence.from]; &#125; 删除好友 12345678910111213141516/// 删除好友，自定义方法- (void)removeFriendWithUserName:(NSString *)userName &#123; NSString *jidString = userName; // 判断有没有域名，如果没有域名，自己添加形成完整的 jid NSString *domainString = [NSString stringWithFormat:@&quot;@%@&quot;, HOST_DOMAIN]; if (![jidString containsString:domainString]) &#123; jidString = [jidString stringByAppendingString:domainString]; &#125; XMPPJID *friendJID = [XMPPJID jidWithString:jidString]; // 删除好友 [self.roster removeUser:friendJID];&#125; 4.4 文本消息管理 初始化 12345/// 遵守协议&lt;XMPPStreamDelegate&gt;/// 定义 XMPP 服务器相关信息#define HOST_DOMAIN @&quot;jhq0228-macbookair.local&quot; 发送文本消息 1234567891011121314151617181920212223242526272829/// 发送文本消息，自定义方法- (void)sendMessage:(NSString *)message toUser:(NSString *)userName &#123; // 消息结构 /* &lt;message type=&quot;chat&quot; to=&quot;xiaoming@example.com&quot;&gt; &lt;body&gt;Hello World&lt;/body&gt; &lt;/message&gt; */ NSString *jidString = userName; // 设置消息接收者 NSString *domainString = [NSString stringWithFormat:@&quot;@%@&quot;, HOST_DOMAIN]; if (![jidString containsString:domainString]) &#123; jidString = [jidString stringByAppendingString:domainString]; &#125; // 构建消息 NSXMLElement *msg = [NSXMLElement elementWithName:@&quot;message&quot;]; [msg addAttributeWithName:@&quot;type&quot; stringValue:@&quot;chat&quot;]; [msg addAttributeWithName:@&quot;to&quot; stringValue:jidString]; NSXMLElement *body = [NSXMLElement elementWithName:@&quot;body&quot;]; [body setStringValue:message]; // 设置文本消息内容 [msg addChild:body]; // 发送 [self.stream sendElement:msg];&#125; 接收文本消息 1234567#pragma mark XMPPStreamDelegate 协议方法 /// 接收到消息 - (void)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123; NSString *msg = [[message elementForName:@&quot;body&quot;] stringValue]; &#125; 消息回执 这个是 XEP－0184 协议的内容。 发送消息时附加回执请求 123456789101112131415161718192021222324252627282930// 消息结构/* &lt;message from=&quot;northumberland@shakespeare.lit/westminster&quot; id=&quot;richars2-4.1.247&quot; to=&quot;kingrichard@royalty.england.lit/throne&quot;&gt; &lt;body&gt;Hello World&lt;/body&gt; &lt;request xmlns=&quot;urn:xmpp:receipts&quot;/&gt; &lt;/message&gt; */NSString *jidString = userName; // 设置消息接收者NSString *domainString = [NSString stringWithFormat:@&quot;@%@&quot;, HOST_DOMAIN];if (![jidString containsString:domainString]) &#123; jidString = [jidString stringByAppendingString:domainString];&#125;// 构建消息NSString *siID = [XMPPStream generateUUID];XMPPJID *jid = [XMPPJID jidWithString:jidString];XMPPMessage *msg = [XMPPMessage messageWithType:@&quot;chat&quot; to:jid elementID:siID];NSXMLElement *receipt = [NSXMLElement elementWithName:@&quot;request&quot; xmlns:@&quot;urn:xmpp:receipts&quot;];[msg addChild:receipt]; // 设置消息回执[msg addBody:message]; // 设置消息内容// 发送[self.stream sendElement:msg]; 收到回执请求的消息，发送回执 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/// 接收到消息，XMPPStreamDelegate 协议方法- (void)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123; // 消息结构 /* &lt;message from=&quot;kingrichard@royalty.england.lit/throne&quot; id=&quot;bi29sg183b4v&quot; to=&quot;northumberland@shakespeare.lit/westminster&quot;&gt; &lt;received xmlns=&quot;urn:xmpp:receipts&quot; id=&quot;richars2-4.1.247&quot;&gt; &lt;/message&gt; */ // 回执判断 NSXMLElement *request = [message elementForName:@&quot;request&quot;]; if (request) &#123; // 消息回执 if ([request.xmlns isEqualToString:@&quot;urn:xmpp:receipts&quot;]) &#123; // 组装消息回执 XMPPMessage *msg = [XMPPMessage messageWithType:[message attributeStringValueForName:@&quot;type&quot;] to:message.from elementID:[message attributeStringValueForName:@&quot;id&quot;]]; NSXMLElement *recieved = [NSXMLElement elementWithName:@&quot;received&quot; xmlns:@&quot;urn:xmpp:receipts&quot;]; [msg addChild:recieved]; // 发送回执 [self.stream sendElement:msg]; &#125; &#125; else &#123; NSXMLElement *received = [message elementForName:@&quot;received&quot;]; if (received) &#123; // 消息回执 if ([received.xmlns isEqualToString:@&quot;urn:xmpp:receipts&quot;]) &#123; // 发送成功 NSLog(@&quot;message send success!&quot;); &#125; &#125; &#125; // 消息处理 // ...&#125; 4.5 图片消息管理 图片和语音文件发送的基本思路： 先将图片/语音转化成二进制文件，然后将二进制文件进行 base64 编码，编码成字符串。在即将发送的 message 内添加一个子节点，节点的 stringValue（节点的值）设置这个编码后的字符串。 然后消息发出后取出消息文件的时候，通过 messageType 先判断是不是图片/语音信息，如果是图片/语音信息先通过自己之前设置的节点名称，把这个子节点的 stringValue 取出来，应该是一个 base64 之后的字符串。 选择图片 12345678910111213141516171819/// 遵守协议&lt;UIImagePickerControllerDelegate, UINavigationControllerDelegate&gt;UIImagePickerController *picker = [[UIImagePickerController alloc]init];picker.delegate = self;[self presentViewController:picker animated:YES completion:nil];#pragma mark - UIImagePickerControllerDelegate 代理方法 - (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info &#123; UIImage *image = info[UIImagePickerControllerOriginalImage]; NSData *imageData = UIImagePNGRepresentation(image); // 发送图片消息，自定义方法 [[XMPPManager defaultManager] sendMessage:imageData msgType:@&quot;image&quot; toUser:self.userName]; [self dismissViewControllerAnimated:YES completion:nil]; &#125; 发送图片消息 msgType 自定义消息类型，image：图片消息，audio：音频消息 1234567891011121314151617181920212223242526272829// 发送图片消息[[XMPPManager defaultManager] sendMessage:imageData msgType:@&quot;image&quot; toUser:self.userName];/// 发送图片/音频消息，自定义方法- (void)sendMessage:(NSData *)msgData msgType:(NSString *)type toUser:(NSString *)userName &#123; NSString *jidString = userName; // 设置消息接收者 NSString *domainString = [NSString stringWithFormat:@&quot;@%@&quot;, HOST_DOMAIN]; if (![jidString containsString:domainString]) &#123; jidString = [jidString stringByAppendingString:domainString]; &#125; XMPPJID *jid = [XMPPJID jidWithString:jidString]; XMPPMessage *msg = [XMPPMessage messageWithType:@&quot;chat&quot; to:jid]; [msg addBody:type]; // 转换成 base64 的编码 NSString *base64str = [msgData base64EncodedStringWithOptions:0]; // 设置节点内容 XMPPElement *attachment = [XMPPElement elementWithName:@&quot;attachment&quot; stringValue:base64str]; // 包含子节点 [msg addChild:attachment]; // 发送消息 [self.stream sendElement:msg];&#125; 接收图片消息 1234567891011121314151617#pragma mark XMPPStreamDelegate 协议方法 /// 接收到消息 - (void)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123; if ([message.body isEqualToString:@&quot;image&quot;]) &#123; for (XMPPElement *node in message.children) &#123; // 取出消息的解码 NSString *base64str = node.stringValue; NSData *data = [[NSData alloc] initWithBase64EncodedString:base64str options:0]; UIImage *image = [[UIImage alloc] initWithData:data]; &#125; &#125; &#125; 4.6 语音消息管理 图片和语音文件发送的基本思路： 先将图片/语音转化成二进制文件，然后将二进制文件进行 base64 编码，编码成字符串。在即将发送的 message 内添加一个子节点，节点的 stringValue（节点的值）设置这个编码后的字符串。 然后消息发出后取出消息文件的时候，通过 messageType 先判断是不是图片/语音信息，如果是图片/语音信息先通过自己之前设置的节点名称，把这个子节点的 stringValue 取出来，应该是一个 base64 之后的字符串。 录制／播放语音 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/// 包含头文件#import &lt;AVFoundation/AVFoundation.h&gt;/// 录音器@property(nonatomic, strong) AVAudioRecorder *recorder;/// 录音时长@property(nonatomic, assign) NSTimeInterval recordTime;/// 录音地址@property(nonatomic, strong) NSURL *recordURL;/// 播放器@property(nonatomic, strong) AVAudioPlayer *player;/// 开始录音 // 自定义方法 - (IBAction)startRecord:(UIButton *)sender &#123; // 创建录音文件保存路径 NSString *urlStr = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject]; self.recordURL = [NSURL URLWithString:[urlStr stringByAppendingPathComponent:@&quot;myRecord.caf&quot;]]; // 创建录音格式设置 NSMutableDictionary *dicM = [NSMutableDictionary dictionary]; [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey]; // 设置录音格式 [dicM setObject:@(8000) forKey:AVSampleRateKey]; // 设置录音采样率，8000 是电话采样率，对于一般录音已经够了 [dicM setObject:@(1) forKey:AVNumberOfChannelsKey]; // 设置通道，这里采用单声道 [dicM setObject:@(8) forKey:AVLinearPCMBitDepthKey]; // 每个采样点位数，分为 8、16、24、32 [dicM setObject:@(YES) forKey:AVLinearPCMIsFloatKey]; // 是否使用浮点数采样 NSDictionary *setting = [dicM copy]; // 创建录音机 self.recorder = [[AVAudioRecorder alloc] initWithURL:self.recordURL settings:setting error:NULL]; // 开始录音 [self.recorder record]; &#125;/// 停止录音 // 自定义方法 - (IBAction)stopRecord:(UIButton *)sender &#123; NSTimeInterval time = self.recorder.currentTime; [self.recorder stop]; if (time &lt; 1.5) &#123; NSLog(@&quot;时间太短&quot;); &#125; else &#123; NSLog(@&quot;录音完成&quot;); &#125; &#125;/// 播放录音 // 自定义方法 - (void)playAudioData:(NSData *)data &#123; self.player = [[AVAudioPlayer alloc] initWithData:data error:NULL]; self.player.numberOfLoops = 0; [self.player prepareToPlay]; [self.player play]; &#125; 发送语音消息 msgType 自定义消息类型，image：图片消息，audio：音频消息 12345678910111213141516171819202122232425262728293031// 发送语音消息NSData *audioData = [NSData dataWithContentsOfURL:self.recordURL];NSString *type = [NSString stringWithFormat:@&quot;audio:%.1f秒&quot;, self.recordTime];[[XMPPManager defaultManager] sendMessage:audioData msgType:type toUser:self.userName];/// 发送图片/音频消息，自定义方法- (void)sendMessage:(NSData *)msgData msgType:(NSString *)type toUser:(NSString *)userName &#123; NSString *jidString = userName; // 设置消息接收者 NSString *domainString = [NSString stringWithFormat:@&quot;@%@&quot;, HOST_DOMAIN]; if (![jidString containsString:domainString]) &#123; jidString = [jidString stringByAppendingString:domainString]; &#125; XMPPJID *jid = [XMPPJID jidWithString:jidString]; XMPPMessage *msg = [XMPPMessage messageWithType:@&quot;chat&quot; to:jid]; [msg addBody:type]; // 转换成 base64 的编码 NSString *base64str = [msgData base64EncodedStringWithOptions:0]; // 设置节点内容 XMPPElement *attachment = [XMPPElement elementWithName:@&quot;attachment&quot; stringValue:base64str]; // 包含子节点 [msg addChild:attachment]; // 发送消息 [self.stream sendElement:msg];&#125; 接收语音消息 123456789101112131415#pragma mark XMPPStreamDelegate 协议方法 /// 接收到消息 - (void)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123; if ([message.body hasPrefix:@&quot;audio&quot;]) &#123; for (XMPPElement *node in message.children) &#123; // 取出消息的解码 NSString *base64str = node.stringValue; NSData *data = [[NSData alloc] initWithBase64EncodedString:base64str options:0]; &#125; &#125; &#125; 4.7 心跳检测 为了监听服务器是否有效，增加心跳监听，用 XEP-0199 协议。 在 XMPPFrameWork 框架下，封装了 XMPPAutoPing 和 XMPPPing 两个类都可以使用，因为 XMPPAutoPing 已经组合进了 XMPPPing 类，所以 XMPPAutoPing 使用起来更方便。 初始化并启动 ping 12345678910111213141516171819202122232425262728293031323334353637/// 包含头文件#import &lt;XMPPFramework/XMPPFramework.h&gt;/// 遵守协议&lt;XMPPAutoPingDelegate&gt;&gt;/// 心跳检测@property (nonatomic, strong) XMPPAutoPing *autoPing;// 添加心跳检测模块self.autoPing = [[XMPPAutoPing alloc] init]; // 发送的是一个 stream:ping，对方如果想表示自己是活跃的，应该返回一个 pong[self.autoPing activate:self.stream]; // 激活[self.autoPing addDelegate:self delegateQueue:dispatch_get_main_queue()];self.autoPing.pingInterval = 1000; // 定时发送 ping 时间self.autoPing.respondsToQueries = YES; // 不仅仅是服务器来得响应，如果是普通的用户，一样会响应self.autoPing.targetJID = [XMPPJID jidWithString:HOST_DOMAIN]; // 设置 ping 目标服务器 // 如果为 nil，则监听 stream 当前连接上的那个服务器#pragma mark - XMPPAutoPingDelegate 协议方法 /// 已经发送 ping - (void)xmppAutoPingDidSendPing:(XMPPAutoPing *)sender &#123; NSLog(@&quot;xmppAutoPingDidSendPing&quot;); &#125; /// 接收到 pong - (void)xmppAutoPingDidReceivePong:(XMPPAutoPing *)sender &#123; NSLog(@&quot;xmppAutoPingDidReceivePong&quot;); &#125; /// ping 超时 - (void)xmppAutoPingDidTimeout:(XMPPAutoPing *)sender &#123; NSLog(@&quot;xmppAutoPingDidTimeout&quot;); &#125; 停止 ping 1234// 停止 ping[self.autoPing deactivate];[self.autoPing removeDelegate:self];self.autoPing = nil; 4.8 自动重连 当意外与服务器断开连接，自动重新连接上去，并且将上一次的信息自动加上去。 初始化 12345678910111213141516171819202122232425262728/// 包含头文件#import &lt;XMPPFramework/XMPPFramework.h&gt;/// 遵守协议&lt;XMPPReconnectDelegate&gt;&gt;/// 自动重连@property (nonatomic, strong) XMPPReconnect *reconnect;// 添加自动重连模块self.reconnect = [[XMPPReconnect alloc] init];[self.reconnect activate:self.stream]; // 激活[self.reconnect addDelegate:self delegateQueue:dispatch_get_main_queue()];self.reconnect.autoReconnect = YES; // 设置是否自动重新连接#pragma mark - XMPPReconnectDelegate 协议方法 /// 设置是否自动重新连接 - (BOOL)xmppReconnect:(XMPPReconnect *)sender shouldAttemptAutoReconnect:(SCNetworkConnectionFlags)connectionFlags &#123; return YES; &#125; /// 意外断开连接 - (void)xmppReconnect:(XMPPReconnect *)sender didDetectAccidentalDisconnect:(SCNetworkConnectionFlags)connectionFlags &#123; NSLog(@&quot;didDetectAccidentalDisconnect&quot;); &#125; 回到顶部 5、XMPPFramework 快速登录 具体讲解链接 回到顶部 6、XMPPFramework 重连以及其他问题 具体讲解链接]]></content>
      <categories>
        <category>网络相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[XMPP]]></title>
    <url>%2F2018%2F09%2F17%2FXMPP%2F</url>
    <content type="text"><![CDATA[[转自 iOS_成才录]（https://www.jianshu.com/p/561224d0e91d） 一、即时通讯技术 即时通讯技术（IM– Instant Messaging）-&gt; 支持用户在线实时交谈 有许多的IM系统，如AOL、Yahoo IM、 MSN以及QQ，它们最大的区别在于各自通讯协议的实现，所以n即时通讯技术的核心在于它的传输协议 协议-&gt; 用来说明信息在网络上如何传输 如果有了统一的传输协议，那么应当可以实现各个IM之间的直接通讯 为了创建即时通讯的统一标准，目前已经出现过的IM协议包括： IETF的对话初始协议（SIP）: SIP是建立VOIP连接的IETF标准，而VOIP就是网络电话 即时通讯对话初始协议和表示扩展协议（SIMPLE） 应用交换协议（APEX）、显示和即时通讯协议（PRIM） 基于XML且开放的可扩展通讯和表示协议（XMPP）协议（常称为 Jabber 协议） 人们多次努力，试图统一各大主要IM供应商的标准（AOL、Yahoo 及 Microsoft），但无一成功，且每一种IM仍然继续使用自己所拥有的协议 二、XMPP简介 XMPP诞生的由来 都是遵守XMPP即时通讯协议 设计一款全世界都使用的即时通讯协议，无论使用什么即时通讯软件，都可以互联互通 XMPP起源 XMPP是基于XML的协议，用于即时消息（IM）以及在线现场探测。最初，XMPP作为一个框架开发，目标是支持企业环境内的即时消息传递和联机状态应用程序。 XMPP的前身是Jabber（1998年），是一个开源组织定义的网络即时通信协议 XMPP是 1一个分散型通信网络 这意味着，只要网络基础设施允许，任何XMPP用户都可以向其他任何XMPP用户传递消息。 多个XMPP服务器也可以通过一个专门的“服务器-服务器”协议相互通信，提供了创建分散型社交网络和协作框架的可能性 XMPP工作原理示意图.png XMPP概述 XMPP是一种基于XML的协议 它继承了在XML(可扩展标记语言)环境中灵活的发展性。这表明XMPP是可扩展的。 XMPP包含了针对服务器端的软件协议，使之能与另一个进行通话，这使得开发者更容易建立客户应用程序或给一个配置好的系统添加功能 XMPP的核心XML流传输协议的定义 使得XMPP能够在一个比以往网络通信协议更规范的平台上。借助于XML易于解析和阅读的特性，使得XMPP的协议能够非常漂亮 XMPP的扩展协议Jingle使得其支持语音和视频，目前iOS尚不支持 XMPP的官方文档是RFC 3920 XMPP协议曾经是Google力推的即时通信协议，其代表作品是GTalk Google Talk（GTalk） Google Talk是Google的IM工具，除了具有IM功能外，另外还加上了Voip功能，“界面清新大方”，可直接链接Gmail，接受查看邮件 由于Google Talk是基于Jabber开源标准，这种标准允许用户和其它的即时讯息系统相连，比如苹果电脑的iChat，GAIM，Trillian Pro以及Psi。Google Talk只能够在Windows平台上运行 Google Talk的用户无法使用这种软件与AIM，MSN Messenger或者雅虎Messenger的用户进行互通 2013年5月，在Google I/O大会上，Google推出统一跨平台聊天应用Hangouts（环聊）取代Google Talk Google Hangouts不支持XMPP协议，Google Hangouts用户与如XMPP协议的强有力支持者jabber.org之间的交流无法进行 Hangouts目前在中国大陆无法使用，尚不支持iOS7.0 目前，Google Wave是基于XMPP协议的，并且Google还开发Jingle扩展进行基于XMPP协议的视频聊天。尽管Google尚未宣布Talk的关闭日期，不过从Google关闭Reader和iCal支持来看，Talk关闭之日不会太远 三、XMPP定义 XMPP： The Extensible Messaging and Presence Protocol（可扩展通讯和表示协议） XMPP可用于服务类实时通讯、表示和需求响应服务中的XML数据元流式传输。 XMPP以Jabber协议为基础，而Jabber是即时通讯中常用的开放式协议 XMPP是基于XML的协议，用于即时消息（IM）以及在线现场探测。 促进服务器之间的准即时操作。这个协议可能最终允许因特网用户向因特网上的其他任何人发送即时消息，即使其操作系统和浏览器不同 四、XMPP的基本结构：典型的C/S架构 XMPP是一个 1典型的C/S架构 而不是像大多数即时通讯软件一样，使用P2P客户端到客户端的架构 也就是说在大多数情况下，当两个客户端进行通讯时， 他们的消息都是通过服务器传递的。 优点：采用这种架构，主要是为了简化客户端，将大多数工作放在服务器端进行 架构.png XMPP中定义了三个角色：客户端，服务器，网关 通信能够在这三者的任意两个之间双向发生 服务器 ： 同时承担了客户端信息记录，连接管理和信息的路由功能 网关 ： 承担着与异构即时通信系统的互联互通，异构系统可以包括SMS（短信），MSN，ICQ等 基本的网络形式： 单客户端通过TCP/IP连接到单服务器，然后在之上传输XML流 五、XMPP工作原理 节点连接到服务器 服务器利用本地目录系统中的证书对其认证 节点指定目标地址，让服务器告知目标状态 服务器查找、连接并进行相互认证 节点之间进行交互 XMPP工作原理示意图.png 六、传输内容 XMPP应用传输的是与即时通讯相关的指令 而XMPP传输的即时通讯指令的逻辑与以往相仿，只是协议的形式变成了 1XML格式的纯文本 。 这不但使得解析容易了，人也容易阅读了，方便了开发和查错 而XMPP的核心部分就是一个在网络上分片段发送XML的流协议。这个流协议是XMPP的即时通讯指令的传递基础，也是一个非常重要的可以被进一步利用的网络基础协议，可以说XMPP用TCP传的是XML流 七、XMPP的优缺点 优点 开放 标准（XMPP的技术规格已被定义在RFC 3920及RFC 3921） 证实可用，谷歌证实了GTalk 分散 安全 可扩展 缺点 数据负载过重XML 没有二进制传输 八、XMPP的传输小结 XMPP是一种 1类似于HTTP协议 的 1一种数据传输协议 ， 其过程就如同“解包装–〉包装”的过程。只需要理解其接收的类型及返回的类型，便可以很好的利用XMPP来进行数据通讯 XMPP官方网站——http://xmpp.org 九、XMPP——JID 1每个 XMPP客户端用户必须拥有一个全局惟一标识符。 基于历史原因，这些标识符称为Jabber ID或JID。鉴于协议的分布式特征，JID应包含联系用户所需的所有信息，JID的结构类似于电子邮件地址，但不要求 JID同时也是有效的电子邮件收件人 1客户端和服务器节点，被统称为XMPP实体，都拥有JID 。例如：SomeCorp公司的员工 John Doe可能拥有JID：用户名@服务器名称 John.Doe@somecorp.com 其中somecorp.com是 SomeCorp公司的XMPP服务器的地址 John.Doe是John Doe的用户名 十、环境搭建 开发客户端：ios 、Xcode开发选择 服务器：Openfire选择 数据库：MySql选择 ​ ​ 环境选择.png 安装MySQL管理工具——mysql-workbench]]></content>
      <categories>
        <category>网络相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Socket]]></title>
    <url>%2F2018%2F09%2F17%2FSocket%2F</url>
    <content type="text"><![CDATA[[转自 yeyuangen]（https://blog.csdn.net/yeyuangen/article/details/6799575） 一、问题的引入——socket的引入是为了解决不同计算机间进程间通信的问题** 1.socket与进程的关系 1).socket与进程间的关系:socket 用来让一个进程和其他的进程互通信息(IPC)，而Socket接口是TCP/IP网络的API接口函数。 2).进程间通信（本机内） 进程间通信（不同计算机，要联网） 2、**socket与文件的关系——**如何理解socket是种特殊的I/O? 1）Socket最先应用于Unix操作系统,如果了解Unix系统的I/O的话，就很容易了解Socket了，因为Socket数据传输其实就是一种特殊的I/O。 2）可对其进行文件操作 3）有文件描述符。而文件描述符的本质是一个非负整数。只是用于区分。类似的还有进程ID。 3.服务器端口与连接个数的关系1）服务端在8088上监听，然后生成一个新的socket与client通讯。(注意：服务器端监听端口是不变的，但socket连接可以一直生成，一个线程对应一个socket.)同一时刻，一个端口只能建立一个连接。在一个端口监听，但是在监听端口的同时，生成一个等待队列，每一个来自客户端的连接都会送入等待队列中，服务器利用一定的算法进行选择相应的连接请求处理，所以在一个端口可以监听多各请求嘛。如果同时的连接过多，服务器相应每个连接的时间就会相应的变长。就会变慢。2）QQ的实现方法就是在登陆的时候告诉服务器你已经登陆，发送消息的时候，首先你会发送一个包给服务器，服务器查看你需要发送的对方是否在线，如果在线就返回包告诉你对方在线，然后你就会和对方建立一个连接，然后直接发消息给对方，如果对方不在线，那么就会通过服务器转发你这次的消息3）网络IO数与你的CPU数目一致将是比较好的选择（考虑到多线程多进程可以提高效率）。没有必要每个客户分配一个端口。绝对是一种无谓的浪费。 4.有人知道socket监听的一个端口.最多可以有多少个客户连接? 1）listen()中有个参数，应该是确定并行连接客户数？！2）The maximum length of the queue of pending connections. If this value is SOMAXCONN, then the underlying service provider responsible for socket s will set the backlog to a maximum “reasonable “ value. There is no standard provision to find out the actual backlog value.3）linux2.4下，最多可以有1024个socket连接4）同时连接请求好像是5个（是连接请求，不是连接），可保持的链接理论上是65535（2字节的SOCKET端口号）， 3.Socket是网络上运行的两个程序间双向通讯的一端，它既可以接受请求，也可以发送请求，利用它可以较为方便的编写网络上数据的传递。 5.问：现在server与client想建立socket连接，server仅知道client的IP，端口号不知道，能建立连接吗?怎么建立呢？有没有代码看看？答：C和S是相对而言的，发起连接的一方就是C，而监听端口接受连接的一方就是S，C如果不知道S监听的端口，怎么发起连接呢，另外，对于S而言，端口是S上各个服务的区分标志，如果用错误的端口号去连接，是不能获得正确的服务的。client的端口是不需要指定的，Server绑定端口，然后监听，client使用server的IP和端口建立socket连接 6.精彩问答 问：看到的文章上说“每个网络通信循环地进出主计算机的TCP 应用层。它被两个所连接的号码唯一地识别。这两个号码合起来叫做套接字.组成套接字的这两个号码就是机器的IP 地址和TCP 软件所使用的端口号。” 又说“通过socket（）函数可以创建一个套接字，然后再把它绑定到端口号…” 那么套接字socket的概念究竟到哪里为止呢？是仅限于socket()返回的文件描述符？还是是IP和端口号的组合？如果是，那么socket()调用之后产生的套接字描述符的作用是什么呢？ 套接字描述符，IP地址，端口号三者间的关系是怎样的？ 谢谢各位前辈解答。答：一个socket句柄代表两个地址对 “本地ip:port”–“远程ip:port”问：那么socket的概念到底到那里为止呢？比如，利用socket()可以产生一个套接字句柄，可是在bind() 或者 connect () 之前它只是一个文件描述符，和linux中其他的文件描述符一样。 如果说socket代表一个两个地址对，那么句柄的作用是不是仅仅是在bind() 或者 connect () 之后的用于区分和标记这样的地址对呢？因为这样他才能和网络的概念联系起来。这样的话，socket的意义应该是说用文件描述符描述的通信双方的IP地址和端口号地址对？（而文件描述符是区分这些地址对的标记？)答：socket为内核对象，由操作系统内核来维护其缓冲区，引用计数，并且可以在多个进程中使用。 至于称它为“句柄”“文件描述符”都是一样的，它只不过是内核开放给用户进程使用的整数而已问：谢谢楼上，是我没描述清楚。对于“句柄”和“文件描述符”我没有异议。 我想我的问题是在于句柄和ip、port的关系，不知道我这样说对否： 1. 每一个socket 本质上都是指一个ip地址和端口对 2. 为了操作这样的地址对，使用了文件描述符 3. socket（）函数只创建了一个普通的文件描述符，在进行bind（）或者connect()之前并不能说创建了用于网络通讯的套接字 4. 只有在进行了bind（）或者connect()之后socket才被创立起来答：socket（）创建了一个socket内核对象。 accept或者connect后，才可以对socket句柄读写。因为只有在 connect或者bind,listen,accept后才会设置好socket内核对象里边的ip和端口 二、**socket和端口理解** 一个socket句柄代表两个地址对 “本地ip:port”–“远程ip:port”在windows下叫句柄，在linux下叫文件描述符socket为内核对象，由操作系统内核来维护其缓冲区，引用计数，并且可以在多个进程中使用。 至于称它为“句柄”“文件描述符”都是一样的我假定读者已经对于socket连接的建立过程和各种状态转换比较熟悉了，因为这篇文档的目的是澄清概念，而不是介绍概念。在使用socket编程时，我们都知道在网络通信以前首先要建立连接，而连接的建立是通过对socket的一些操作来完成的。那么，建立连接的过程大致可以分为以下几步：1） 建立socket套接字。2） 给套接字赋予地址，这个地址不是通常的网络地址的概念。3） 建立socket连接。1． 建立socket套接字。使用socket建立套接字的时候，我们实际上是建立了一个数据结构。这个数据结构最主要的信息是指定了连接的种类和使用的协议，此外还有一些关于连接队列操作的结构字段（这里就先不涉及他们了）。当我们使用socket函数以后，如果成功的话会返回一个int型的描述符，它指向前面那个被维护在内核里的socket数据结构。我们的任何操作都是通过这个描述符而作用到那个数据结构上的。这就像是我们在建立一个文件后得到一个文件描述符一样，对文件的操作都是通过文件描述符来进行的，而不是直接作用到inode数据结构上。我之所以用文件描述符举例，是因为socket数据结构也是和inode数据结构密切相关，它不是独立存在于内核中的，而是位于一个VFS inode结构中。所以，有一些比较抽象的特性，我们可以用文件操作来不恰当的进行类比以加深理解。如前所述，当建立了这个套接字以后，我们可以获得一个象文件描述符那样的套接字描述符。就象我们对文件进行操作那样，我们可以通过向套接字里面写数据将数据传送到我们指定的地方，这个地方可以是远端的主机，也可以是本地的主机。如果你有兴趣的话，还可以用socket机制来实现IPC，不过效率比较低，试试也就行了（我没有试过）。2． 给套接字赋予地址。依照建立套接字的目的不同，赋予套接字地址的方式有两种：服务器端使用bind，客户端使用connetc。Bind:我们都知道，只要使用IP, prot就可以区分一个tcp/ip连接（当然这个连接指的是一个连接通道，如果要区分特定的主机间的连接，还需要第三个属性 hostname）。我们可以使用bind函数来为一个使用在服务器端例程中的套接字赋予通信的地址和端口。在这里我们称通信的IP地址和端口合起来构成了一个socket地址，而指定一个socket使用特定的IP和port组合来进行通行的过程就是赋予这个socket一个地址。要赋予socket地址，就得使用一个数据结构来指明特定的socket地址，这个数据结构就是struct sockaddr。对它的使用我就不说了，因为这篇文档的目的是澄清概念而不是说明使用方法。Bind函数的作用就是将这个特定的标注有socket地址信息的数据结构和socket套接字联系起来，即赋予这个套接字一个地址。但是在具体实现上，他们两个是怎么联系在一起的，我还不知道。一个特定的socket的地址的生命期是bind成功以后到连接断开前。你可以建立一个socket数据结构和socket地址的数据结构，但是在没有bind以前他们两个是没有关系的，在bind以后他们两个才有了关系。这种关系一直维持到连接的结束，当一个连接结束时，socket数据结构和socket地址的数据结构还都存在，但是他们两个已经没有关系了。如果你要是用这个套接字在socket地址上重新进行连接时，需重新bind他们两个。再注明一次，我说的这个连接是一个连接通道，而不是特定的主机之间的连接。Bind指定的IP通常是本地IP（一般不特别指定，而使用INADDR_ANY来声明），而最主要的作用是指定端口。在服务器端的socket进行了bind以后就是用listen来在这个socket地址上准备进行连接。connect:对于客户端来说，是不会使用bind的（并不是不能用，但没什么意义），他们会通过connet函数来建立socket和socket地址之间的关系。其中的socket地址是它想要连接的服务器端的socket地址。在connect建立socket和socket地址两者关系的同时，它也在尝试着建立远端的连接。3． 建立socket连接。对于准备建立一个连接，服务器端要两个步骤：bind, listen；客户端一个步骤：connct。如果服务器端accept一个connect，而客户端得到了这个accept的确认，那么一个连接就建立了。 三、客户/服务器模式模式的理解 ​ 客户/服务器模式采取的是主动请求方式： ​ 首先服务器方要先启动，并根据请求提供相应服务： ​ 1. 打开一通信通道并告知本地主机，它愿意在某一公认地址上（周知口，如FTP为21）接收客户请求； ​ 2. 等待客户请求到达该端口； ​ 3. 接收到重复服务请求，处理该请求并发送应答信号。接收到并发服务请求，要激活一新进程来处理这个客户请求（如UNIX系统中用fork、exec）。新进程处理此客户请求，并不需要对其它请求作出应答。服务完成后，关闭此新进程与客户的通信链路，并终止。 ​ 4. 返回第二步，等待另一客户请求。 ​ 5. 关闭服务器 ​ 客户方： ​ 1. 打开一通信通道，并连接到服务器所在主机的特定端口； ​ 2. 向服务器发服务请求报文，等待并接收应答；继续提出请求…… ​ 3. 请求结束后关闭通信通道并终止。 ​ 从上面所描述过程可知： ​ 1. 客户与服务器进程的作用是非对称的，因此编码不同。 ​ 2. 服务进程一般是先涌纪纪户请求而启动的。只要系统运行，该服务进程一直存在，直到正常或强迫终止。]]></content>
      <categories>
        <category>网络相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SDWebImage]]></title>
    <url>%2F2018%2F09%2F17%2FSDWebImage%2F</url>
    <content type="text"><![CDATA[转自 要上班的斌哥 在 iOS 的图片加载框架中，SDWebImage可谓是占据大半壁江山。它支持从网络中下载且缓存图片，并设置图片到对应的 UIImageView 控件或者 UIButton 控件。在项目中使用 SDWebImage 来管理图片加载相关操作可以极大地提高开发效率，让我们更加专注于业务逻辑实现。 SDWebImage 概论1.提供了一个 UIImageView 的 category 用来加载网络图片并且对网络图片的缓存进行管理2.采用异步方式来下载网络图片3.采用异步方式，使用 memory＋disk 来缓存网络图片，自动管理缓存。4.支持 GIF 动画5.支持 WebP 格式6.同一个 URL 的网络图片不会被重复下载7.失效的 URL 不会被无限重试8.耗时操作都在子线程，确保不会阻塞主线程9.使用 GCD 和 ARC10.支持 Arm64 SDWebImage 使用1.使用 ImageView+WebCache category 来加载 UITableView 中 cell 的图片 1[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http://www.domain.com/path/to/image.jpg&quot;] placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]]; 2.使用 block,采用这个方案可以在网络图片加载过程中得知图片的下载进度和图片加载成功与否 123[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http://www.domain.com/path/to/image.jpg&quot;] placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) &#123; //... completion code here ... &#125;]; 3.使用 SDWebImageManager,SDWebImageManager 为UIImageView+WebCache category 的实现提供接口。 12345678SDWebImageManager *manager = [SDWebImageManager sharedManager] ;[manager downloadImageWithURL:imageURL options:0 progress:^(NSInteger receivedSize, NSInteger expectedSize) &#123; // progression tracking code &#125; completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) &#123; if (image) &#123; // do something with image &#125; &#125;]; 4.加载图片还有使用 SDWebImageDownloader 和 SDImageCache 方式，但那个并不是我们经常用到的。基本上面所讲的3个方法都能满足需求。 SDWebImage 流程 UIImageView的图片加载流程 SDWebImage 接口SDWebImage 是一个成熟而且比较庞大的框架，但是在使用过程中并不需要太多的接口,这算是一种代码封装程度的体现。这里就介绍比较常用的几个接口。 给 UIImageView 设置图片的接口，SDWebImage 有提供多个给UIImageView 设置图片的接口，最终所有的接口都会调用下图的这个接口，这是大多数框架的做法。 ​ ​ 给UIImageView设置图片的接口 获取 SDWebImage 的磁盘缓存大小,在项目中有时候会需要统计应用的磁盘缓存内容大小，那么获取图片的缓存大小就是使用这个接口来实现 1[SDImageCache sharedImageCache] getSize]; 清理内存缓存，清理内存中缓存的图片资源，释放内存资源。 1[[SDImageCache sharedImageCache] clearMemory]; 有了清理内存缓存，自然也有清理磁盘缓存的接口 1[[SDImageCache sharedImageCache] clearDisk]; SDWebImage 解析解析主要围绕着 SDWebImage 的图片加载流程来分析，介绍SDWebImage 这个框架加载图片过程中的一些处理方法和设计思路。 给 UIImageView 设置图片，然后 SDWebImage 调用这个最终的图片加载方法。 ​ ​ 1 给UIImageView设置图片 开始加载之前图片先取消对应的 UIImageView 先前的图片下载操作。试想，如果我们给 UIImageView 设置了一张新的图片，那么我们还会在意该 UIImageVIew 先前是要加载哪一张图片么？应该是不在意的吧！那是不是应该尝试把该 UIImageView 先前的加载图片相关操作给取消掉呢? 1[self sd_cancelCurrentImageLoad] 2 取消对应的UIImageView先前的图片下载操作 该方法经过周转，最后调用了以下方法，框架将图片对应的下载操作放到 UIView 的一个自定义字典属性 (operationDictionary) 中，取消下载操作第一步也是从这个 UIView 的自定义字典属性 (operationDictionary)中取出所有的下载操作，然后依次调用取消方法，最后将取消的操作从(operationDictionary) 字典属性中移除。 最终的取消下载方法 3.移除之前没用的图片下载操作之后就创建一个新的图片下载操作，然后设置到 UIView 的一个自定义字典属性 (operationDictionary) 中。 3 创建一个新的图片下载操作 4.看看如何创建一个新的图片下载操作,框架保存了一个失效的 url 列表，如果 url 失效了就会被加入这个列表，保证不会重复多次请求失效的 url。 4 图片下载操作 根据给定的 url 生成一个唯一的 key ,之后利用这个 key 到缓存中查找对应的图片缓存。 查找图片缓存 5.读取图片缓存,根据 key 先从内存中读取图片缓存，若没有命中内存缓存则读取磁盘缓存，如果磁盘缓存命中，那么将磁盘缓存读到内存中成为内存缓存。如果都没有命中缓存的话，那么就在执行的 doneBlock中开始下载图片。 5 读取图片缓存 6.图片下载操作完成后会将图片对应的数据通过 completedBlock 进行回调 6 图片下载操作 在图片下载方法中，调用了一个方法用于添加创建和下载过程中的各类block 回调。 图片下载方法 添加该 url 加载过程的状态回调 block 状态回调Block 如果该 url 是第一次加载的话，那么就会执行 createCallback 这个回调block ,然后在 createCallback 里面开始构建网络请求，在下载过程中执行各类进度 block 回调。 构建网络请求 7.当图片下载完成之后会回到 done 的 block 回调中做图片转换处理和缓存操作 7 图片转换处理和缓存操作 回到 UIImageView 控件的设置图片方法 block 回调中，给对应的UIImageView 设置图片，操作流程到此完成。 Block中设置图片 8.304 的处理SDWebImage在加载图片网络请求的 NSURLConnection 的代理中对httpCode 做了判断，当 httpCode 为 304 的时候放弃下载，读取缓存。 304处理 总结SDWebImage 作为一个优秀的图片加载框架，提供的使用方法和接口对开发者来说非常友好。其内部实现多是采用 block 的方式来实现回调，代码阅读起来可能没有那么直观。此文章旨在给大家讲解 SDWebImage 这个框架的图片大概加载流程，其中具体细节限于篇幅无法详细深究。能力有限，文章中难免有错误，若大家在阅读过程中有发现不合理或者错误的地方恳请在评论中指出，我会在第一时间进行修正,不胜感激。 ##]]></content>
      <categories>
        <category>第三方源码</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AFNetworking（终）]]></title>
    <url>%2F2018%2F09%2F17%2FAFNetworking%EF%BC%88%E7%BB%88%EF%BC%89%2F</url>
    <content type="text"><![CDATA[转自 涂耀辉 写在开头： 大概回忆下，之前我们讲了AFNetworking整个网络请求的流程，包括request的拼接，session代理的转发，response的解析。以及对一些bug的适配，如果你还没有看过，可以点这里：AFNetworking到底做了什么?AFNetworking到底做了什么（二）? 除此之外我们还单独的开了一篇讲了AF对https的处理：AFNetworking之于https认证 还有一篇讲了讲AF对UIKit的扩展：AFNetworking之UIKit扩展与缓存实现 本文将涉及AF2.x的核心实现，与AF3.x最新版本之间的对比，以及本系列的一个最终总结：AFNetworking到底做了什么？ 开始正文首先我们来看看AF2.x的项目目录: AF2.X源码结构图.png 除了UIKit扩展外，大概就是上述这么多类，其中最重要的有3个类： 1)AFURLConnectionOperation2)AFHTTPRequestOperation3)AFHTTPRequestOperationManager 大家都知道，AF2.x是基于NSURLConnection来封装的，而NSURLConnection的创建以及数据请求，就被封装在AFURLConnectionOperation这个类中。所以这个类基本上是AF2.x最底层也是最核心的类。 而AFHTTPRequestOperation是继承自AFURLConnectionOperation，对它父类一些方法做了些封装。 AFHTTPRequestOperationManager则是一个管家，去管理这些这些operation。 我们接下来按照网络请求的流程去看看AF2.x的实现：注：本文会涉及一些NSOperationQueue、NSOperation方面的知识，如果对这方面的内容不了解的话，可以先看看雷纯峰的这篇：iOS 并发编程之 Operation Queues 首先，我们来写一个get或者post请求：1234567AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];[manager GET:url parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) &#123; &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123; &#125;]; 就这么简单的几行代码，完成了一个网络请求。 接着我们来看看AFHTTPRequestOperationManager的初始化方法： 123456789101112131415161718192021222324252627+ (instancetype)manager &#123; return [[self alloc] initWithBaseURL:nil];&#125;- (instancetype)init &#123; return [self initWithBaseURL:nil]; &#125;- (instancetype)initWithBaseURL:(NSURL *)url &#123; self = [super init]; if (!self) &#123; return nil; &#125; // Ensure terminal slash for baseURL path, so that NSURL +URLWithString:relativeToURL: works as expected if ([[url path] length] &gt; 0 &amp;&amp; ![[url absoluteString] hasSuffix:@&quot;/&quot;]) &#123; url = [url URLByAppendingPathComponent:@&quot;&quot;]; &#125; self.baseURL = url; self.requestSerializer = [AFHTTPRequestSerializer serializer]; self.responseSerializer = [AFJSONResponseSerializer serializer]; self.securityPolicy = [AFSecurityPolicy defaultPolicy]; self.reachabilityManager = [AFNetworkReachabilityManager sharedManager]; //用来调度所有请求的queue self.operationQueue = [[NSOperationQueue alloc] init]; //是否做证书验证 self.shouldUseCredentialStorage = YES; return self;&#125; 初始化方法很简单，基本和AF3.x类似，除了一下两点：1)设置了一个operationQueue，这个队列，用来调度里面所有的operation，在AF2.x中，每一个operation就是一个网络请求。2)设置shouldUseCredentialStorage为YES，这个后面会传给operation，operation会根据这个值，去返回给代理，系统是否做https的证书验证。 然后我们来看看get方法：12345678910111213- (AFHTTPRequestOperation *)GET:(NSString *)URLString parameters:(id)parameters success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure&#123; //拿到request NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@&quot;GET&quot; URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:nil]; AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithRequest:request success:success failure:failure]; [self.operationQueue addOperation:operation]; return operation;&#125; 方法很简单，如下：1）用self.requestSerializer生成了一个request，至于如何生成，可以参考之前的文章，这里就不赘述了。2）生成了一个AFHTTPRequestOperation，然后把这个operation加到我们一开始创建的queue中。 其中创建AFHTTPRequestOperation方法如下： 1234567891011121314151617- (AFHTTPRequestOperation *)HTTPRequestOperationWithRequest:(NSURLRequest *)request success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure&#123; //创建自定义的AFHTTPRequestOperation AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request]; operation.responseSerializer = self.responseSerializer; operation.shouldUseCredentialStorage = self.shouldUseCredentialStorage; operation.credential = self.credential; //设置自定义的安全策略 operation.securityPolicy = self.securityPolicy; [operation setCompletionBlockWithSuccess:success failure:failure]; operation.completionQueue = self.completionQueue; operation.completionGroup = self.completionGroup; return operation;&#125; 方法创建了一个AFHTTPRequestOperation，并把自己的一些参数交给了这个operation处理。 接着往里看：123456789- (instancetype)initWithRequest:(NSURLRequest *)urlRequest &#123; self = [super initWithRequest:urlRequest]; if (!self) &#123; return nil; &#125; self.responseSerializer = [AFHTTPResponseSerializer serializer]; return self;&#125; 除了设置了一个self.responseSerializer，实际上是调用了父类，也是我们最核心的类AFURLConnectionOperation的初始化方法，首先我们要明确这个类是继承自NSOperation的，然后我们接着往下看： 12345678910111213141516171819202122232425//初始化- (instancetype)initWithRequest:(NSURLRequest *)urlRequest &#123; NSParameterAssert(urlRequest); self = [super init]; if (!self) &#123; return nil; &#125; //设置为ready _state = AFOperationReadyState; //递归锁 self.lock = [[NSRecursiveLock alloc] init]; self.lock.name = kAFNetworkingLockName; self.runLoopModes = [NSSet setWithObject:NSRunLoopCommonModes]; self.request = urlRequest; //是否应该咨询证书存储连接 self.shouldUseCredentialStorage = YES; //https认证策略 self.securityPolicy = [AFSecurityPolicy defaultPolicy]; return self;&#125; 初始化方法中，初始化了一些属性，下面我们来简单的介绍一下这些属性： _state设置为AFOperationReadyState 准备就绪状态，这是个枚举： 123456typedef NS_ENUM(NSInteger, AFOperationState) &#123; AFOperationPausedState = -1, //停止 AFOperationReadyState = 1, //准备就绪 AFOperationExecutingState = 2, //正在进行中 AFOperationFinishedState = 3, //完成&#125;; 这个_state标志着这个网络请求的状态，一共如上4种状态。这些状态其实对应着operation如下的状态： 12345678910111213141516171819//映射这个operation的各个状态static inline NSString * AFKeyPathFromOperationState(AFOperationState state) &#123; switch (state) &#123; case AFOperationReadyState: return @&quot;isReady&quot;; case AFOperationExecutingState: return @&quot;isExecuting&quot;; case AFOperationFinishedState: return @&quot;isFinished&quot;; case AFOperationPausedState: return @&quot;isPaused&quot;; default: &#123;#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wunreachable-code&quot; return @&quot;state&quot;;#pragma clang diagnostic pop &#125; &#125;&#125; 并且还复写了这些属性的get方法，用来和自定义的state一一对应： 12345678910//复写这些方法，与自己的定义的state对应 - (BOOL)isReady &#123; return self.state == AFOperationReadyState &amp;&amp; [super isReady];&#125; - (BOOL)isExecuting &#123; return self.state == AFOperationExecutingState;&#125; - (BOOL)isFinished &#123; return self.state == AFOperationFinishedState;&#125; self.lock这个锁是用来提供给本类一些数据操作的线程安全，至于为什么要用递归锁，是因为有些方法可能会存在递归调用的情况，例如有些需要锁的方法可能会在一个大的操作环中，形成递归。而AF使用了递归锁，避免了这种情况下死锁的发生。 初始化了self.runLoopModes，默认为NSRunLoopCommonModes。 生成了一个默认的 self.securityPolicy,关于这个policy执行的https认证，可以见楼主之前的文章。 这个类为了自定义operation的各种状态，而且更好的掌控它的生命周期，复写了operation的start方法，当这个operation在一个新线程被调度执行的时候，首先就调入这个start方法中，接下来我们它的实现看看： 123456789101112131415161718- (void)start &#123; [self.lock lock]; //如果被取消了就调用取消的方法 if ([self isCancelled]) &#123; //在AF常驻线程中去执行 [self performSelector:@selector(cancelConnection) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]]; &#125; //准备好了，才开始 else if ([self isReady]) &#123; //改变状态，开始执行 self.state = AFOperationExecutingState; [self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]]; &#125; //注意，发起请求和取消请求都是在同一个线程！！包括回调都是在一个线程 [self.lock unlock];&#125; 这个方法判断了当前的状态，是取消还是准备就绪，然后去调用了各自对应的方法。 注意这些方法都是在另外一个线程中去调用的，我们来看看这个线程： 1234567891011121314151617181920 + (void)networkRequestThreadEntryPoint:(id)__unused object &#123; @autoreleasepool &#123; [[NSThread currentThread] setName:@&quot;AFNetworking&quot;]; NSRunLoop *runLoop = [NSRunLoop currentRunLoop]; //添加端口，防止runloop直接退出 [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode]; [runLoop run]; &#125;&#125; + (NSThread *)networkRequestThread &#123; static NSThread *_networkRequestThread = nil; static dispatch_once_t oncePredicate; dispatch_once(&amp;oncePredicate, ^&#123; _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil]; [_networkRequestThread start]; &#125;); return _networkRequestThread;&#125; 这两个方法基本上是被许多人举例用过无数次了… 这是一个单例，用NSThread创建了一个线程，并且为这个线程添加了一个runloop，并且加了一个NSMachPort，来防止runloop直接退出。 这条线程就是AF用来发起网络请求，并且接受网络请求回调的线程，仅仅就这一条线程（到最后我们来讲为什么要这么做）。和我们之前讲的AF3.x发起请求，并且接受请求回调时的处理方式，遥相呼应。 我们接着来看如果准备就绪，start调用的方法： 123//改变状态，开始执行self.state = AFOperationExecutingState;[self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]]; 接着在常驻线程中,并且不阻塞的方式，在我们self.runLoopModes的模式下调用： 1234567891011121314151617181920212223- (void)operationDidStart &#123; [self.lock lock]; //如果没取消 if (![self isCancelled]) &#123; //设置为startImmediately YES 请求发出，回调会加入到主线程的 Runloop 下，RunloopMode 会默认为 NSDefaultRunLoopMode self.connection = [[NSURLConnection alloc] initWithRequest:self.request delegate:self startImmediately:NO]; NSRunLoop *runLoop = [NSRunLoop currentRunLoop]; for (NSString *runLoopMode in self.runLoopModes) &#123; //把connection和outputStream注册到当前线程runloop中去，只有这样，才能在这个线程中回调 [self.connection scheduleInRunLoop:runLoop forMode:runLoopMode]; [self.outputStream scheduleInRunLoop:runLoop forMode:runLoopMode]; &#125; //打开输出流 [self.outputStream open]; //开启请求 [self.connection start]; &#125; [self.lock unlock]; dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingOperationDidStartNotification object:self]; &#125;);&#125; 这个方法做了以下几件事： 首先这个方法创建了一个NSURLConnection，设置代理为自己，startImmediately为NO，至于这个参数干什么用的，我们来看看官方文档： startImmediatelyYES if the connection should begin loading data immediately, otherwise NO. If you pass NO, the connection is not scheduled with a run loop. You can then schedule the connection in the run loop and mode of your choice by calling scheduleInRunLoop:forMode: . 大意是，这个值默认为YES，而且任务完成的结果会在主线程的runloop中回调。如果我们设置为NO，则需要调用我们下面看到的： 1[self.connection scheduleInRunLoop:runLoop forMode:runLoopMode]; 去注册一个runloop和mode，它会在我们指定的这个runloop所在的线程中回调结果。 值得一提的是这里调用了: 1[self.outputStream scheduleInRunLoop:runLoop forMode:runLoopMode]; 这个outputStream在get方法中被初始化了： 1234567 - (NSOutputStream *)outputStream &#123; if (!_outputStream) &#123; //一个写入到内存中的流，可以通过NSStreamDataWrittenToMemoryStreamKey拿到写入后的数据 self.outputStream = [NSOutputStream outputStreamToMemory]; &#125; return _outputStream;&#125; 这里数据请求和拼接并没有用NSMutableData，而是用了outputStream，而且把写入的数据，放到内存中。 其实讲道理来说outputStream的优势在于下载大文件的时候，可以以流的形式，将文件直接保存到本地，这样可以为我们节省很多的内存，调用如下方法设置： 1[NSOutputStream outputStreamToFileAtPath:@&quot;filePath&quot; append:YES]; 但是这里是把流写入内存中，这样其实这个节省内存的意义已经不存在了。那为什么还要用呢？这里我猜测的是就是为了用它这个可以注册在某一个runloop的指定mode下。 虽然AF使用这个outputStream是肯定在这个常驻线程中的，不会有线程安全的问题。但是要注意它是被声明在.h中的： 1@property (nonatomic, strong) NSOutputStream *outputStream; 难保外部不会在其他线程对这个数据做什么操作，所以它相对于NSMutableData作用就体现出来了，就算我们在外部其它线程中去操作它，也不会有线程安全的问题。 这个connection开始执行了。 到主线程发送一个任务开始执行的通知。 分割图.png 接下来网络请求开始执行了，就开始触发connection的代理方法了： 代理方法.png AF2.x一共实现了如上这么多代理方法，这些代理方法，作用大部分和我们之前讲的 1NSURLSession 的代理方法类似，我们只挑几个去讲，如果需要了解其他的方法作用，可以参考楼主之前的文章。 重点讲下面这四个代理：注意，有一点需要说明，我们之前是把connection注册在我们常驻线程的runloop中了，所以以下所有的代理方法，都是在这仅有的一条常驻线程中回调。 第一个代理123456//收到响应，响应头类似相关数据- (void)connection:(NSURLConnection __unused *)connectiondidReceiveResponse:(NSURLResponse *)response&#123; self.response = response;&#125; 没什么好说的，就是收到响应后，把response赋给自己的属性。 第二个代理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//拼接获取到的数据- (void)connection:(NSURLConnection __unused *)connection didReceiveData:(NSData *)data&#123; NSUInteger length = [data length]; while (YES) &#123; NSInteger totalNumberOfBytesWritten = 0; //如果outputStream 还有空余空间 if ([self.outputStream hasSpaceAvailable]) &#123; //创建一个buffer流缓冲区，大小为data的字节数 const uint8_t *dataBuffer = (uint8_t *)[data bytes]; NSInteger numberOfBytesWritten = 0; //当写的长度小于数据的长度，在循环里 while (totalNumberOfBytesWritten &lt; (NSInteger)length) &#123; //往outputStream写数据，系统的方法，一次就写一部分，得循环写 numberOfBytesWritten = [self.outputStream write:&amp;dataBuffer[(NSUInteger)totalNumberOfBytesWritten] maxLength:(length - (NSUInteger)totalNumberOfBytesWritten)]; //如果 numberOfBytesWritten写入失败了。跳出循环 if (numberOfBytesWritten == -1) &#123; break; &#125; //加上每次写的长度 totalNumberOfBytesWritten += numberOfBytesWritten; &#125; break; &#125; //出错 if (self.outputStream.streamError) &#123; //取消connection [self.connection cancel]; //调用失败的方法 [self performSelector:@selector(connection:didFailWithError:) withObject:self.connection withObject:self.outputStream.streamError]; return; &#125; &#125; //主线程回调下载数据大小 dispatch_async(dispatch_get_main_queue(), ^&#123; self.totalBytesRead += (long long)length; if (self.downloadProgress) &#123; self.downloadProgress(length, self.totalBytesRead, self.response.expectedContentLength); &#125; &#125;);&#125; 这个方法看起来长，其实容易理解而且简单，它只做了3件事： 给outputStream拼接数据，具体如果拼接，大家可以读注释自行理解下。 如果出错则调用：connection:didFailWithError:也就是网络请求失败的代理，我们一会下面就会讲。 在主线程中回调下载进度。 第三个代理1234567891011121314151617//完成了调用- (void)connectionDidFinishLoading:(NSURLConnection __unused *)connection &#123; //从outputStream中拿到数据 NSStreamDataWrittenToMemoryStreamKey写入到内存中的流 self.responseData = [self.outputStream propertyForKey:NSStreamDataWrittenToMemoryStreamKey]; //关闭outputStream [self.outputStream close]; //如果响应数据已经有了，则outputStream置为nil if (self.responseData) &#123; self.outputStream = nil; &#125; //清空connection self.connection = nil; [self finish];&#125; 这个代理是任务完成之后调用。我们从outputStream拿到了最后下载数据，然后关闭置空了outputStream。并且清空了connection。调用了finish: 1234567891011 - (void)finish &#123; [self.lock lock]; //修改状态 self.state = AFOperationFinishedState; [self.lock unlock]; //发送完成的通知 dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingOperationDidFinishNotification object:self]; &#125;);&#125; 把当前任务状态改为已完成，并且到主线程发送任务完成的通知。，这里我们设置状态为已完成。其实调用了我们本类复写的set的方法（前面遗漏了，在这里补充）： 123456789101112131415161718192021 - (void)setState:(AFOperationState)state &#123; //判断从当前状态到另一个状态是不是合理，在加上现在是否取消。。大神的框架就是屌啊，这判断严谨的。。一层层 if (!AFStateTransitionIsValid(self.state, state, [self isCancelled])) &#123; return; &#125; [self.lock lock]; //拿到对应的父类管理当前线程周期的key NSString *oldStateKey = AFKeyPathFromOperationState(self.state); NSString *newStateKey = AFKeyPathFromOperationState(state); //发出KVO [self willChangeValueForKey:newStateKey]; [self willChangeValueForKey:oldStateKey]; _state = state; [self didChangeValueForKey:oldStateKey]; [self didChangeValueForKey:newStateKey]; [self.lock unlock];&#125; 这个方法改变state的时候，并且发送了KVO。大家了解NSOperationQueue就知道，如果对应的operation的属性finnished被设置为YES，则代表当前operation结束了，会把operation从队列中移除，并且调用operation的completionBlock。这点很重要，因为我们请求到的数据就是从这个completionBlock中传递回去的（下面接着讲这个完成Block，就能从这里对接上了）。 第四个代理123456789101112131415//请求失败的回调，在cancel connection的时候，自己也主动调用了- (void)connection:(NSURLConnection __unused *)connection didFailWithError:(NSError *)error&#123; //拿到error self.error = error; //关闭outputStream [self.outputStream close]; //如果响应数据已经有了，则outputStream置为nil if (self.responseData) &#123; self.outputStream = nil; &#125; self.connection = nil; [self finish];&#125; 唯一需要说一下的就是这里给self.error赋值，之后完成Block会根据这个error，去判断这次请求是成功还是失败。 至此我们把AFURLConnectionOperation的业务主线讲完了。 分割图.png 我们此时数据请求完了，数据在self.responseData中，接下来我们来看它是怎么回到我们手里的。我们回到AFURLConnectionOperation子类AFHTTPRequestOperation，有这么一个方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243- (void)setCompletionBlockWithSuccess:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure&#123; // completionBlock is manually nilled out in AFURLConnectionOperation to break the retain cycle.#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Warc-retain-cycles&quot;#pragma clang diagnostic ignored &quot;-Wgnu&quot; self.completionBlock = ^&#123; if (self.completionGroup) &#123; dispatch_group_enter(self.completionGroup); &#125; dispatch_async(http_request_operation_processing_queue(), ^&#123; if (self.error) &#123; if (failure) &#123; dispatch_group_async(self.completionGroup ?: http_request_operation_completion_group(), self.completionQueue ?: dispatch_get_main_queue(), ^&#123; failure(self, self.error); &#125;); &#125; &#125; else &#123; id responseObject = self.responseObject; if (self.error) &#123; if (failure) &#123; dispatch_group_async(self.completionGroup ?: http_request_operation_completion_group(), self.completionQueue ?: dispatch_get_main_queue(), ^&#123; failure(self, self.error); &#125;); &#125; &#125; else &#123; if (success) &#123; dispatch_group_async(self.completionGroup ?: http_request_operation_completion_group(), self.completionQueue ?: dispatch_get_main_queue(), ^&#123; success(self, responseObject); &#125;); &#125; &#125; &#125; if (self.completionGroup) &#123; dispatch_group_leave(self.completionGroup); &#125; &#125;); &#125;;#pragma clang diagnostic pop&#125; 一开始我们在AFHTTPRequestOperationManager中是调用过这个方法的： 1[operation setCompletionBlockWithSuccess:success failure:failure]; 我们在把成功和失败的Block传给了这个方法。 这个方法也很好理解，就是设置我们之前提到过得completionBlock，当自己数据请求完成，就会调用这个Block。然后我们在这个Block中调用传过来的成功或者失败的Block。如果error为空，说明请求成功，把数据传出去，否则为失败，把error信息传出。 这里也类似AF3.x，可以自定义一个完成组和完成队列。数据可以在我们自定义的完成组和队列中回调出去。 除此之外，还有一个有意思的地方： 1234#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Warc-retain-cycles&quot;#pragma clang diagnostic ignored &quot;-Wgnu&quot;#pragma clang diagnostic pop 之前我们说过，这是在忽略编译器的一些警告。 -Wgnu就不说了，是忽略？：。 值得提下的是-Warc-retain-cycles，这里忽略了循环引用的警告。我们仔细看看就知道self持有了completionBlock，而completionBlock内部持有self。这里确实循环引用了。那么AF是如何解决这个循环引用的呢？ 我们在回到AFURLConnectionOperation，还有一个方法我们之前没讲到，它复写了setCompletionBlock这个方法。 12345678910111213141516171819202122232425262728293031//复写setCompletionBlock- (void)setCompletionBlock:(void (^)(void))block &#123; [self.lock lock]; if (!block) &#123; [super setCompletionBlock:nil]; &#125; else &#123; __weak __typeof(self)weakSelf = self; [super setCompletionBlock:^ &#123; __strong __typeof(weakSelf)strongSelf = weakSelf;#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wgnu&quot; //看有没有自定义的完成组，否则用AF的组 dispatch_group_t group = strongSelf.completionGroup ?: url_request_operation_completion_group(); //看有没有自定义的完成queue，否则用主队列 dispatch_queue_t queue = strongSelf.completionQueue ?: dispatch_get_main_queue();#pragma clang diagnostic pop //调用设置的Block,在这个组和队列中 dispatch_group_async(group, queue, ^&#123; block(); &#125;); //结束时候置nil，防止循环引用 dispatch_group_notify(group, url_request_operation_completion_queue(), ^&#123; [strongSelf setCompletionBlock:nil]; &#125;); &#125;]; &#125; [self.lock unlock];&#125; 注意，它在我们设置的block调用结束的时候，主动的调用: 1[strongSelf setCompletionBlock:nil]; 把Block置空，这样循环引用不复存在了。 好像我们还遗漏了一个东西，就是返回的数据做类型的解析。其实还真不是楼主故意这样东一块西一块的，AF2.x有些代码确实是这样零散。。当然仅仅是相对3.x来说。AFNetworking整体代码质量，以及架构思想已经强过绝大多数开源项目太多了。。这一点毋庸置疑。 我们来接着看看数据解析在什么地方被调用的把：12345678910111213- (id)responseObject &#123; [self.lock lock]; if (!_responseObject &amp;&amp; [self isFinished] &amp;&amp; !self.error) &#123; NSError *error = nil; //做数据解析 self.responseObject = [self.responseSerializer responseObjectForResponse:self.response data:self.responseData error:&amp;error]; if (error) &#123; self.responseSerializationError = error; &#125; &#125; [self.lock unlock]; return _responseObject;&#125; AFHTTPRequestOperation 复写了 responseObject 的get方法，并且把数据按照我们需要的类型（json、xml等等）进行解析。至于如何解析，可以参考楼主之前AF系列的文章，这里就不赘述了。 有些小伙伴可能会说，楼主你是不是把AFSecurityPolicy给忘了啊，其实并没有，它被在 AFURLConnectionOperation中https认证的代理中被调用，我们之前系列的文章已经讲的非常详细了，感兴趣的朋友可以翻到前面的文章去看看。 至此，AF2.x整个业务流程就结束了。 接下来，我们来总结总结AF2.x整个业务请求的流程： AF2.x请求流程图.png PS.图片是用page画的，第一次用，画了半个小时有没有…有没有感受到楼主很走心…最近发现写文图太少了，以后会多配图的。来加深大家的理解… 如上图，我们来梳理一下整个流程： 最上层的是AFHTTPRequestOperationManager,我们调用它进行get、post等等各种类型的网络请求 然后它去调用AFURLRequestSerialization做request参数拼装。然后生成了一个AFHTTPRequestOperation实例，并把request交给它。然后把AFHTTPRequestOperation添加到一个NSOperationQueue中。 接着AFHTTPRequestOperation拿到request后，会去调用它的父类AFURLConnectionOperation的初始化方法，并且把相关参数交给它，除此之外，当父类完成数据请求后，它调用了AFURLResponseSerialization把数据解析成我们需要的格式（json、XML等等）。 最后就是我们AF最底层的类AFURLConnectionOperation，它去数据请求，并且如果是https请求，会在请求的相关代理中，调用AFSecurityPolicy做https认证。最后请求到的数据返回。 这就是AF2.x整个做网络请求的业务流程。 我们来解决解决之前遗留下来的问题：为什么AF2.x需要一条常驻线程？首先如果我们用NSURLConnection，我们为了获取请求结果有以下三种选择： 在主线程调异步接口 每一个请求用一个线程，对应一个runloop，然后等待结果回调。 只用一条线程，一个runloop，所有结果回调在这个线程上。 很显然AF选择的是第3种方式，创建了一条常驻线程专门处理所有请求的回调事件，这个模型跟nodejs有点类似，我们来讨论讨论不选择另外两种方式的原因： 试想如果我们所有的请求都在主线程中异步调用，好像没什么不可以？那为什么AF不这么做呢…在这里有两点原因（楼主个人总结的，有不同意见，欢迎讨论）： 第一是，如果我们放到主线程去做，势必要这么写： 1[[NSURLConnection alloc] initWithRequest:request delegate:self startImmediately:YES] 这样NSURLConnection的回调会被放在主线程中NSDefaultRunLoopMode中，这样我们在其它类似UITrackingRunLoopMode模式下，我们是得不到网络请求的结果的，这显然不是我们想要的，那么我们势必需要调用： 1[connection scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes]; 把它加入`NSRunLoopCommonModes中，试想如果有大量的网络请求，同时回调回来，就会影响我们的UI体验了。 另外一点原因是，如果我们请求数据返回，势必要进行数据解析，解析成我们需要的格式，那么这些解析都在主线程中做，给主线程增加额外的负担。又或者我们回调回来开辟一个新的线程去做数据解析，那么我们有n个请求回来开辟n条线程带来的性能损耗，以及线程间切换带来的损耗，是不是一笔更大的开销。 所以综述两点原因，我们并不适合在主线程中回调。 我们一开始就开辟n条线程去做请求，然后设置runloop保活住线程，等待结果回调。 其实看到这，大家想想都觉得这个方法很傻，为了等待不确定的请求结果，阻塞住线程，白白浪费n条线程的开销。 综上所述，这就是AF2.x需要一条常驻线程的原因了。 至此我们把AF2.x核心流程分析完了。 分割图.png 接着到我们本系列一个最终总结了: AFNetworking到底做了什么？ 相信如果从头看到尾的小伙伴，心里都有了一个属于自己的答案。其实在楼主心里，实在不想去总结它，因为AFNetworking中凝聚了太多大牛的思想，根本不是你看完几遍源码所能去议论的。但是想想也知道，如果我说不总结，估计有些看到这的朋友杀人的心都有… 所以我还是赶鸭子上架，来总结总结它。 AFNetworking的作用总结：一. 首先我们需要明确一点的是：相对于AFNetworking2.x，AFNetworking3.x确实没那么有用了。AFNetworking之前的核心作用就是为了帮我们去调度所有的请求。但是最核心地方却被苹果的NSURLSession给借鉴过去了，嗯…是借鉴。这些请求的调度，现在完全由NSURLSession给做了，AFNetworking3.x的作用被大大的削弱了。二. 但是除此之外，其实它还是很有用的： 首先它帮我们做了各种请求方式request的拼接。想想如果我们用NSURLSession，我们去做请求，是不是还得自己去考虑各种请求方式下，拼接参数的问题。 它还帮我们做了一些公用参数（session级别的），和一些私用参数（task级别的）的分离。它用Block的形式，支持我们自定义一些代理方法，如果没有实现的话，AF还帮我们做了一些默认的处理。而如果我们用NSURLSession的话，还得参照AF这么一套代理转发的架构模式去封装。 它帮我们做了自定义的https认证处理。看过楼主之前那篇AFNetworking之于https认证的朋友就知道，如果我们自己用NSURLSession实现那几种自定义认证，需要多写多少代码… 对于请求到的数据，AF帮我们做了各种格式的数据解析，并且支持我们设置自定义的code范围，自定义的数据方式。如果不在这些范围中，则直接调用失败block。如果用NSURLSession呢？这些都自己去写吧…（你要是做过各种除json外其他的数据解析,就会知道这里面坑有多少…） 对于成功和失败的回调处理。AF帮我们在数据请求到，到回调给用户之间，做了各种错误的判断，保证了成功和失败的回调，界限清晰。在这过程中，AF帮我们做了太多的容错处理，而NSURLSession呢？只给了一个完成的回调，我们得多做多少判断，才能拿到一个确定能正常显示的数据？ …… … 光是这些网络请求的业务逻辑，AF帮我们做的就太多太多，当然还远不仅于此。它用凝聚着许多大牛的经验方式，帮我在有些处理中做了最优的选择，比如我们之前说到的，回调线程数设置为1的问题…帮我们绕开了很多的坑，比如系统内部并行创建task导致id不唯一等等… 三. 而如果我们需要一些UIKit的扩展，AF则提供了最稳定，而且最优化实现方式： 就比如之前说到过得那个状态栏小菊花，如果是我们自己去做，得多写多少代码，而且实现的还没有AF那样质量高。 又或者AFImageDownloader，它对于组图片之间的下载协调，以及缓存使用的之间线程调度。对于线程，锁，以及性能各方面权衡，找出最优化的处理方式，试问小伙伴们自己基于NSURLSession去写，能到做几分… 所以最后的结论是：AFNetworking虽然变弱了，但是它还是很有用的。用它真的不仅仅是习惯，而是因为它确实帮我们做了太多。]]></content>
      <categories>
        <category>第三方源码</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AFNetworking（二）]]></title>
    <url>%2F2018%2F09%2F17%2FAFNetworking%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[[转自 涂耀辉]https://www.jianshu.com/p/f32bd79233da 接着上一篇的内容往下讲，如果没看过上一篇内容可以点这：AFNetworking到底做了什么? 之前我们讲到NSUrlSession代理这一块: 代理8：12345678910111213141516171819202122232425/* task完成之后的回调，成功和失败都会回调这里 函数讨论： 注意这里的error不会报告服务期端的error，他表示的是客户端这边的eroor，比如无法解析hostname或者连不上host主机。 */- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)taskdidCompleteWithError:(NSError *)error&#123; //根据task去取我们一开始创建绑定的delegate AFURLSessionManagerTaskDelegate *delegate = [self delegateForTask:task]; // delegate may be nil when completing a task in the background if (delegate) &#123; //把代理转发给我们绑定的delegate [delegate URLSession:session task:task didCompleteWithError:error]; //转发完移除delegate [self removeDelegateForTask:task]; &#125; //自定义Block回调 if (self.taskDidComplete) &#123; self.taskDidComplete(session, task, error); &#125; &#125; 这个代理就是task完成了的回调，方法内做了下面这几件事： 在这里我们拿到了之前和这个task对应绑定的AF的delegate: 12345678910 - (AFURLSessionManagerTaskDelegate *)delegateForTask:(NSURLSessionTask *)task &#123; NSParameterAssert(task); AFURLSessionManagerTaskDelegate *delegate = nil; [self.lock lock]; delegate = self.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)]; [self.lock unlock]; return delegate;&#125; 去转发了调用了AF代理的方法。这个等我们下面讲完NSUrlSession的代理之后会详细说。 然后把这个AF的代理和task的绑定解除了，并且移除了相关的progress和通知： 12345678910 - (void)removeDelegateForTask:(NSURLSessionTask *)task &#123; NSParameterAssert(task); //移除跟AF代理相关的东西 AFURLSessionManagerTaskDelegate *delegate = [self delegateForTask:task]; [self.lock lock]; [delegate cleanUpProgressForTask:task]; [self removeNotificationObserverForTask:task]; [self.mutableTaskDelegatesKeyedByTaskIdentifier removeObjectForKey:@(task.taskIdentifier)]; [self.lock unlock];&#125; 调用了自定义的Blcok:self.taskDidComplete(session, task, error);代码还是很简单的，至于这个通知，我们等会再来补充吧。 NSURLSessionDataDelegate:代理9：123456789101112131415161718//收到服务器响应后调用- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTaskdidReceiveResponse:(NSURLResponse *)response completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler&#123; //设置默认为继续进行 NSURLSessionResponseDisposition disposition = NSURLSessionResponseAllow; //自定义去设置 if (self.dataTaskDidReceiveResponse) &#123; disposition = self.dataTaskDidReceiveResponse(session, dataTask, response); &#125; if (completionHandler) &#123; completionHandler(disposition); &#125;&#125; 官方文档翻译如下： 函数作用：告诉代理，该data task获取到了服务器端传回的最初始回复（response）。注意其中的completionHandler这个block，通过传入一个类型为NSURLSessionResponseDisposition的变量来决定该传输任务接下来该做什么：NSURLSessionResponseAllow 该task正常进行NSURLSessionResponseCancel 该task会被取消NSURLSessionResponseBecomeDownload 会调用URLSession:dataTask:didBecomeDownloadTask:方法来新建一个download task以代替当前的data taskNSURLSessionResponseBecomeStream 转成一个StreamTask 函数讨论：该方法是可选的，除非你必须支持“multipart/x-mixed-replace”类型的content-type。因为如果你的request中包含了这种类型的content-type，服务器会将数据分片传回来，而且每次传回来的数据会覆盖之前的数据。每次返回新的数据时，session都会调用该函数，你应该在这个函数中合理地处理先前的数据，否则会被新数据覆盖。如果你没有提供该方法的实现，那么session将会继续任务，也就是说会覆盖之前的数据。 总结一下： 当你把添加content-type的类型为multipart/x-mixed-replace那么服务器的数据会分片的传回来。然后这个方法是每次接受到对应片响应的时候会调被调用。你可以去设置上述4种对这个task的处理。 如果我们实现了自定义Block，则调用一下，不然就用默认的NSURLSessionResponseAllow方式。 代理10：12345678910111213141516//上面的代理如果设置为NSURLSessionResponseBecomeDownload，则会调用这个方法- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTaskdidBecomeDownloadTask:(NSURLSessionDownloadTask *)downloadTask&#123; //因为转变了task，所以要对task做一个重新绑定 AFURLSessionManagerTaskDelegate *delegate = [self delegateForTask:dataTask]; if (delegate) &#123; [self removeDelegateForTask:dataTask]; [self setDelegate:delegate forTask:downloadTask]; &#125; //执行自定义Block if (self.dataTaskDidBecomeDownloadTask) &#123; self.dataTaskDidBecomeDownloadTask(session, dataTask, downloadTask); &#125;&#125; 这个代理方法是被上面的代理方法触发的，作用就是新建一个downloadTask，替换掉当前的dataTask。所以我们在这里做了AF自定义代理的重新绑定操作。 调用自定义Block。 按照顺序来，其实还有个AF没有去实现的代理： 123//AF没实现的代理- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTaskdidBecomeStreamTask:(NSURLSessionStreamTask *)streamTask; 这个也是之前的那个代理，设置为NSURLSessionResponseBecomeStream则会调用到这个代理里来。会新生成一个NSURLSessionStreamTask来替换掉之前的dataTask。 代理11：1234567891011//当我们获取到数据就会调用，会被反复调用，请求到的数据就在这被拼装完整- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data&#123; AFURLSessionManagerTaskDelegate *delegate = [self delegateForTask:dataTask]; [delegate URLSession:session dataTask:dataTask didReceiveData:data]; if (self.dataTaskDidReceiveData) &#123; self.dataTaskDidReceiveData(session, dataTask, data); &#125;&#125; 这个方法和上面didCompleteWithError算是NSUrlSession的代理中最重要的两个方法了。 我们转发了这个方法到AF的代理中去，所以数据的拼接都是在AF的代理中进行的。这也是情理中的，毕竟每个响应数据都是对应各个task，各个AF代理的。在AFURLSessionManager都只是做一些公共的处理。 代理12：12345678910111213141516/*当task接收到所有期望的数据后，session会调用此代理方法。*/- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask willCacheResponse:(NSCachedURLResponse *)proposedResponse completionHandler:(void (^)(NSCachedURLResponse *cachedResponse))completionHandler&#123; NSCachedURLResponse *cachedResponse = proposedResponse; if (self.dataTaskWillCacheResponse) &#123; cachedResponse = self.dataTaskWillCacheResponse(session, dataTask, proposedResponse); &#125; if (completionHandler) &#123; completionHandler(cachedResponse); &#125;&#125; 官方文档翻译如下： 函数作用：询问data task或上传任务（upload task）是否缓存response。 函数讨论：当task接收到所有期望的数据后，session会调用此代理方法。如果你没有实现该方法，那么就会使用创建session时使用的configuration对象决定缓存策略。这个代理方法最初的目的是为了阻止缓存特定的URLs或者修改NSCacheURLResponse对象相关的userInfo字典。该方法只会当request决定缓存response时候调用。作为准则，responses只会当以下条件都成立的时候返回缓存：该request是HTTP或HTTPS URL的请求（或者你自定义的网络协议，并且确保该协议支持缓存）确保request请求是成功的（返回的status code为200-299）返回的response是来自服务器端的，而非缓存中本身就有的提供的NSURLRequest对象的缓存策略要允许进行缓存服务器返回的response中与缓存相关的header要允许缓存该response的大小不能比提供的缓存空间大太多（比如你提供了一个磁盘缓存，那么response大小一定不能比磁盘缓存空间还要大5%） 总结一下就是一个用来缓存response的方法，方法中调用了我们自定义的Block，自定义一个response用来缓存。 NSURLSessionDownloadDelegate代理13：1234567891011121314151617181920212223242526272829//下载完成的时候调用- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTaskdidFinishDownloadingToURL:(NSURL *)location&#123; AFURLSessionManagerTaskDelegate *delegate = [self delegateForTask:downloadTask]; //这个是session的，也就是全局的，后面的个人代理也会做同样的这件事 if (self.downloadTaskDidFinishDownloading) &#123; //调用自定义的block拿到文件存储的地址 NSURL *fileURL = self.downloadTaskDidFinishDownloading(session, downloadTask, location); if (fileURL) &#123; delegate.downloadFileURL = fileURL; NSError *error = nil; //从临时的下载路径移动至我们需要的路径 [[NSFileManager defaultManager] moveItemAtURL:location toURL:fileURL error:&amp;error]; //如果移动出错 if (error) &#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFURLSessionDownloadTaskDidFailToMoveFileNotification object:downloadTask userInfo:error.userInfo]; &#125; return; &#125; &#125; //转发代理 if (delegate) &#123; [delegate URLSession:session downloadTask:downloadTask didFinishDownloadingToURL:location]; &#125;&#125; 这个方法和之前的两个方法： 12- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)taskdidCompleteWithError:(NSError *)error;- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data; 总共就这3个方法，被转调到AF自定义delegate中。 方法做了什么看注释应该很简单，就不赘述了。 代理14：1234567891011//周期性地通知下载进度调用- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWrittentotalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite&#123; if (self.downloadTaskDidWriteData) &#123; self.downloadTaskDidWriteData(session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite); &#125;&#125; 简单说一下这几个参数:bytesWritten 表示自上次调用该方法后，接收到的数据字节数totalBytesWritten表示目前已经接收到的数据字节数totalBytesExpectedToWrite 表示期望收到的文件总字节数，是由Content-Length header提供。如果没有提供，默认是NSURLSessionTransferSizeUnknown。 代理15：1234567891011//当下载被取消或者失败后重新恢复下载时调用- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask didResumeAtOffset:(int64_t)fileOffsetexpectedTotalBytes:(int64_t)expectedTotalBytes&#123; //交给自定义的Block去调用 if (self.downloadTaskDidResume) &#123; self.downloadTaskDidResume(session, downloadTask, fileOffset, expectedTotalBytes); &#125;&#125; 官方文档翻译： 函数作用：告诉代理，下载任务重新开始下载了。 函数讨论：如果一个正在下载任务被取消或者失败了，你可以请求一个resumeData对象（比如在userInfo字典中通过NSURLSessionDownloadTaskResumeData这个键来获取到resumeData）并使用它来提供足够的信息以重新开始下载任务。随后，你可以使用resumeData作为downloadTaskWithResumeData:或downloadTaskWithResumeData:completionHandler:的参数。当你调用这些方法时，你将开始一个新的下载任务。一旦你继续下载任务，session会调用它的代理方法URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:其中的downloadTask参数表示的就是新的下载任务，这也意味着下载重新开始了。 总结一下： 其实这个就是用来做断点续传的代理方法。可以在下载失败的时候，拿到我们失败的拼接的部分resumeData，然后用去调用downloadTaskWithResumeData：就会调用到这个代理方法来了。 其中注意：fileOffset这个参数，如果文件缓存策略或者最后文件更新日期阻止重用已经存在的文件内容，那么该值为0。否则，该值表示当前已经下载data的偏移量。 方法中仅仅调用了downloadTaskDidResume自定义Block。 至此NSUrlSesssion的delegate讲完了。大概总结下： 每个代理方法对应一个我们自定义的Block,如果Block被赋值了，那么就调用它。 在这些代理方法里，我们做的处理都是相对于这个sessionManager所有的request的。是公用的处理。 转发了3个代理方法到AF的deleagate中去了，AF中的deleagate是需要对应每个task去私有化处理的。 分割图.png 接下来我们来看转发到AF的deleagate，一共3个方法： AF代理1：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788//AF实现的代理！被从urlsession那转发到这- (void)URLSession:(__unused NSURLSession *)session task:(NSURLSessionTask *)taskdidCompleteWithError:(NSError *)error&#123; #pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wgnu&quot; //1）强引用self.manager，防止被提前释放；因为self.manager声明为weak,类似Block __strong AFURLSessionManager *manager = self.manager; __block id responseObject = nil; //用来存储一些相关信息，来发送通知用的 __block NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; //存储responseSerializer响应解析对象 userInfo[AFNetworkingTaskDidCompleteResponseSerializerKey] = manager.responseSerializer; //Performance Improvement from #2672 //注意这行代码的用法，感觉写的很Nice...把请求到的数据data传出去，然后就不要这个值了释放内存 NSData *data = nil; if (self.mutableData) &#123; data = [self.mutableData copy]; //We no longer need the reference, so nil it out to gain back some memory. self.mutableData = nil; &#125; //继续给userinfo填数据 if (self.downloadFileURL) &#123; userInfo[AFNetworkingTaskDidCompleteAssetPathKey] = self.downloadFileURL; &#125; else if (data) &#123; userInfo[AFNetworkingTaskDidCompleteResponseDataKey] = data; &#125; //错误处理 if (error) &#123; userInfo[AFNetworkingTaskDidCompleteErrorKey] = error; //可以自己自定义完成组 和自定义完成queue,完成回调 dispatch_group_async(manager.completionGroup ?: url_session_manager_completion_group(), manager.completionQueue ?: dispatch_get_main_queue(), ^&#123; if (self.completionHandler) &#123; self.completionHandler(task.response, responseObject, error); &#125; //主线程中发送完成通知 dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo]; &#125;); &#125;); &#125; else &#123; //url_session_manager_processing_queue AF的并行队列 dispatch_async(url_session_manager_processing_queue(), ^&#123; NSError *serializationError = nil; //解析数据 responseObject = [manager.responseSerializer responseObjectForResponse:task.response data:data error:&amp;serializationError]; //如果是下载文件，那么responseObject为下载的路径 if (self.downloadFileURL) &#123; responseObject = self.downloadFileURL; &#125; //写入userInfo if (responseObject) &#123; userInfo[AFNetworkingTaskDidCompleteSerializedResponseKey] = responseObject; &#125; //如果解析错误 if (serializationError) &#123; userInfo[AFNetworkingTaskDidCompleteErrorKey] = serializationError; &#125; //回调结果 dispatch_group_async(manager.completionGroup ?: url_session_manager_completion_group(), manager.completionQueue ?: dispatch_get_main_queue(), ^&#123; if (self.completionHandler) &#123; self.completionHandler(task.response, responseObject, serializationError); &#125; dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo]; &#125;); &#125;); &#125;); &#125;#pragma clang diagnostic pop&#125; 这个方法是NSUrlSession任务完成的代理方法中，主动调用过来的。配合注释，应该代码很容易读，这个方法大概做了以下几件事： 生成了一个存储这个task相关信息的字典：userInfo，这个字典是用来作为发送任务完成的通知的参数。 判断了参数error的值，来区分请求成功还是失败。 如果成功则在一个AF的并行queue中，去做数据解析等后续操作： 123456789static dispatch_queue_t url_session_manager_processing_queue() &#123; static dispatch_queue_t af_url_session_manager_processing_queue; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; af_url_session_manager_processing_queue = dispatch_queue_create(&quot;com.alamofire.networking.session.manager.processing&quot;, DISPATCH_QUEUE_CONCURRENT); &#125;); return af_url_session_manager_processing_queue;&#125; 注意AF的优化的点，虽然代理回调是串行的(不明白可以见本文最后)。但是数据解析这种费时操作，确是用并行线程来做的。 然后根据我们一开始设置的responseSerializer来解析data。如果解析成功，调用成功的回调，否则调用失败的回调。我们重点来看看返回数据解析这行： 1responseObject = [manager.responseSerializer responseObjectForResponse:task.response data:data error:&amp;serializationError]; 我们点进去看看： 123456 @protocol AFURLResponseSerialization &lt;NSObject, NSSecureCoding, NSCopying&gt; - (nullable id)responseObjectForResponse:(nullable NSURLResponse *)response data:(nullable NSData *)data error:(NSError * _Nullable __autoreleasing *)error NS_SWIFT_NOTHROW;@end 原来就是这么一个协议方法，各种类型的responseSerializer类，都是遵守这个协议方法，实现了一个把我们请求到的data转换为我们需要的类型的数据的方法。至于各种类型的responseSerializer如何解析数据，我们到代理讲完再来补充。 这边还做了一个判断，如果自定义了GCD完成组completionGroup和完成队列的话completionQueue，会在加入这个组和在队列中回调Block。否则默认的是AF的创建的组： 123456789static dispatch_group_t url_session_manager_completion_group() &#123; static dispatch_group_t af_url_session_manager_completion_group; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; af_url_session_manager_completion_group = dispatch_group_create(); &#125;); return af_url_session_manager_completion_group;&#125; 和主队列回调。AF没有用这个GCD组做任何处理，只是提供这个接口，让我们有需求的自行调用处理。如果有对多个任务完成度的监听，可以自行处理。而队列的话，如果你不需要回调主线程，可以自己设置一个回调队列。 回到主线程，发送了任务完成的通知： 123dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo]; &#125;); 这个通知这回AF有用到了，在我们对UIKit的扩展中，用到了这个通知。 AF代理2：1234567- (void)URLSession:(__unused NSURLSession *)session dataTask:(__unused NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data&#123; //拼接数据 [self.mutableData appendData:data];&#125; 同样被NSUrlSession代理转发到这里，拼接了需要回调的数据。 AF代理3：1234567891011121314151617181920212223- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTaskdidFinishDownloadingToURL:(NSURL *)location&#123; NSError *fileManagerError = nil; self.downloadFileURL = nil; //AF代理的自定义Block if (self.downloadTaskDidFinishDownloading) &#123; //得到自定义下载路径 self.downloadFileURL = self.downloadTaskDidFinishDownloading(session, downloadTask, location); if (self.downloadFileURL) &#123; //把下载路径移动到我们自定义的下载路径 [[NSFileManager defaultManager] moveItemAtURL:location toURL:self.downloadFileURL error:&amp;fileManagerError]; //错误发通知 if (fileManagerError) &#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFURLSessionDownloadTaskDidFailToMoveFileNotification object:downloadTask userInfo:fileManagerError.userInfo]; &#125; &#125; &#125;&#125; 下载成功了被NSUrlSession代理转发到这里，这里有个地方需要注意下： 之前的NSUrlSession代理和这里都移动了文件到下载路径，而NSUrlSession代理的下载路径是所有request公用的下载路径，一旦设置，所有的request都会下载到之前那个路径。 而这个是对应的每个task的，每个task可以设置各自下载路径,还记得AFHttpManager的download方法么 1234 [manager downloadTaskWithRequest:resquest progress:nil destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) &#123; return path;&#125; completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) &#123;&#125;]; 这个地方return的path就是对应的这个代理方法里的path，我们调用最终会走到这么一个方法： 12345678910111213141516171819202122232425 - (void)addDelegateForDownloadTask:(NSURLSessionDownloadTask *)downloadTask progress:(void (^)(NSProgress *downloadProgress)) downloadProgressBlock destination:(NSURL * (^)(NSURL *targetPath, NSURLResponse *response))destination completionHandler:(void (^)(NSURLResponse *response, NSURL *filePath, NSError *error))completionHandler&#123; AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] init]; delegate.manager = self; delegate.completionHandler = completionHandler; //返回地址的Block if (destination) &#123; //有点绕，就是把一个block赋值给我们代理的downloadTaskDidFinishDownloading，这个Block里的内部返回也是调用Block去获取到的，这里面的参数都是AF代理传过去的。 delegate.downloadTaskDidFinishDownloading = ^NSURL * (NSURLSession * __unused session, NSURLSessionDownloadTask *task, NSURL *location) &#123; //把Block返回的地址返回 return destination(location, task.response); &#125;; &#125; downloadTask.taskDescription = self.taskDescriptionForSessionTasks; [self setDelegate:delegate forTask:downloadTask]; delegate.downloadProgressBlock = downloadProgressBlock;&#125; 清楚的可以看到地址被赋值给AF的Block了。 至此AF的代理也讲完了，数据或错误信息随着AF代理成功失败回调，回到了用户的手中。 分割图.png 接下来我们来补充之前AFURLResponseSerialization这一块是如何解析数据的： AFURLResponseSerialization.png 如图所示，AF用来解析数据的一共上述这些方法。第一个实际是一个协议方法，协议方法如下： 1234567@protocol AFURLResponseSerialization &lt;NSObject, NSSecureCoding, NSCopying&gt;- (nullable id)responseObjectForResponse:(nullable NSURLResponse *)response data:(nullable NSData *)data error:(NSError * _Nullable __autoreleasing *)error;@end 而后面6个类都是遵守这个协议方法，去做数据解析。这地方可以再次感受一下AF的设计模式…接下来我们就来主要看看这些类对这个协议方法的实现： AFHTTPResponseSerializer：1234567- (id)responseObjectForResponse:(NSURLResponse *)response data:(NSData *)data error:(NSError *__autoreleasing *)error&#123; [self validateResponse:(NSHTTPURLResponse *)response data:data error:error]; return data;&#125; 方法调用了一个另外的方法之后，就把data返回来了，我们继续往里看这个方法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// 判断是不是可接受类型和可接受code，不是则填充error- (BOOL)validateResponse:(NSHTTPURLResponse *)response data:(NSData *)data error:(NSError * __autoreleasing *)error&#123; //response是否合法标识 BOOL responseIsValid = YES; //验证的error NSError *validationError = nil; //如果存在且是NSHTTPURLResponse if (response &amp;&amp; [response isKindOfClass:[NSHTTPURLResponse class]]) &#123; //主要判断自己能接受的数据类型和response的数据类型是否匹配， //如果有接受数据类型，如果不匹配response，而且响应类型不为空，数据长度不为0 if (self.acceptableContentTypes &amp;&amp; ![self.acceptableContentTypes containsObject:[response MIMEType]] &amp;&amp; !([response MIMEType] == nil &amp;&amp; [data length] == 0)) &#123; //进入If块说明解析数据肯定是失败的，这时候要把解析错误信息放到error里。 //如果数据长度大于0，而且有响应url if ([data length] &gt; 0 &amp;&amp; [response URL]) &#123; //错误信息字典，填充一些错误信息 NSMutableDictionary *mutableUserInfo = [@&#123; NSLocalizedDescriptionKey: [NSString stringWithFormat:NSLocalizedStringFromTable(@&quot;Request failed: unacceptable content-type: %@&quot;, @&quot;AFNetworking&quot;, nil), [response MIMEType]], NSURLErrorFailingURLErrorKey:[response URL], AFNetworkingOperationFailingURLResponseErrorKey: response, &#125; mutableCopy]; if (data) &#123; mutableUserInfo[AFNetworkingOperationFailingURLResponseDataErrorKey] = data; &#125; //生成错误 validationError = AFErrorWithUnderlyingError([NSError errorWithDomain:AFURLResponseSerializationErrorDomain code:NSURLErrorCannotDecodeContentData userInfo:mutableUserInfo], validationError); &#125; //返回标识 responseIsValid = NO; &#125; //判断自己可接受的状态吗 //如果和response的状态码不匹配，则进入if块 if (self.acceptableStatusCodes &amp;&amp; ![self.acceptableStatusCodes containsIndex:(NSUInteger)response.statusCode] &amp;&amp; [response URL]) &#123; //填写错误信息字典 NSMutableDictionary *mutableUserInfo = [@&#123; NSLocalizedDescriptionKey: [NSString stringWithFormat:NSLocalizedStringFromTable(@&quot;Request failed: %@ (%ld)&quot;, @&quot;AFNetworking&quot;, nil), [NSHTTPURLResponse localizedStringForStatusCode:response.statusCode], (long)response.statusCode], NSURLErrorFailingURLErrorKey:[response URL], AFNetworkingOperationFailingURLResponseErrorKey: response, &#125; mutableCopy]; if (data) &#123; mutableUserInfo[AFNetworkingOperationFailingURLResponseDataErrorKey] = data; &#125; //生成错误 validationError = AFErrorWithUnderlyingError([NSError errorWithDomain:AFURLResponseSerializationErrorDomain code:NSURLErrorBadServerResponse userInfo:mutableUserInfo], validationError); //返回标识 responseIsValid = NO; &#125; &#125; //给我们传过来的错误指针赋值 if (error &amp;&amp; !responseIsValid) &#123; *error = validationError; &#125; //返回是否错误标识 return responseIsValid;&#125; 看注释应该很容易明白这个方法有什么作用。简单来说，这个方法就是来判断返回数据与咱们使用的解析器是否匹配，需要解析的状态码是否匹配。如果错误，则填充错误信息，并且返回NO，否则返回YES，错误信息为nil。 其中里面出现了两个属性值，一个acceptableContentTypes，一个acceptableStatusCodes，两者在初始化的时候有给默认值，我们也可以去自定义，但是如果给acceptableContentTypes定义了不匹配的类型，那么数据仍旧会解析错误。 而AFHTTPResponseSerializer仅仅是调用验证方法，然后就返回了data。 AFJSONResponseSerializer：12345678910111213141516171819202122232425262728293031323334353637383940- (id)responseObjectForResponse:(NSURLResponse *)response data:(NSData *)data error:(NSError *__autoreleasing *)error&#123; //先判断是不是可接受类型和可接受code if (![self validateResponse:(NSHTTPURLResponse *)response data:data error:error]) &#123; //error为空，或者有错误，去函数里判断。 if (!error || AFErrorOrUnderlyingErrorHasCodeInDomain(*error, NSURLErrorCannotDecodeContentData, AFURLResponseSerializationErrorDomain)) &#123; //返回空 return nil; &#125; &#125; id responseObject = nil; NSError *serializationError = nil; // Workaround for behavior of Rails to return a single space for `head :ok` (a workaround for a bug in Safari), which is not interpreted as valid input by NSJSONSerialization. // See https://github.com/rails/rails/issues/1742 //如果数据为空 BOOL isSpace = [data isEqualToData:[NSData dataWithBytes:&quot; &quot; length:1]]; //不空则去json解析 if (data.length &gt; 0 &amp;&amp; !isSpace) &#123; responseObject = [NSJSONSerialization JSONObjectWithData:data options:self.readingOptions error:&amp;serializationError]; &#125; else &#123; return nil; &#125; //判断是否需要移除Null值 if (self.removesKeysWithNullValues &amp;&amp; responseObject) &#123; responseObject = AFJSONObjectByRemovingKeysWithNullValues(responseObject, self.readingOptions); &#125; //拿着json解析的error去填充错误信息 if (error) &#123; *error = AFErrorWithUnderlyingError(serializationError, *error); &#125; //返回解析结果 return responseObject;&#125; 注释写的很清楚，大概需要讲一下的是以下几个函数: 123456//1AFErrorOrUnderlyingErrorHasCodeInDomain(*error, NSURLErrorCannotDecodeContentData, AFURLResponseSerializationErrorDomain))//2AFJSONObjectByRemovingKeysWithNullValues(responseObject, self.readingOptions);//3AFErrorWithUnderlyingError(serializationError, *error); 之前注释已经写清楚了这些函数的作用，首先来看第1个： 1234567891011121314//判断是不是我们自己之前生成的错误信息，是的话返回YESstatic BOOL AFErrorOrUnderlyingErrorHasCodeInDomain(NSError *error, NSInteger code, NSString *domain) &#123; //判断错误域名和传过来的域名是否一致，错误code是否一致 if ([error.domain isEqualToString:domain] &amp;&amp; error.code == code) &#123; return YES; &#125; //如果userInfo的NSUnderlyingErrorKey有值，则在判断一次。 else if (error.userInfo[NSUnderlyingErrorKey]) &#123; return AFErrorOrUnderlyingErrorHasCodeInDomain(error.userInfo[NSUnderlyingErrorKey], code, domain); &#125; return NO;&#125; 这里可以注意，我们这里传过去的code和domain两个参数分别为NSURLErrorCannotDecodeContentData、AFURLResponseSerializationErrorDomain，这两个参数是我们之前判断response可接受类型和code时候自己去生成错误的时候填写的。 第二个： 12345678910111213141516171819202122232425262728293031static id AFJSONObjectByRemovingKeysWithNullValues(id JSONObject, NSJSONReadingOptions readingOptions) &#123; //分数组和字典 if ([JSONObject isKindOfClass:[NSArray class]]) &#123; //生成一个数组，只需要JSONObject.count个，感受到大神写代码的严谨态度了吗... NSMutableArray *mutableArray = [NSMutableArray arrayWithCapacity:[(NSArray *)JSONObject count]]; for (id value in (NSArray *)JSONObject) &#123; //调用自己 [mutableArray addObject:AFJSONObjectByRemovingKeysWithNullValues(value, readingOptions)]; &#125; //看我们解析类型是mutable还是非muatable,返回mutableArray或者array return (readingOptions &amp; NSJSONReadingMutableContainers) ? mutableArray : [NSArray arrayWithArray:mutableArray]; &#125; else if ([JSONObject isKindOfClass:[NSDictionary class]]) &#123; NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:JSONObject]; for (id &lt;NSCopying&gt; key in [(NSDictionary *)JSONObject allKeys]) &#123; id value = (NSDictionary *)JSONObject[key]; //value空则移除 if (!value || [value isEqual:[NSNull null]]) &#123; [mutableDictionary removeObjectForKey:key]; &#125; else if ([value isKindOfClass:[NSArray class]] || [value isKindOfClass:[NSDictionary class]]) &#123; //如果数组还是去调用自己 mutableDictionary[key] = AFJSONObjectByRemovingKeysWithNullValues(value, readingOptions); &#125; &#125; return (readingOptions &amp; NSJSONReadingMutableContainers) ? mutableDictionary : [NSDictionary dictionaryWithDictionary:mutableDictionary]; &#125; return JSONObject;&#125; 方法主要还是通过递归的形式实现。比较简单。 第三个： 12345678910111213static NSError * AFErrorWithUnderlyingError(NSError *error, NSError *underlyingError) &#123; if (!error) &#123; return underlyingError; &#125; if (!underlyingError || error.userInfo[NSUnderlyingErrorKey]) &#123; return error; &#125; NSMutableDictionary *mutableUserInfo = [error.userInfo mutableCopy]; mutableUserInfo[NSUnderlyingErrorKey] = underlyingError; return [[NSError alloc] initWithDomain:error.domain code:error.code userInfo:mutableUserInfo];&#125; 方法主要是把json解析的错误，赋值给我们需要返回给用户的error上。比较简单，小伙伴们自己看看就好。 至此，AFJSONResponseSerializer就讲完了。而我们ResponseSerialize还有一些其他的类型解析，大家可以自行去阅读，代码还是很容易读的，在这里就不浪费篇幅去讲了。 分割图.png 在AFURLSessionManager中，有这么一个类：_AFURLSessionTaskSwizzling。这个类大概的作用就是替换掉NSUrlSession中的resume和suspend方法。正常处理原有逻辑的同时，多发送一个通知，以下是我们需要替换的新方法： 1234567891011121314151617181920//被替换掉的方法，只要有TASK开启或者暂停，都会执行- (void)af_resume &#123; NSAssert([self respondsToSelector:@selector(state)], @&quot;Does not respond to state&quot;); NSURLSessionTaskState state = [self state]; [self af_resume]; if (state != NSURLSessionTaskStateRunning) &#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNSURLSessionTaskDidResumeNotification object:self]; &#125;&#125;- (void)af_suspend &#123; NSAssert([self respondsToSelector:@selector(state)], @&quot;Does not respond to state&quot;); NSURLSessionTaskState state = [self state]; [self af_suspend]; if (state != NSURLSessionTaskStateSuspended) &#123; [[NSNotificationCenter defaultCenter] postNotificationName:AFNSURLSessionTaskDidSuspendNotification object:self]; &#125;&#125; 这块知识是关于OC的Runtime:method swizzling的，如果有不清楚的地方，可以看看这里method swizzling–by冰霜或者自行查阅。 123456789101112131415161718192021222324252627282930313233343536373839404142+ (void)load &#123; if (NSClassFromString(@&quot;NSURLSessionTask&quot;)) &#123; // 1) 首先构建一个NSURLSession对象session，再通过session构建出一个_NSCFLocalDataTask变量 NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration ephemeralSessionConfiguration]; NSURLSession * session = [NSURLSession sessionWithConfiguration:configuration];#pragma GCC diagnostic push#pragma GCC diagnostic ignored &quot;-Wnonnull&quot; NSURLSessionDataTask *localDataTask = [session dataTaskWithURL:nil];#pragma clang diagnostic pop // 2) 获取到af_resume实现的指针 IMP originalAFResumeIMP = method_getImplementation(class_getInstanceMethod([self class], @selector(af_resume))); Class currentClass = [localDataTask class]; // 3) 检查当前class是否实现了resume。如果实现了，继续第4步。 while (class_getInstanceMethod(currentClass, @selector(resume))) &#123; // 4) 获取到当前class的父类（superClass） Class superClass = [currentClass superclass]; // 5) 获取到当前class对于resume实现的指针 IMP classResumeIMP = method_getImplementation(class_getInstanceMethod(currentClass, @selector(resume))); // 6) 获取到父类对于resume实现的指针 IMP superclassResumeIMP = method_getImplementation(class_getInstanceMethod(superClass, @selector(resume))); // 7) 如果当前class对于resume的实现和父类不一样（类似iOS7上的情况），并且当前class的resume实现和af_resume不一样，才进行method swizzling。 if (classResumeIMP != superclassResumeIMP &amp;&amp; originalAFResumeIMP != classResumeIMP) &#123; //执行交换的函数 [self swizzleResumeAndSuspendMethodForClass:currentClass]; &#125; // 8) 设置当前操作的class为其父类class，重复步骤3~8 currentClass = [currentClass superclass]; &#125; [localDataTask cancel]; [session finishTasksAndInvalidate]; &#125;&#125; 原方法中有大量的英文注释，我把它翻译过来如下： iOS 7和iOS 8在NSURLSessionTask实现上有些许不同，这使得下面的代码实现略显trick关于这个问题，大家做了很多Unit Test，足以证明这个方法是可行的目前我们所知的： NSURLSessionTasks是一组class的统称，如果你仅仅使用提供的API来获取NSURLSessionTask的class，并不一定返回的是你想要的那个（获取NSURLSessionTask的class目的是为了获取其resume方法） 简单地使用[NSURLSessionTask class]并不起作用。你需要新建一个NSURLSession，并根据创建的session再构建出一个NSURLSessionTask对象才行。 iOS 7上，localDataTask（下面代码构造出的NSURLSessionDataTask类型的变量，为了获取对应Class）的类型是 NSCFLocalDataTask，NSCFLocalDataTask继承自NSCFLocalSessionTask，NSCFLocalSessionTask继承自__NSCFURLSessionTask。 iOS 8上，localDataTask的类型为NSCFLocalDataTask，NSCFLocalDataTask继承自NSCFLocalSessionTask，NSCFLocalSessionTask继承自NSURLSessionTask iOS 7上，NSCFLocalSessionTask和NSCFURLSessionTask是仅有的两个实现了resume和suspend方法的类，另外NSCFLocalSessionTask中的resume和suspend并没有调用其父类（即NSCFURLSessionTask）方法，这也意味着两个类的方法都需要进行method swizzling。 iOS 8上，NSURLSessionTask是唯一实现了resume和suspend方法的类。这也意味着其是唯一需要进行method swizzling的类 因为NSURLSessionTask并不是在每个iOS版本中都存在，所以把这些放在此处（即load函数中），比如给一个dummy class添加swizzled方法都会变得很方便，管理起来也方便。 一些假设前提: 目前iOS中resume和suspend的方法实现中并没有调用对应的父类方法。如果日后iOS改变了这种做法，我们还需要重新处理。 没有哪个后台task会重写resume和suspend函数 其余的一部分翻译在注释中，对应那一行代码。大概总结下这个注释： 其实这是被社区大量讨论的一个bug，之前AF因为这个替换方法，会导致偶发性的crash，如果不要这个swizzle则问题不会再出现，但是这样会导致AF中很多UIKit的扩展都不能正常使用。 原来这是因为iOS7和iOS8的NSURLSessionTask的继承链不同导致的，而且在iOS7继承链中会有两个类都实现了resume和suspend方法。而且子类没有调用父类的方法，我们则需要对着两个类都进行方法替换。而iOS8只需要对一个类进行替换。 对着注释看，上述方法代码不难理解，用一个while循环，一级一级去获取父类，如果实现了resume方法，则进行替换。 但是有几个点大家可能会觉得疑惑的，我们先把这个方法调用的替换的函数一块贴出来。 123456789101112131415161718192021//其引用的交换的函数：+ (void)swizzleResumeAndSuspendMethodForClass:(Class)theClass &#123; Method afResumeMethod = class_getInstanceMethod(self, @selector(af_resume)); Method afSuspendMethod = class_getInstanceMethod(self, @selector(af_suspend)); if (af_addMethod(theClass, @selector(af_resume), afResumeMethod)) &#123; af_swizzleSelector(theClass, @selector(resume), @selector(af_resume)); &#125; if (af_addMethod(theClass, @selector(af_suspend), afSuspendMethod)) &#123; af_swizzleSelector(theClass, @selector(suspend), @selector(af_suspend)); &#125;&#125;static inline void af_swizzleSelector(Class theClass, SEL originalSelector, SEL swizzledSelector) &#123; Method originalMethod = class_getInstanceMethod(theClass, originalSelector); Method swizzledMethod = class_getInstanceMethod(theClass, swizzledSelector); method_exchangeImplementations(originalMethod, swizzledMethod);&#125;static inline BOOL af_addMethod(Class theClass, SEL selector, Method method) &#123; return class_addMethod(theClass, selector, method_getImplementation(method), method_getTypeEncoding(method));&#125; 因为有小伙伴问到过，所以我们来分析分析大家可能会觉得疑惑的地方： 首先可以注意class_getInstanceMethod这个方法，它会获取到当前类继承链逐级往上，第一个实现的该方法。所以说它获取到的方法不能确定是当前类还是父类的。而且这里也没有用dispatch_once_t来保证一个方法只交换一次，那万一这是父类的方法，当前类换一次，父类又换一次，不是等于没交换么？…请注意这行判断： 12345// 7) 如果当前class对于resume的实现和父类不一样（类似iOS7上的情况），并且当前class的resume实现和af_resume不一样，才进行method swizzling。if (classResumeIMP != superclassResumeIMP &amp;&amp; originalAFResumeIMP != classResumeIMP) &#123; //执行交换的函数 [self swizzleResumeAndSuspendMethodForClass:currentClass]; &#125; 这个条件就杜绝了这种情况的发生，只有当前类实现了这个方法，才可能进入这个if块。 2.那iOS7两个类都交换了af_resume，那岂不是父类换到子类方法了?…只能说又是没仔细看代码的…注意AF是去向当前类添加af_resume方法，然后去交换当前类的af_resume。所以说根本不会出现这种情况… AFUrlSessionManager 基本上就这么多内容了。 分割图.png 现在我们回到一开始初始化的这行代码上: 1self.operationQueue.maxConcurrentOperationCount = 1; 1）首先我们要明确一个概念，这里的并发数仅仅是回调代理的线程并发数。而不是请求网络的线程并发数。请求网络是由NSUrlSession来做的，它内部维护了一个线程池，用来做网络请求。它调度线程,基于底层的CFSocket去发送请求和接收数据。这些线程是并发的。 2）明确了这个概念之后，我们来梳理一下AF3.x的整个流程和线程的关系： 我们一开始初始化sessionManager的时候，一般都是在主线程，（当然不排除有些人喜欢在分线程初始化…） 然后我们调用get或者post等去请求数据，接着会进行request拼接，AF代理的字典映射，progress的KVO添加等等，到NSUrlSession的resume之前这些准备工作，仍旧是在主线程中的。 然后我们调用NSUrlSession的resume，接着就跑到NSUrlSession内部去对网络进行数据请求了,在它内部是多线程并发的去请求数据的。 紧接着数据请求完成后，回调回来在我们一开始生成的并发数为1的NSOperationQueue中，这个时候会是多线程串行的回调回来的。（注：不明白的朋友可以看看雷纯峰大神这篇iOS 并发编程之 Operation Queues） 然后我们到返回数据解析那一块，我们自己又创建了并发的多线程，去对这些数据进行了各种类型的解析。 最后我们如果有自定义的completionQueue，则在自定义的queue中回调回来，也就是分线程回调回来，否则就是主队列，主线程中回调结束。 3）最后我们来解释解释为什么回调Queue要设置并发数为1： 我认为AF这么做有以下两点原因：1）众所周知，AF2.x所有的回调是在一条线程，这条线程是AF的常驻线程，而这一条线程正是AF调度request的思想精髓所在，所以第一个目的就是为了和之前版本保持一致。2）因为跟代理相关的一些操作AF都使用了NSLock。所以就算Queue的并发数设置为n，因为多线程回调，锁的等待，导致所提升的程序速度也并不明显。反而多task回调导致的多线程并发，平白浪费了部分性能。而设置Queue的并发数为1，（注：这里虽然回调Queue的并发数为1，仍然会有不止一条线程，但是因为是串行回调，所以同一时间，只会有一条线程在操作AFUrlSessionManager的那些方法。）至少回调的事件，是不需要多线程并发的。回调没有了NSLock的等待时间，所以对时间并没有多大的影响。（注：但是还是会有多线程的操作的，因为设置刚开始调起请求的时候，是在主线程的，而回调则是串行分线程。） 当然这仅仅是我个人的看法，如果有不同意见的欢迎交流~ 至此我们AF3.X业务层的逻辑，基本上结束了。小伙伴们，看到这你明白了AF做了什么了吗？可能很多朋友要扔鸡蛋了…可能你还是没觉得AF到底有什么用，我用NSUrlSession不也一样，我干嘛要用AF，在这里，我暂时卖个关子，等我们下篇讲完AFSecurityPolicy和部分UIKit的扩展，以及AF2.x的核心类源码实现之后，我们再好好总结。 后续文章：AFNetworking之于https认证AFNetworking之UIKit扩展与缓存实现AFNetworking到底做了什么？(终)]]></content>
      <categories>
        <category>第三方源码</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AFNetworking]]></title>
    <url>%2F2018%2F09%2F17%2FAFNetworking%2F</url>
    <content type="text"><![CDATA[[转自 涂耀辉]（https://www.jianshu.com/p/856f0e26279d） 写在开头： 作为一个iOS开发，也许你不知道NSUrlRequest、不知道NSUrlConnection、也不知道NSURLSession…（说不下去了…怎么会什么都不知道…）但是你一定知道AFNetworking。 大多数人习惯了只要是请求网络都用AF，但是你真的知道AF做了什么吗？为什么我们不用原生的NSURLSession而选择AFNetworking? 本文将从源码的角度去分析AF的实际作用。或许看完这篇文章，你心里会有一个答案。 先从最新的AF3.x讲起吧： 首先，我们就一起分析一下该框架的组成。将AF下载导入工程后，下面是其包结构，相对于2.x变得非常简单了： ​ ​ AF代码结构图.png 除去Support Files，可以看到AF分为如下5个功能模块： 网络通信模块(AFURLSessionManager、AFHTTPSessionManger) 网络状态监听模块(Reachability) 网络通信安全策略模块(Security) 网络通信信息序列化/反序列化模块(Serialization) 对于iOS UIKit库的扩展(UIKit) 其核心当然是网络通信模块AFURLSessionManager。大家都知道，AF3.x是基于NSURLSession来封装的。所以这个类围绕着NSURLSession做了一系列的封装。而其余的四个模块，均是为了配合网络通信或对已有UIKit的一个扩展工具包。这五个模块所对应的类的结构关系图如下所示： AF架构图.png 其中AFHTTPSessionManager是继承于AFURLSessionManager的，我们一般做网络请求都是用这个类，但是它本身是没有做实事的，只是做了一些简单的封装，把请求逻辑分发给父类AFURLSessionManager或者其它类去做。 首先我们简单的写个get请求：1234567AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc]init];[manager GET:@&quot;http://localhost&quot; parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; &#125;]; 首先我们我们调用了初始化方法生成了一个manager，我们点进去看看初始化做了什么: 1234567891011121314151617181920212223242526272829303132- (instancetype)init &#123; return [self initWithBaseURL:nil];&#125;- (instancetype)initWithBaseURL:(NSURL *)url &#123; return [self initWithBaseURL:url sessionConfiguration:nil];&#125;- (instancetype)initWithSessionConfiguration:(NSURLSessionConfiguration *)configuration &#123; return [self initWithBaseURL:nil sessionConfiguration:configuration];&#125;- (instancetype)initWithBaseURL:(NSURL *)url sessionConfiguration:(NSURLSessionConfiguration *)configuration&#123; self = [super initWithSessionConfiguration:configuration]; if (!self) &#123; return nil; &#125; //对传过来的BaseUrl进行处理，如果有值且最后不包含/，url加上&quot;/&quot; //--经一位热心读者更正...以后注释也一定要走心啊...不能误导大家... if ([[url path] length] &gt; 0 &amp;&amp; ![[url absoluteString] hasSuffix:@&quot;/&quot;]) &#123; url = [url URLByAppendingPathComponent:@&quot;&quot;]; &#125; self.baseURL = url; self.requestSerializer = [AFHTTPRequestSerializer serializer]; self.responseSerializer = [AFJSONResponseSerializer serializer]; return self;&#125; 初始化都调用到- (instancetype)initWithBaseURL:(NSURL *)url sessionConfiguration:(NSURLSessionConfiguration *)configuration方法中来了。 其实初始化方法都调用父类的初始化方法。父类也就是AF3.x最最核心的类AFURLSessionManager。几乎所有的类都是围绕着这个类在处理业务逻辑。 除此之外，方法中把baseURL存了起来，还生成了一个请求序列对象和一个响应序列对象。后面再细说这两个类是干什么用的。 直接来到父类AFURLSessionManager的初始化方法： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950- (instancetype)init &#123; return [self initWithSessionConfiguration:nil];&#125;- (instancetype)initWithSessionConfiguration:(NSURLSessionConfiguration *)configuration &#123; self = [super init]; if (!self) &#123; return nil; &#125; if (!configuration) &#123; configuration = [NSURLSessionConfiguration defaultSessionConfiguration]; &#125; self.sessionConfiguration = configuration; self.operationQueue = [[NSOperationQueue alloc] init]; //queue并发线程数设置为1 self.operationQueue.maxConcurrentOperationCount = 1; //注意代理，代理的继承，实际上NSURLSession去判断了，你实现了哪个方法会去调用，包括子代理的方法！ self.session = [NSURLSession sessionWithConfiguration:self.sessionConfiguration delegate:self delegateQueue:self.operationQueue]; //各种响应转码 self.responseSerializer = [AFJSONResponseSerializer serializer]; //设置默认安全策略 self.securityPolicy = [AFSecurityPolicy defaultPolicy];#if !TARGET_OS_WATCH self.reachabilityManager = [AFNetworkReachabilityManager sharedManager];#endif // 设置存储NSURL task与AFURLSessionManagerTaskDelegate的词典（重点，在AFNet中，每一个task都会被匹配一个AFURLSessionManagerTaskDelegate 来做task的delegate事件处理） =============== self.mutableTaskDelegatesKeyedByTaskIdentifier = [[NSMutableDictionary alloc] init]; // 设置AFURLSessionManagerTaskDelegate 词典的锁，确保词典在多线程访问时的线程安全 self.lock = [[NSLock alloc] init]; self.lock.name = AFURLSessionManagerLockName; // 置空task关联的代理 [self.session getTasksWithCompletionHandler:^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks) &#123; for (NSURLSessionDataTask *task in dataTasks) &#123; [self addDelegateForDataTask:task uploadProgress:nil downloadProgress:nil completionHandler:nil]; &#125; for (NSURLSessionUploadTask *uploadTask in uploadTasks) &#123; [self addDelegateForUploadTask:uploadTask progress:nil completionHandler:nil]; &#125; for (NSURLSessionDownloadTask *downloadTask in downloadTasks) &#123; [self addDelegateForDownloadTask:downloadTask progress:nil destination:nil completionHandler:nil]; &#125; &#125;]; return self;&#125; 这个就是最终的初始化方法了，注释应该写的很清楚，唯一需要说的就是三点： self.operationQueue.maxConcurrentOperationCount = 1;这个operationQueue就是我们代理回调的queue。这里把代理回调的线程并发数设置为1了。至于这里为什么要这么做，我们先留一个坑，等我们讲完AF2.x之后再来分析这一块。 第二就是我们初始化了一些属性，其中包括self.mutableTaskDelegatesKeyedByTaskIdentifier，这个是用来让每一个请求task和我们自定义的AF代理来建立映射用的，其实AF对task的代理进行了一个封装，并且转发代理到AF自定义的代理，这是AF比较重要的一部分，接下来我们会具体讲这一块。 第三就是下面这个方法： 12[self.session getTasksWithCompletionHandler:^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks) &#123; &#125;]; 首先说说这个方法是干什么用的：这个方法用来异步的获取当前session的所有未完成的task。其实讲道理来说在初始化中调用这个方法应该里面一个task都不会有。我们打断点去看，也确实如此，里面的数组都是空的。但是想想也知道，AF大神不会把一段没用的代码放在这吧。辗转多处，终于从AF的issue中找到了结论：github 。 原来这是为了防止后台回来，重新初始化这个session，一些之前的后台请求任务，导致程序的crash。 初始化方法到这就全部完成了。 分割图.png 接着我们来看看网络请求: 1234567891011121314151617181920- (NSURLSessionDataTask *)GET:(NSString *)URLString parameters:(id)parameters progress:(void (^)(NSProgress * _Nonnull))downloadProgress success:(void (^)(NSURLSessionDataTask * _Nonnull, id _Nullable))success failure:(void (^)(NSURLSessionDataTask * _Nullable, NSError * _Nonnull))failure&#123; //生成一个task NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@&quot;GET&quot; URLString:URLString parameters:parameters uploadProgress:nil downloadProgress:downloadProgress success:success failure:failure]; //开始网络请求 [dataTask resume]; return dataTask;&#125; 方法走到类AFHTTPSessionManager中来，调用父类，也就是我们整个AF3.x的核心类AFURLSessionManager的方法，生成了一个系统的NSURLSessionDataTask实例，并且开始网络请求。我们继续往父类里看，看看这个方法到底做了什么： 123456789101112131415161718192021222324252627282930313233343536373839404142434445- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method URLString:(NSString *)URLString parameters:(id)parameters uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress success:(void (^)(NSURLSessionDataTask *, id))success failure:(void (^)(NSURLSessionDataTask *, NSError *))failure&#123; NSError *serializationError = nil; //把参数，还有各种东西转化为一个request NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&amp;serializationError]; if (serializationError) &#123; if (failure) &#123;#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wgnu&quot; //如果解析错误，直接返回 dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123; failure(nil, serializationError); &#125;);#pragma clang diagnostic pop &#125; return nil; &#125; __block NSURLSessionDataTask *dataTask = nil; dataTask = [self dataTaskWithRequest:request uploadProgress:uploadProgress downloadProgress:downloadProgress completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) &#123; if (error) &#123; if (failure) &#123; failure(dataTask, error); &#125; &#125; else &#123; if (success) &#123; success(dataTask, responseObject); &#125; &#125; &#125;]; return dataTask;&#125; 这个方法做了两件事：1.用self.requestSerializer和各种参数去获取了一个我们最终请求网络需要的NSMutableURLRequest实例。2.调用另外一个方法dataTaskWithRequest去拿到我们最终需要的NSURLSessionDataTask实例，并且在完成的回调里，调用我们传过来的成功和失败的回调。 注意下面这个方法，我们常用来 push pop搭配，来忽略一些编译器的警告： 123#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wgnu&quot;#pragma clang diagnostic pop 这里是用来忽略：？带来的警告，具体的各种编译器警告描述，可以参考这篇：各种编译器的警告。 说到底这个方法还是没有做实事，我们继续到requestSerializer方法里去看，看看AF到底如何拼接成我们需要的request的： 接着我们跑到AFURLRequestSerialization类中： 1234567891011121314151617181920212223242526272829- (NSMutableURLRequest *)requestWithMethod:(NSString *)method URLString:(NSString *)URLString parameters:(id)parameters error:(NSError *__autoreleasing *)error&#123; //断言，debug模式下，如果缺少改参数，crash NSParameterAssert(method); NSParameterAssert(URLString); NSURL *url = [NSURL URLWithString:URLString]; NSParameterAssert(url); NSMutableURLRequest *mutableRequest = [[NSMutableURLRequest alloc] initWithURL:url]; mutableRequest.HTTPMethod = method; //将request的各种属性循环遍历 for (NSString *keyPath in AFHTTPRequestSerializerObservedKeyPaths()) &#123; //如果自己观察到的发生变化的属性，在这些方法里 if ([self.mutableObservedChangedKeyPaths containsObject:keyPath]) &#123; //把给自己设置的属性给request设置 [mutableRequest setValue:[self valueForKeyPath:keyPath] forKey:keyPath]; &#125; &#125; //将传入的parameters进行编码，并添加到request中 mutableRequest = [[self requestBySerializingRequest:mutableRequest withParameters:parameters error:error] mutableCopy]; return mutableRequest;&#125; 讲一下这个方法，这个方法做了3件事：1）设置request的请求类型，get,post,put…等2）往request里添加一些参数设置，其中AFHTTPRequestSerializerObservedKeyPaths()是一个c函数，返回一个数组，我们来看看这个函数: 1234567891011static NSArray * AFHTTPRequestSerializerObservedKeyPaths() &#123; static NSArray *_AFHTTPRequestSerializerObservedKeyPaths = nil; static dispatch_once_t onceToken; // 此处需要observer的keypath为allowsCellularAccess、cachePolicy、HTTPShouldHandleCookies // HTTPShouldUsePipelining、networkServiceType、timeoutInterval dispatch_once(&amp;onceToken, ^&#123; _AFHTTPRequestSerializerObservedKeyPaths = @[NSStringFromSelector(@selector(allowsCellularAccess)), NSStringFromSelector(@selector(cachePolicy)), NSStringFromSelector(@selector(HTTPShouldHandleCookies)), NSStringFromSelector(@selector(HTTPShouldUsePipelining)), NSStringFromSelector(@selector(networkServiceType)), NSStringFromSelector(@selector(timeoutInterval))]; &#125;); //就是一个数组里装了很多方法的名字, return _AFHTTPRequestSerializerObservedKeyPaths;&#125; 其实这个函数就是封装了一些属性的名字，这些都是NSUrlRequest的属性。再来看看self.mutableObservedChangedKeyPaths,这个是当前类的一个属性： 1@property (readwrite, nonatomic, strong) NSMutableSet *mutableObservedChangedKeyPaths; 在-init方法对这个集合进行了初始化，并且对当前类的和NSUrlRequest相关的那些属性添加了KVO监听： 123456789//每次都会重置变化 self.mutableObservedChangedKeyPaths = [NSMutableSet set]; //给这自己些方法添加观察者为自己，就是request的各种属性，set方法 for (NSString *keyPath in AFHTTPRequestSerializerObservedKeyPaths()) &#123; if ([self respondsToSelector:NSSelectorFromString(keyPath)]) &#123; [self addObserver:self forKeyPath:keyPath options:NSKeyValueObservingOptionNew context:AFHTTPRequestSerializerObserverContext]; &#125; &#125; KVO触发的方法： 1234567891011121314-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(__unused id)object change:(NSDictionary *)change context:(void *)context&#123; //当观察到这些set方法被调用了，而且不为Null就会添加到集合里，否则移除 if (context == AFHTTPRequestSerializerObserverContext) &#123; if ([change[NSKeyValueChangeNewKey] isEqual:[NSNull null]]) &#123; [self.mutableObservedChangedKeyPaths removeObject:keyPath]; &#125; else &#123; [self.mutableObservedChangedKeyPaths addObject:keyPath]; &#125; &#125;&#125; 至此我们知道self.mutableObservedChangedKeyPaths其实就是我们自己设置的request属性值的集合。接下来调用： 1[mutableRequest setValue:[self valueForKeyPath:keyPath] forKey:keyPath]; 用KVC的方式，把属性值都设置到我们请求的request中去。 3）把需要传递的参数进行编码，并且设置到request中去： 12//将传入的parameters进行编码，并添加到request中mutableRequest = [[self requestBySerializingRequest:mutableRequest withParameters:parameters error:error] mutableCopy]; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061 - (NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request withParameters:(id)parameters error:(NSError *__autoreleasing *)error&#123; NSParameterAssert(request); NSMutableURLRequest *mutableRequest = [request mutableCopy]; //从自己的head里去遍历，如果有值则设置给request的head [self.HTTPRequestHeaders enumerateKeysAndObjectsUsingBlock:^(id field, id value, BOOL * __unused stop) &#123; if (![request valueForHTTPHeaderField:field]) &#123; [mutableRequest setValue:value forHTTPHeaderField:field]; &#125; &#125;]; //来把各种类型的参数，array dic set转化成字符串，给request NSString *query = nil; if (parameters) &#123; //自定义的解析方式 if (self.queryStringSerialization) &#123; NSError *serializationError; query = self.queryStringSerialization(request, parameters, &amp;serializationError); if (serializationError) &#123; if (error) &#123; *error = serializationError; &#125; return nil; &#125; &#125; else &#123; //默认解析方式 switch (self.queryStringSerializationStyle) &#123; case AFHTTPRequestQueryStringDefaultStyle: query = AFQueryStringFromParameters(parameters); break; &#125; &#125; &#125; //最后判断该request中是否包含了GET、HEAD、DELETE（都包含在HTTPMethodsEncodingParametersInURI）。因为这几个method的quey是拼接到url后面的。而POST、PUT是把query拼接到http body中的。 if ([self.HTTPMethodsEncodingParametersInURI containsObject:[[request HTTPMethod] uppercaseString]]) &#123; if (query &amp;&amp; query.length &gt; 0) &#123; mutableRequest.URL = [NSURL URLWithString:[[mutableRequest.URL absoluteString] stringByAppendingFormat:mutableRequest.URL.query ? @&quot;&amp;%@&quot; : @&quot;?%@&quot;, query]]; &#125; &#125; else &#123; //post put请求 // #2864: an empty string is a valid x-www-form-urlencoded payload if (!query) &#123; query = @&quot;&quot;; &#125; if (![mutableRequest valueForHTTPHeaderField:@&quot;Content-Type&quot;]) &#123; [mutableRequest setValue:@&quot;application/x-www-form-urlencoded&quot; forHTTPHeaderField:@&quot;Content-Type&quot;]; &#125; //设置请求体 [mutableRequest setHTTPBody:[query dataUsingEncoding:self.stringEncoding]]; &#125; return mutableRequest;&#125; 这个方法做了3件事：1.从self.HTTPRequestHeaders中拿到设置的参数，赋值要请求的request里去2.把请求网络的参数，从array dic set这些容器类型转换为字符串，具体转码方式，我们可以使用自定义的方式，也可以用AF默认的转码方式。自定义的方式没什么好说的，想怎么去解析由你自己来决定。我们可以来看看默认的方式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051NSString * AFQueryStringFromParameters(NSDictionary *parameters) &#123; NSMutableArray *mutablePairs = [NSMutableArray array]; //把参数给AFQueryStringPairsFromDictionary，拿到AF的一个类型的数据就一个key，value对象，在URLEncodedStringValue拼接keyValue，一个加到数组里 for (AFQueryStringPair *pair in AFQueryStringPairsFromDictionary(parameters)) &#123; [mutablePairs addObject:[pair URLEncodedStringValue]]; &#125; //拆分数组返回参数字符串 return [mutablePairs componentsJoinedByString:@&quot;&amp;&quot;];&#125;NSArray * AFQueryStringPairsFromDictionary(NSDictionary *dictionary) &#123; //往下调用 return AFQueryStringPairsFromKeyAndValue(nil, dictionary);&#125;NSArray * AFQueryStringPairsFromKeyAndValue(NSString *key, id value) &#123; NSMutableArray *mutableQueryStringComponents = [NSMutableArray array]; // 根据需要排列的对象的description来进行升序排列，并且selector使用的是compare: // 因为对象的description返回的是NSString，所以此处compare:使用的是NSString的compare函数 // 即@[@&quot;foo&quot;, @&quot;bar&quot;, @&quot;bae&quot;] ----&gt; @[@&quot;bae&quot;, @&quot;bar&quot;,@&quot;foo&quot;] NSSortDescriptor *sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:@&quot;description&quot; ascending:YES selector:@selector(compare:)]; //判断vaLue是什么类型的，然后去递归调用自己，直到解析的是除了array dic set以外的元素，然后把得到的参数数组返回。 if ([value isKindOfClass:[NSDictionary class]]) &#123; NSDictionary *dictionary = value; // Sort dictionary keys to ensure consistent ordering in query string, which is important when deserializing potentially ambiguous sequences, such as an array of dictionaries //拿到 for (id nestedKey in [dictionary.allKeys sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123; id nestedValue = dictionary[nestedKey]; if (nestedValue) &#123; [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue((key ? [NSString stringWithFormat:@&quot;%@[%@]&quot;, key, nestedKey] : nestedKey), nestedValue)]; &#125; &#125; &#125; else if ([value isKindOfClass:[NSArray class]]) &#123; NSArray *array = value; for (id nestedValue in array) &#123; [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue([NSString stringWithFormat:@&quot;%@[]&quot;, key], nestedValue)]; &#125; &#125; else if ([value isKindOfClass:[NSSet class]]) &#123; NSSet *set = value; for (id obj in [set sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123; [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue(key, obj)]; &#125; &#125; else &#123; [mutableQueryStringComponents addObject:[[AFQueryStringPair alloc] initWithField:key value:value]]; &#125; return mutableQueryStringComponents;&#125; 转码主要是以上三个函数，配合着注释应该也很好理解：主要是在递归调用AFQueryStringPairsFromKeyAndValue。判断vaLue是什么类型的，然后去递归调用自己，直到解析的是除了array dic set以外的元素，然后把得到的参数数组返回。 其中有个AFQueryStringPair对象，其只有两个属性和两个方法： 12345678910111213141516171819202122@property (readwrite, nonatomic, strong) id field;@property (readwrite, nonatomic, strong) id value; - (instancetype)initWithField:(id)field value:(id)value &#123; self = [super init]; if (!self) &#123; return nil; &#125; self.field = field; self.value = value; return self;&#125; - (NSString *)URLEncodedStringValue &#123; if (!self.value || [self.value isEqual:[NSNull null]]) &#123; return AFPercentEscapedStringFromString([self.field description]); &#125; else &#123; return [NSString stringWithFormat:@&quot;%@=%@&quot;, AFPercentEscapedStringFromString([self.field description]), AFPercentEscapedStringFromString([self.value description])]; &#125;&#125; 方法很简单，现在我们也很容易理解这整个转码过程了，我们举个例子梳理下，就是以下这3步： 123456789101112131415161718@&#123; @&quot;name&quot; : @&quot;bang&quot;, @&quot;phone&quot;: @&#123;@&quot;mobile&quot;: @&quot;xx&quot;, @&quot;home&quot;: @&quot;xx&quot;&#125;, @&quot;families&quot;: @[@&quot;father&quot;, @&quot;mother&quot;], @&quot;nums&quot;: [NSSet setWithObjects:@&quot;1&quot;, @&quot;2&quot;, nil] &#125; -&gt; @[ field: @&quot;name&quot;, value: @&quot;bang&quot;, field: @&quot;phone[mobile]&quot;, value: @&quot;xx&quot;, field: @&quot;phone[home]&quot;, value: @&quot;xx&quot;, field: @&quot;families[]&quot;, value: @&quot;father&quot;, field: @&quot;families[]&quot;, value: @&quot;mother&quot;, field: @&quot;nums&quot;, value: @&quot;1&quot;, field: @&quot;nums&quot;, value: @&quot;2&quot;, ] -&gt; name=bang&amp;phone[mobile]=xx&amp;phone[home]=xx&amp;families[]=father&amp;families[]=mother&amp;nums=1&amp;num=2 至此，我们原来的容器类型的参数，就这样变成字符串类型了。 紧接着这个方法还根据该request中请求类型，来判断参数字符串应该如何设置到request中去。如果是GET、HEAD、DELETE，则把参数quey是拼接到url后面的。而POST、PUT是把query拼接到http body中的: 1234567891011121314151617if ([self.HTTPMethodsEncodingParametersInURI containsObject:[[request HTTPMethod] uppercaseString]]) &#123; if (query &amp;&amp; query.length &gt; 0) &#123; mutableRequest.URL = [NSURL URLWithString:[[mutableRequest.URL absoluteString] stringByAppendingFormat:mutableRequest.URL.query ? @&quot;&amp;%@&quot; : @&quot;?%@&quot;, query]]; &#125;&#125; else &#123; //post put请求 // #2864: an empty string is a valid x-www-form-urlencoded payload if (!query) &#123; query = @&quot;&quot;; &#125; if (![mutableRequest valueForHTTPHeaderField:@&quot;Content-Type&quot;]) &#123; [mutableRequest setValue:@&quot;application/x-www-form-urlencoded&quot; forHTTPHeaderField:@&quot;Content-Type&quot;]; &#125; //设置请求体 [mutableRequest setHTTPBody:[query dataUsingEncoding:self.stringEncoding]];&#125; 至此，我们生成了一个request。 分割图.png 我们再回到AFHTTPSessionManager类中来,回到这个方法：12345678910111213141516171819202122232425262728293031323334353637383940414243- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method URLString:(NSString *)URLString parameters:(id)parameters uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress success:(void (^)(NSURLSessionDataTask *, id))success failure:(void (^)(NSURLSessionDataTask *, NSError *))failure&#123; NSError *serializationError = nil; //把参数，还有各种东西转化为一个request NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&amp;serializationError]; if (serializationError) &#123; if (failure) &#123;#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wgnu&quot; //如果解析错误，直接返回 dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^&#123; failure(nil, serializationError); &#125;);#pragma clang diagnostic pop &#125; return nil; &#125; __block NSURLSessionDataTask *dataTask = nil; dataTask = [self dataTaskWithRequest:request uploadProgress:uploadProgress downloadProgress:downloadProgress completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) &#123; if (error) &#123; if (failure) &#123; failure(dataTask, error); &#125; &#125; else &#123; if (success) &#123; success(dataTask, responseObject); &#125; &#125; &#125;]; return dataTask;&#125; 绕了一圈我们又回来了。。 我们继续往下看：当解析错误，我们直接调用传进来的fauler的Block失败返回了，这里有一个self.completionQueue,这个是我们自定义的，这个是一个GCD的Queue如果设置了那么从这个Queue中回调结果，否则从主队列回调。 实际上这个Queue还是挺有用的，之前还用到过。我们公司有自己的一套数据加解密的解析模式，所以我们回调回来的数据并不想是主线程，我们可以设置这个Queue,在分线程进行解析数据，然后自己再调回到主线程去刷新UI。 言归正传，我们接着调用了父类的生成task的方法，并且执行了一个成功和失败的回调，我们接着去父类AFURLSessionManger里看（总算到我们的核心类了..）： 12345678910111213141516- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject, NSError * _Nullable error))completionHandler &#123; __block NSURLSessionDataTask *dataTask = nil; //第一件事，创建NSURLSessionDataTask，里面适配了Ios8以下taskIdentifiers，函数创建task对象。 //其实现应该是因为iOS 8.0以下版本中会并发地创建多个task对象，而同步有没有做好，导致taskIdentifiers 不唯一…这边做了一个串行处理 url_session_manager_create_task_safely(^&#123; dataTask = [self.session dataTaskWithRequest:request]; &#125;); [self addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler]; return dataTask;&#125; 我们注意到这个方法非常简单，就调用了一个url_session_manager_create_task_safely()函数，传了一个Block进去，Block里就是iOS原生生成dataTask的方法。此外，还调用了一个addDelegateForDataTask的方法。 我们到这先到这个函数里去看看： 123456789101112131415161718192021222324static void url_session_manager_create_task_safely(dispatch_block_t block) &#123; if (NSFoundationVersionNumber &lt; NSFoundationVersionNumber_With_Fixed_5871104061079552_bug) &#123; // Fix of bug // Open Radar:http://openradar.appspot.com/radar?id=5871104061079552 (status: Fixed in iOS8) // Issue about:https://github.com/AFNetworking/AFNetworking/issues/2093 //理解下，第一为什么用sync，因为是想要主线程等在这，等执行完，在返回，因为必须执行完dataTask才有数据，传值才有意义。 //第二，为什么要用串行队列，因为这块是为了防止ios8以下内部的dataTaskWithRequest是并发创建的， //这样会导致taskIdentifiers这个属性值不唯一，因为后续要用taskIdentifiers来作为Key对应delegate。 dispatch_sync(url_session_manager_creation_queue(), block); &#125; else &#123; block(); &#125;&#125;static dispatch_queue_t url_session_manager_creation_queue() &#123; static dispatch_queue_t af_url_session_manager_creation_queue; static dispatch_once_t onceToken; //保证了即使是在多线程的环境下，也不会创建其他队列 dispatch_once(&amp;onceToken, ^&#123; af_url_session_manager_creation_queue = dispatch_queue_create(&quot;com.alamofire.networking.session.manager.creation&quot;, DISPATCH_QUEUE_SERIAL); &#125;); return af_url_session_manager_creation_queue;&#125; 方法非常简单，关键是理解这么做的目的：为什么我们不直接去调用dataTask = [self.session dataTaskWithRequest:request];非要绕这么一圈，我们点进去bug日志里看看，原来这是为了适配iOS8的以下，创建session的时候，偶发的情况会出现session的属性taskIdentifier这个值不唯一，而这个taskIdentifier是我们后面来映射delegate的key,所以它必须是唯一的。 具体原因应该是NSURLSession内部去生成task的时候是用多线程并发去执行的。想通了这一点，我们就很好解决了，我们只需要在iOS8以下同步串行的去生成task就可以防止这一问题发生（如果还是不理解同步串行的原因，可以看看注释）。 题外话：很多同学都会抱怨为什么sync我从来用不到，看，有用到的地方了吧，很多东西不是没用，而只是你想不到怎么用。 我们接着看到： 1[self addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler]; 调用到： 123456789101112131415161718192021- (void)addDelegateForDataTask:(NSURLSessionDataTask *)dataTask uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler&#123; AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] init]; // AFURLSessionManagerTaskDelegate与AFURLSessionManager建立相互关系 delegate.manager = self; delegate.completionHandler = completionHandler; //这个taskDescriptionForSessionTasks用来发送开始和挂起通知的时候会用到,就是用这个值来Post通知，来两者对应 dataTask.taskDescription = self.taskDescriptionForSessionTasks; // ***** 将AF delegate对象与 dataTask建立关系 [self setDelegate:delegate forTask:dataTask]; // 设置AF delegate的上传进度，下载进度块。 delegate.uploadProgressBlock = uploadProgressBlock; delegate.downloadProgressBlock = downloadProgressBlock;&#125; 总结一下:1）这个方法，生成了一个AFURLSessionManagerTaskDelegate,这个其实就是AF的自定义代理。我们请求传来的参数，都赋值给这个AF的代理了。2）delegate.manager = self;代理把AFURLSessionManager这个类作为属性了,我们可以看到： 1@property (nonatomic, weak) AFURLSessionManager *manager; 这个属性是弱引用的，所以不会存在循环引用的问题。3）我们调用了[self setDelegate:delegate forTask:dataTask]; 我们进去看看这个方法做了什么： 12345678910111213141516171819- (void)setDelegate:(AFURLSessionManagerTaskDelegate *)delegate forTask:(NSURLSessionTask *)task&#123; //断言，如果没有这个参数，debug下crash在这 NSParameterAssert(task); NSParameterAssert(delegate); //加锁保证字典线程安全 [self.lock lock]; // 将AF delegate放入以taskIdentifier标记的词典中（同一个NSURLSession中的taskIdentifier是唯一的） self.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)] = delegate; // 为AF delegate 设置task 的progress监听 [delegate setupProgressForTask:task]; //添加task开始和暂停的通知 [self addNotificationObserverForTask:task]; [self.lock unlock];&#125; 这个方法主要就是把AF代理和task建立映射，存在了一个我们事先声明好的字典里。 而要加锁的原因是因为本身我们这个字典属性是mutable的，是线程不安全的。而我们对这些方法的调用，确实是会在复杂的多线程环境中，后面会仔细提到线程问题。 还有个[delegate setupProgressForTask:task];我们到方法里去看看： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475- (void)setupProgressForTask:(NSURLSessionTask *)task &#123; __weak __typeof__(task) weakTask = task; //拿到上传下载期望的数据大小 self.uploadProgress.totalUnitCount = task.countOfBytesExpectedToSend; self.downloadProgress.totalUnitCount = task.countOfBytesExpectedToReceive; //将上传与下载进度和 任务绑定在一起，直接cancel suspend resume进度条，可以cancel...任务 [self.uploadProgress setCancellable:YES]; [self.uploadProgress setCancellationHandler:^&#123; __typeof__(weakTask) strongTask = weakTask; [strongTask cancel]; &#125;]; [self.uploadProgress setPausable:YES]; [self.uploadProgress setPausingHandler:^&#123; __typeof__(weakTask) strongTask = weakTask; [strongTask suspend]; &#125;]; if ([self.uploadProgress respondsToSelector:@selector(setResumingHandler:)]) &#123; [self.uploadProgress setResumingHandler:^&#123; __typeof__(weakTask) strongTask = weakTask; [strongTask resume]; &#125;]; &#125; [self.downloadProgress setCancellable:YES]; [self.downloadProgress setCancellationHandler:^&#123; __typeof__(weakTask) strongTask = weakTask; [strongTask cancel]; &#125;]; [self.downloadProgress setPausable:YES]; [self.downloadProgress setPausingHandler:^&#123; __typeof__(weakTask) strongTask = weakTask; [strongTask suspend]; &#125;]; if ([self.downloadProgress respondsToSelector:@selector(setResumingHandler:)]) &#123; [self.downloadProgress setResumingHandler:^&#123; __typeof__(weakTask) strongTask = weakTask; [strongTask resume]; &#125;]; &#125; //观察task的这些属性 [task addObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesReceived)) options:NSKeyValueObservingOptionNew context:NULL]; [task addObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesExpectedToReceive)) options:NSKeyValueObservingOptionNew context:NULL]; [task addObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesSent)) options:NSKeyValueObservingOptionNew context:NULL]; [task addObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesExpectedToSend)) options:NSKeyValueObservingOptionNew context:NULL]; //观察progress这两个属性 [self.downloadProgress addObserver:self forKeyPath:NSStringFromSelector(@selector(fractionCompleted)) options:NSKeyValueObservingOptionNew context:NULL]; [self.uploadProgress addObserver:self forKeyPath:NSStringFromSelector(@selector(fractionCompleted)) options:NSKeyValueObservingOptionNew context:NULL];&#125; 这个方法也非常简单，主要做了以下几件事：1）设置 downloadProgress与uploadProgress的一些属性，并且把两者和task的任务状态绑定在了一起。注意这两者都是NSProgress的实例对象，（这里可能又一群小伙伴楞在这了，这是个什么…）简单来说，这就是iOS7引进的一个用来管理进度的类，可以开始，暂停，取消，完整的对应了task的各种状态，当progress进行各种操作的时候，task也会引发对应操作。2）给task和progress的各个属及添加KVO监听，至于监听了干什么用，我们接着往下看： 123456789101112131415161718192021222324252627 - (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context &#123; //是task if ([object isKindOfClass:[NSURLSessionTask class]] || [object isKindOfClass:[NSURLSessionDownloadTask class]]) &#123; //给进度条赋新值 if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesReceived))]) &#123; self.downloadProgress.completedUnitCount = [change[NSKeyValueChangeNewKey] longLongValue]; &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesExpectedToReceive))]) &#123; self.downloadProgress.totalUnitCount = [change[NSKeyValueChangeNewKey] longLongValue]; &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesSent))]) &#123; self.uploadProgress.completedUnitCount = [change[NSKeyValueChangeNewKey] longLongValue]; &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesExpectedToSend))]) &#123; self.uploadProgress.totalUnitCount = [change[NSKeyValueChangeNewKey] longLongValue]; &#125; &#125; //上面的赋新值会触发这两个，调用block回调，用户拿到进度 else if ([object isEqual:self.downloadProgress]) &#123; if (self.downloadProgressBlock) &#123; self.downloadProgressBlock(object); &#125; &#125; else if ([object isEqual:self.uploadProgress]) &#123; if (self.uploadProgressBlock) &#123; self.uploadProgressBlock(object); &#125; &#125;&#125; 方法非常简单直观，主要就是如果task触发KVO,则给progress进度赋值，应为赋值了，所以会触发progress的KVO，也会调用到这里，然后去执行我们传进来的downloadProgressBlock和uploadProgressBlock。主要的作用就是为了让进度实时的传递。 主要是观摩一下大神的写代码的结构，这个解耦的编程思想，不愧是大神… 还有一点需要注意：我们之前的setProgress和这个KVO监听，都是在我们AF自定义的delegate内的，是有一个task就会有一个delegate的。所以说我们是每个task都会去监听这些属性，分别在各自的AF代理内。看到这，可能有些小伙伴会有点乱，没关系。等整个讲完之后我们还会详细的去讲捋一捋manager、task、还有AF自定义代理三者之前的对应关系。 到这里我们整个对task的处理就完成了。 分割图.png 接着task就开始请求网络了，还记得我们初始化方法中： 1self.session = [NSURLSession sessionWithConfiguration:self.sessionConfiguration delegate:self delegateQueue:self.operationQueue]; 我们把AFUrlSessionManager作为了所有的task的delegate。当我们请求网络的时候，这些代理开始调用了： NSUrlSession的代理.png AFUrlSessionManager一共实现了如上图所示这么一大堆NSUrlSession相关的代理。（小伙伴们的顺序可能不一样，楼主根据代理隶属重新排序了一下） 而只转发了其中3条到AF自定义的delegate中： ​ ​ AF自定义delegate.png 这就是我们一开始说的，AFUrlSessionManager对这一大堆代理做了一些公共的处理，而转发到AF自定义代理的3条，则负责把每个task对应的数据回调出去。 又有小伙伴问了，我们设置的这个代理不是NSURLSessionDelegate吗？怎么能响应NSUrlSession这么多代理呢？我们点到类的声明文件中去看看： 12345@protocol NSURLSessionDelegate &lt;NSObject&gt;@protocol NSURLSessionTaskDelegate &lt;NSURLSessionDelegate&gt;@protocol NSURLSessionDataDelegate &lt;NSURLSessionTaskDelegate&gt;@protocol NSURLSessionDownloadDelegate &lt;NSURLSessionTaskDelegate&gt;@protocol NSURLSessionStreamDelegate &lt;NSURLSessionTaskDelegate&gt; 我们可以看到这些代理都是继承关系，而在NSURLSession实现中，只要设置了这个代理，它会去判断这些所有的代理，是否respondsToSelector这些代理中的方法，如果响应了就会去调用。 而AF还重写了respondsToSelector方法: 1234567891011121314 - (BOOL)respondsToSelector:(SEL)selector &#123; //复写了selector的方法，这几个方法是在本类有实现的，但是如果外面的Block没赋值的话，则返回NO，相当于没有实现！ if (selector == @selector(URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:)) &#123; return self.taskWillPerformHTTPRedirection != nil; &#125; else if (selector == @selector(URLSession:dataTask:didReceiveResponse:completionHandler:)) &#123; return self.dataTaskDidReceiveResponse != nil; &#125; else if (selector == @selector(URLSession:dataTask:willCacheResponse:completionHandler:)) &#123; return self.dataTaskWillCacheResponse != nil; &#125; else if (selector == @selector(URLSessionDidFinishEventsForBackgroundURLSession:)) &#123; return self.didFinishEventsForBackgroundURLSession != nil; &#125; return [[self class] instancesRespondToSelector:selector];&#125; 这样如果没实现这些我们自定义的Block也不会去回调这些代理。因为本身某些代理，只执行了这些自定义的Block，如果Block都没有赋值，那我们调用代理也没有任何意义。讲到这，我们顺便看看AFUrlSessionManager的一些自定义Block： 123456789101112131415@property (readwrite, nonatomic, copy) AFURLSessionDidBecomeInvalidBlock sessionDidBecomeInvalid;@property (readwrite, nonatomic, copy) AFURLSessionDidReceiveAuthenticationChallengeBlock sessionDidReceiveAuthenticationChallenge;@property (readwrite, nonatomic, copy) AFURLSessionDidFinishEventsForBackgroundURLSessionBlock didFinishEventsForBackgroundURLSession;@property (readwrite, nonatomic, copy) AFURLSessionTaskWillPerformHTTPRedirectionBlock taskWillPerformHTTPRedirection;@property (readwrite, nonatomic, copy) AFURLSessionTaskDidReceiveAuthenticationChallengeBlock taskDidReceiveAuthenticationChallenge;@property (readwrite, nonatomic, copy) AFURLSessionTaskNeedNewBodyStreamBlock taskNeedNewBodyStream;@property (readwrite, nonatomic, copy) AFURLSessionTaskDidSendBodyDataBlock taskDidSendBodyData;@property (readwrite, nonatomic, copy) AFURLSessionTaskDidCompleteBlock taskDidComplete;@property (readwrite, nonatomic, copy) AFURLSessionDataTaskDidReceiveResponseBlock dataTaskDidReceiveResponse;@property (readwrite, nonatomic, copy) AFURLSessionDataTaskDidBecomeDownloadTaskBlock dataTaskDidBecomeDownloadTask;@property (readwrite, nonatomic, copy) AFURLSessionDataTaskDidReceiveDataBlock dataTaskDidReceiveData;@property (readwrite, nonatomic, copy) AFURLSessionDataTaskWillCacheResponseBlock dataTaskWillCacheResponse;@property (readwrite, nonatomic, copy) AFURLSessionDownloadTaskDidFinishDownloadingBlock downloadTaskDidFinishDownloading;@property (readwrite, nonatomic, copy) AFURLSessionDownloadTaskDidWriteDataBlock downloadTaskDidWriteData;@property (readwrite, nonatomic, copy) AFURLSessionDownloadTaskDidResumeBlock downloadTaskDidResume; 各自对应的还有一堆这样的set方法： 123 - (void)setSessionDidBecomeInvalidBlock:(void (^)(NSURLSession *session, NSError *error))block &#123; self.sessionDidBecomeInvalid = block;&#125; 方法都是一样的，就不重复粘贴占篇幅了。主要谈谈这个设计思路 作者用@property把这个些Block属性在.m文件中声明,然后复写了set方法。 然后在.h中去声明这些set方法： 1- (void)setSessionDidBecomeInvalidBlock:(nullable void (^)(NSURLSession *session, NSError *error))block; 为什么要绕这么一大圈呢？原来这是为了我们这些用户使用起来方便，调用set方法去设置这些Block，能很清晰的看到Block的各个参数与返回值。大神的精髓的编程思想无处不体现… 接下来我们就讲讲这些代理方法做了什么（按照顺序来）： NSURLSessionDelegate代理1：123456789101112131415//当前这个session已经失效时，该代理方法被调用。/* 如果你使用finishTasksAndInvalidate函数使该session失效， 那么session首先会先完成最后一个task，然后再调用URLSession:didBecomeInvalidWithError:代理方法， 如果你调用invalidateAndCancel方法来使session失效，那么该session会立即调用上面的代理方法。 */- (void)URLSession:(NSURLSession *)sessiondidBecomeInvalidWithError:(NSError *)error&#123; if (self.sessionDidBecomeInvalid) &#123; self.sessionDidBecomeInvalid(session, error); &#125; [[NSNotificationCenter defaultCenter] postNotificationName:AFURLSessionDidInvalidateNotification object:session];&#125; 方法调用时机注释写的很清楚，就调用了一下我们自定义的Block,还发了一个失效的通知，至于这个通知有什么用。很抱歉，AF没用它做任何事，只是发了…目的是用户自己可以利用这个通知做什么事吧。 其实AF大部分通知都是如此。当然，还有一部分通知AF还是有自己用到的，包括配合对UIKit的一些扩展来使用，后面我们会有单独篇幅展开讲讲这些UIKit的扩展类的实现。 代理2：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//2、https认证- (void)URLSession:(NSURLSession *)sessiondidReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler&#123; //挑战处理类型为 默认 /* NSURLSessionAuthChallengePerformDefaultHandling：默认方式处理 NSURLSessionAuthChallengeUseCredential：使用指定的证书 NSURLSessionAuthChallengeCancelAuthenticationChallenge：取消挑战 */ NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling; __block NSURLCredential *credential = nil; // sessionDidReceiveAuthenticationChallenge是自定义方法，用来如何应对服务器端的认证挑战 if (self.sessionDidReceiveAuthenticationChallenge) &#123; disposition = self.sessionDidReceiveAuthenticationChallenge(session, challenge, &amp;credential); &#125; else &#123; // 此处服务器要求客户端的接收认证挑战方法是NSURLAuthenticationMethodServerTrust // 也就是说服务器端需要客户端返回一个根据认证挑战的保护空间提供的信任（即challenge.protectionSpace.serverTrust）产生的挑战证书。 // 而这个证书就需要使用credentialForTrust:来创建一个NSURLCredential对象 if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) &#123; // 基于客户端的安全策略来决定是否信任该服务器，不信任的话，也就没必要响应挑战 if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) &#123; // 创建挑战证书（注：挑战方式为UseCredential和PerformDefaultHandling都需要新建挑战证书） credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust]; // 确定挑战的方式 if (credential) &#123; //证书挑战 disposition = NSURLSessionAuthChallengeUseCredential; &#125; else &#123; //默认挑战 唯一区别，下面少了这一步！ disposition = NSURLSessionAuthChallengePerformDefaultHandling; &#125; &#125; else &#123; //取消挑战 disposition = NSURLSessionAuthChallengeCancelAuthenticationChallenge; &#125; &#125; else &#123; //默认挑战方式 disposition = NSURLSessionAuthChallengePerformDefaultHandling; &#125; &#125; //完成挑战 if (completionHandler) &#123; completionHandler(disposition, credential); &#125;&#125; 函数作用：web服务器接收到客户端请求时，有时候需要先验证客户端是否为正常用户，再决定是够返回真实数据。这种情况称之为服务端要求客户端接收挑战（NSURLAuthenticationChallenge challenge）。接收到挑战后，客户端要根据服务端传来的challenge来生成completionHandler所需的NSURLSessionAuthChallengeDisposition disposition和NSURLCredential credential（disposition指定应对这个挑战的方法，而credential是客户端生成的挑战证书，注意只有challenge中认证方法为NSURLAuthenticationMethodServerTrust的时候，才需要生成挑战证书）。最后调用completionHandler回应服务器端的挑战。 函数讨论：该代理方法会在下面两种情况调用： 当服务器端要求客户端提供证书时或者进行NTLM认证（Windows NT LAN Manager，微软提出的WindowsNT挑战/响应验证机制）时，此方法允许你的app提供正确的挑战证书。 当某个session使用SSL/TLS协议，第一次和服务器端建立连接的时候，服务器会发送给iOS客户端一个证书，此方法允许你的app验证服务期端的证书链（certificate keychain）注：如果你没有实现该方法，该session会调用其NSURLSessionTaskDelegate的代理方法URLSession:task:didReceiveChallenge:completionHandler: 。 这里，我把官方文档对这个方法的描述翻译了一下。总结一下，这个方法其实就是做https认证的。看看上面的注释，大概能看明白这个方法做认证的步骤，我们还是如果有自定义的做认证的Block，则调用我们自定义的，否则去执行默认的认证步骤，最后调用完成认证： 1234//完成挑战 if (completionHandler) &#123; completionHandler(disposition, credential); &#125; 代理3：12345678//3、 当session中所有已经入队的消息被发送出去后，会调用该代理方法。- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)session &#123; if (self.didFinishEventsForBackgroundURLSession) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; self.didFinishEventsForBackgroundURLSession(session); &#125;); &#125;&#125; 官方文档翻译： 函数讨论： 在iOS中，当一个后台传输任务完成或者后台传输时需要证书，而此时你的app正在后台挂起，那么你的app在后台会自动重新启动运行，并且这个app的UIApplicationDelegate会发送一个application:handleEventsForBackgroundURLSession:completionHandler:消息。该消息包含了对应后台的session的identifier，而且这个消息会导致你的app启动。你的app随后应该先存储completion handler，然后再使用相同的identifier创建一个background configuration，并根据这个background configuration创建一个新的session。这个新创建的session会自动与后台任务重新关联在一起。 当你的app获取了一个URLSessionDidFinishEventsForBackgroundURLSession:消息，这就意味着之前这个session中已经入队的所有消息都转发出去了，这时候再调用先前存取的completion handler是安全的，或者因为内部更新而导致调用completion handler也是安全的。 NSURLSessionTaskDelegate代理4：1234567891011121314151617181920//被服务器重定向的时候调用- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)taskwillPerformHTTPRedirection:(NSHTTPURLResponse *)response newRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURLRequest *))completionHandler&#123; NSURLRequest *redirectRequest = request; // step1. 看是否有对应的user block 有的话转发出去，通过这4个参数，返回一个NSURLRequest类型参数，request转发、网络重定向. if (self.taskWillPerformHTTPRedirection) &#123; //用自己自定义的一个重定向的block实现，返回一个新的request。 redirectRequest = self.taskWillPerformHTTPRedirection(session, task, response, request); &#125; if (completionHandler) &#123; // step2. 用request重新请求 completionHandler(redirectRequest); &#125;&#125; 一开始我以为这个方法是类似NSURLProtocol，可以在请求时自己主动的去重定向request，后来发现不是，这个方法是在服务器去重定向的时候，才会被调用。为此我写了段简单的PHP测了测： 123456789&lt;?phpdefined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);class Welcome extends CI_Controller &#123; public function index() &#123; header(&quot;location: http://www.huixionghome.cn/&quot;); &#125;&#125; 证实确实如此，当我们服务器重定向的时候，代理就被调用了，我们可以去重新定义这个重定向的request。 关于这个代理还有一些需要注意的地方： 此方法只会在default session或者ephemeral session中调用，而在background session中，session task会自动重定向。 这里指的模式是我们一开始Init的模式： 1234if (!configuration) &#123; configuration = [NSURLSessionConfiguration defaultSessionConfiguration];&#125;self.sessionConfiguration = configuration; 这个模式总共分为3种： 对于NSURLSession对象的初始化需要使用NSURLSessionConfiguration，而NSURLSessionConfiguration有三个类工厂方法：+defaultSessionConfiguration 返回一个标准的 configuration，这个配置实际上与 NSURLConnection 的网络堆栈（networking stack）是一样的，具有相同的共享 NSHTTPCookieStorage，共享 NSURLCache 和共享NSURLCredentialStorage。+ephemeralSessionConfiguration 返回一个预设配置，这个配置中不会对缓存，Cookie 和证书进行持久性的存储。这对于实现像秘密浏览这种功能来说是很理想的。+backgroundSessionConfiguration:(NSString *)identifier 的独特之处在于，它会创建一个后台 session。后台 session 不同于常规的，普通的 session，它甚至可以在应用程序挂起，退出或者崩溃的情况下运行上传和下载任务。初始化时指定的标识符，被用于向任何可能在进程外恢复后台传输的守护进程（daemon）提供上下文。 代理5：12345678910111213141516171819202122232425262728//https认证- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)taskdidReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler&#123; NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling; __block NSURLCredential *credential = nil; if (self.taskDidReceiveAuthenticationChallenge) &#123; disposition = self.taskDidReceiveAuthenticationChallenge(session, task, challenge, &amp;credential); &#125; else &#123; if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) &#123; if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) &#123; disposition = NSURLSessionAuthChallengeUseCredential; credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust]; &#125; else &#123; disposition = NSURLSessionAuthChallengeCancelAuthenticationChallenge; &#125; &#125; else &#123; disposition = NSURLSessionAuthChallengePerformDefaultHandling; &#125; &#125; if (completionHandler) &#123; completionHandler(disposition, credential); &#125;&#125; 鉴于篇幅，就不去贴官方文档的翻译了，大概总结一下：之前我们也有一个https认证，功能一样，执行的内容也完全一样。 区别在于这个是non-session-level级别的认证，而之前的是session-level级别的。 相对于它，多了一个参数task,然后调用我们自定义的Block会多回传这个task作为参数，这样我们就可以根据每个task去自定义我们需要的https认证方式。 代理6：1234567891011121314151617181920//当一个session task需要发送一个新的request body stream到服务器端的时候，调用该代理方法。- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task needNewBodyStream:(void (^)(NSInputStream *bodyStream))completionHandler&#123; NSInputStream *inputStream = nil; //有自定义的taskNeedNewBodyStream,用自定义的，不然用task里原始的stream if (self.taskNeedNewBodyStream) &#123; inputStream = self.taskNeedNewBodyStream(session, task); &#125; else if (task.originalRequest.HTTPBodyStream &amp;&amp; [task.originalRequest.HTTPBodyStream conformsToProtocol:@protocol(NSCopying)]) &#123; inputStream = [task.originalRequest.HTTPBodyStream copy]; &#125; if (completionHandler) &#123; completionHandler(inputStream); &#125;&#125; 该代理方法会在下面两种情况被调用： 如果task是由uploadTaskWithStreamedRequest:创建的，那么提供初始的request body stream时候会调用该代理方法。 因为认证挑战或者其他可恢复的服务器错误，而导致需要客户端重新发送一个含有body stream的request，这时候会调用该代理。 代理7：123456789101112131415161718192021222324/* //周期性地通知代理发送到服务器端数据的进度。 */- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSenttotalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend&#123; // 如果totalUnitCount获取失败，就使用HTTP header中的Content-Length作为totalUnitCount int64_t totalUnitCount = totalBytesExpectedToSend; if(totalUnitCount == NSURLSessionTransferSizeUnknown) &#123; NSString *contentLength = [task.originalRequest valueForHTTPHeaderField:@&quot;Content-Length&quot;]; if(contentLength) &#123; totalUnitCount = (int64_t) [contentLength longLongValue]; &#125; &#125; if (self.taskDidSendBodyData) &#123; self.taskDidSendBodyData(session, task, bytesSent, totalBytesSent, totalUnitCount); &#125;&#125; 就是每次发送数据给服务器，会回调这个方法，通知已经发送了多少，总共要发送多少。 代理方法里也就是仅仅调用了我们自定义的Block而已。 未完总结： 其实写了这么多，还没有讲到真正重要的地方，但是因为已经接近简书最大篇幅，所以只能先在这里结个尾了。 如果能看到这里，说明你是个非常有耐心，非常好学，非常nice的iOS开发。楼主为你点个赞。那么相信你也不吝啬手指动一动，给本文点个喜欢…顺便关注一下楼主…毕竟写了这么多…也很辛苦…咳咳，我不小心说出心声了么？ 最后，万一如果本文有人转载，麻烦注明出处~谢谢！ 后续文章:AFNetworking到底做了什么（二）?AFNetworking之于https认证AFNetworking之UIKit扩展与缓存实现AFNetworking到底做了什么？(终)]]></content>
      <categories>
        <category>第三方源码</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[网络数据传输安全及SSH与HTTPS工作原理]]></title>
    <url>%2F2018%2F09%2F17%2F%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8F%8ASSH%E4%B8%8EHTTPS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[[转自 云游道士]（https://www.cnblogs.com/yyds/p/6992125.html） 本节内容 网络数据传输安全概述 数据加密算法分类 SSH工作原理 HTTPS工作原理 参考资料 个人一直在努力推动git在公司内部的普及和使用，前些日子在公司内部做了一次分享课，给大家介绍了下项目发布流程相关的内容，顺便普及了一些git的相关知识。对git是什么，以及怎样配置和使用它做了一些说明。但事后，很多同事的反馈，让我意识到他们很多人都卡在ssh免密钥登录的配置上。我们常说，学习一个新的东西应该遵循3W1H法则–WAHT(是什么)，WHEN(什么时候用)，HOW（怎样用）和 WHY（为什么这样用）。我想大家应该是因为不知道为什么这样用，所以才会感到困惑。刚好，最近也在整理“使用Python相关模块进行数据加密”的文档，需要做些理论性的铺垫，所以才想写这篇文章，希望对大家有所帮助。 另外需要说明的是，网络安全涉及很多方面的很多内容，本文只是针对网络数据传输过程中的安全性发表一下个人认识和看法。如果描述的有什么不妥之处，欢迎大家留言交流和指正。 一、网络数据传输安全概述 我们说的数据加密与解密通常是为了保证数据在网络传输过程中的安全性。在网络发展初期，网络的数据安全性是没有被足够的重视的。事实上，当时为了实现数据可以通过网络进行传输已经耗费了科学家大部分男细胞，因此在TCP/IP协议设计的初期，他们也实在没有太多精力去过多考虑数据在网络传输过程中可能存在的安全性问题。随着TCP/IP协议及相关技术的日渐成熟，网络数据传输技术越来越稳定，人们才慢慢开始重视这个问题，美国国家标准与技术研究院（National Institue of Standard and Technology，简称NIST）也开始制定相关的安全标准。 网络安全涉及到很多个方面，我们这里仅仅讨论下网络数据传输过程中可能受到的威胁，其中常见的有： 数据窃听 数据篡改 身份伪装 针对以上威胁，我们介绍下网络数据传输的安全性涉及的几个方面： 1. 机密性机密性是指对要传输的数据进行加密和解密，防止第三方看到通信数据的明文内容。其对应的通信过程如下： 数据发送方： 1plaintext(明文) ==&gt; 转换算法 ==&gt; ciphertext(密文) 数据接收方： 1ciphertext(密文) ==&gt; 转换算法 ==&gt; plaintext(明文) 2. 完整性数据完整性是指不允许数据在传输过程中被修改（第三方恶意篡改或电平信号造成的部分数据丢失），但是它不要求数据的机密性，也就是说允许其他人看到明文数据。我们通常通过以不可逆的算法对数据提取特征码（也叫数据指纹），通过验证特征码的一致性来判断数据是否被修改过，通信过程如下： 数据发送发： 1plaintext(明文) ==&gt; 转换算法 ==&gt; plaintext(明文) + footprint(数据指纹A) 数据接收方： 1plaintext(明文) + footprint(数据指纹A) ==&gt; 转换算法 ==&gt; footprint(数据指纹B) ==&gt; 对比数据指纹A与B是否一致 3. 身份验证身份验证通常是指数据接收方需要确认发送数据给自己的数据是自己想要通信的那一方，防止他人冒充通信对方的身份进行通信。身份验证的大体原理是：数据发送方与数据接收方约定一种特殊的数据加解密方式，数据发送方将一个通过约定的加密方式进行加密后的数据发送给数据接收方，数据接收方如能按照约定的加密方式正确解密该数据就表示对数据发送方的身份验证成功。其对应的通信过程如下： 数据发送方： 1plaintext(明文) ==&gt; 转换算法 ==&gt; ciphertext(密文) 数据接收方： 1ciphertext(密文) ==&gt; 转换算法 ==&gt; plaintext(明文) 二、数据加密算法分类 上面提到的网络数据传输所涉及到的几个方面都需要特定的转换算法来实现，常用的转换算法（数据加密/解密算法）大体上可以分为以下几类： 1. 对称加密对称加密是指数据加密与解密使用相同的密钥。 主要功能：通常用于保证数据的机密性。 常用的算法实现： DES： Data Encryption Standard，秘钥长度为56位，2003年左右被破解–秘钥可以暴力破解。 3DES： DES的改进版本。 AES： Advanced Encryption Standard，支持的秘钥长度包括 128bits，192bits，258bits，384bits，512bits。 需要说明的是，秘钥长度越长，数据加密与解密的时间就越久。 特点： 加密与解密使用的密钥相同。 在一定程度上实现了数据的机密性，且简单、快速。 但是由于算法一般都是公开的，因此机密性几乎完全依赖于密钥。 同一发送方与不同接收方进行通信时应使用不同的密钥，防止数据被窃听或拦截后被解密。 存在的问题： 当通信对象很多时会面临众多秘钥的有效管理问题。 对于一个新的数据通信对象，密钥怎样进行传输的问题。 2. 单向加密单向加密是指只能对明文数据进行加密，而不能解密数据。 主要功能：通常用于保证数据的完整性。 常用的算法实现： MD5： 128bits SHA： SHA1(160bits), SHA224, SHA256, SHA384 特点： 不可逆：无法根据数据指纹/特征码还原原来的数据。 输入相同，输出必然相同。 雪崩效应：输入的微小改变，将会引起结果的巨大改变。 定长输出：无论原始数据有多长，结果的长度是相同的。 存在的问题：可能出现中间人攻击，中间人可以对原始内容进行修改之后重新生成数据指纹，数据接收方验证数据指纹时会发现数据是正常的。此时，数据发送方只能把生成的数据指纹进行加密后再发送给数据接收方，那么问题就又回到了加密密钥的传输和管理上。 3. 公钥加密（也叫非对称加密）公钥加密，也被称作非对称加密，也就是说加密和解密所使用的密钥是不同的。 主要作用：通常用于保证身份验证。 常用的公钥加密算法有： RSA： 可以实现数字签名 和 数据加密 DSA： 只能实现数字签名，不能实现数据加密 特点： 加密与解密使用的不同的密钥。 实际上它所使用的密钥是一对儿，一个交公钥，一个叫私钥。这对密钥不是独立的，公钥是从私钥中提炼出来，因此私钥是很长的，968位、1024位、2048位、4096位的都有。 通常公钥是公开的，所有人都可以得到；私钥是不能公开的，只有自己才有。 用公钥机密的内容只能用与之对应的私钥才能解密，反之亦然，这个特点尤为重要。 我们发现公钥加密“貌似”已经解决了密钥管理的问题–所有人只需要知道自己的那一对儿密钥即可，需要跟谁通信就去获取对方的公钥，然后通过这个公钥对数据进行加密和机密就可以了。我们可以用它来完成以下两件事情： 用自己的私钥加密， 可以保证身份验证，因为用你的私钥加密的数据只能用你的公开的公钥才能解密数据；但是不能保证数据的机密性，因为所有人都知道你的公钥。浏览器检查CA证书合法性时，验证CA机构的数字签名时就是通过这种方式进行的。 用对方的公钥加密， 可以保证数据的机密性，因为只有用对方的私钥才能解密，而对方的私钥只有他一个人有。HTTPS通信时，通过密钥协商技术得到的密钥进行传输时就是通过这种方式来保证机密性的。其实用对方公钥加密也可以用于用于身份验证，验证过程是：A用B的公钥加密数据后将密文传输给B，B用自己的私钥进行解密并将明文发送回给A，A对比B返回的明文和自己加密前的明文一致则表示对B完成了身份验证，通过SSH进行免密钥登录时就是通过这种方式来完成用户身份验证的。 事实上，公钥加密算法很少用于数据加密，它通常只是用来做身份认证，因为它的密钥太长，加密速度太慢–公钥加密算法的速度甚至比对称加密算法的速度慢上3个数量级（1000倍）。 存在的问题： 既然公钥加密通常只用于身份验证，而不是用于保证数据的机密性，也就意味着这个密钥对儿并不能完全作为加密和解密数据的秘钥来用。那么，秘钥的管理和传输问题依然存在着，这个问题到底怎样来解决呢？ 另外还有个问题就是，如果有人伪造了一对儿密钥，把其中的公钥发送给别人怎么办？怎样验证以获取公钥的合法性呢？ 密钥管理的解决方案：实际上，已经存在一种专门用于秘钥交换的算法–Diffie-Hellman加密算法。该加密算法本身仅限于秘钥的交换用途，被许多商用产品用作秘钥交换技术。这种秘钥交换技术的目的在于使得两个用户安全的交换一个密钥，以便用于之后的数据对称加密。也就是说，通信双方可以通过这个技术，动态的协商生成一个用于对称加密的密钥，而不用管理很多静态的密钥，这样就解决了密钥的管理问题。 需要说明的是，在通过秘钥交互技术动态协商生成密钥之前，通常需要先通过公钥加密算法对对方的身份进行验证。实际上，https就是这样工作的。 防止公钥被伪造的解决方案公钥实际上也是一段文本，验证公钥的合法性涉及到两个方面： 1）该公钥的发布者身份是否合法 2）该公钥的内容是否被篡改过 其实，这个已经不是靠纯技术能解决的问题了，这需要借助一些机构和人为约定来解决。常见的解决方案有两种： 1）公钥的合法拥有者，通过官方渠道声明其密钥的数据指纹： 既然时官方发布的信息，那么身份的合法性是有保证的；用户在获取公钥后也生成一个数据指纹，通过对比这两个数据指纹就知道公钥内容是否被修改过；SSH的身份验证实际上就是这个原理。 2）通过一些权威的机构来完成这些验证： 比如https使用的证书就是由CA机构签发的，这个在后面讲https原理时再做具体介绍。 我们常见的对于上面这些加密算法的经典应用就是ssh和https了，它们都是使用这些加密算法实现的网络协议。下面我们对ssh和https的工作原理进行下介绍，一方面当做上面这些加密算法的实例讲解，帮助大家了解这些算法的经典应用；另一方面，也帮助大家更深入的理解ssh和https是什么，以及它们是怎样工作的。 三、SSH工作原理 1. SSH是什么？简单来说，SSH就是一种网络协议，主要用于计算机之间的加密登录与数据传输，使用方式如下： 1# ssh user@host 表示要以user这个用户的身份登录host这台网络机器。也可以省略前面的user，这样来用ssh host，表示以当前本地登录的用户名登录host这台网络机器。 早期，人们主要是通过telnet协议进行计算机之间的登录操作，但是它有一个很严重的安全隐患就是“数据是明文传输的”，登录时传输的包括用户名和密码在内的所有信息都有可能会被恶意拦截而暴露。而SSH则是将登录信息全部加密后进行传输的，因此使用SSH进行登录时安全的，即使数据在传输过程中被截获，里面的密码已经被加密而不会泄露。 现在SSH作为互联网安全的一个基本解决方案，已经在全世界获得推广，且目前已经成为Linux系统的标准配置。需要说明的是，SSH只是一种协议，它有多种软件实现，既有商业的，也有开源的。OpenSSH是当前使用最为广泛的一个SSH协议的开源实现。 2. SSH工作原理其实SSH是充分利用了公钥加密/非对称机密 、对称加密 和 单向加密 来实现数据安全登录的。在使用SSH进行通信时，通信过程分为以下几个步骤： 1）生成会话密钥： 这个会话密钥，不是密钥对儿中公钥或私钥，而是通过密钥协商技术生成密钥。这个密钥会被通过被登录机器的密钥对进行加密后传输，用于后续所有（通过对称加密方式进行的)加密通信。 2）用户身份认证（登录）：* 这个对登录者进行身份验证的过程是通过登录者的密钥对儿对数据进行加解密验证实现的，这个过程中传输的所有数据都是通过上一步生成的密钥加密过的。 3）数据加密通信： 后面就行基于第1步生成的密钥进行数据加密传输的通信过程了。 下面来看具体解析。 账号密码安全登录的实现上面提到，SSH是通过对数据进行加密后进行传输来保证数据安全的。但是，SSH的数据加密采用的是对称加密算法，只是对称加密所使用的密钥是通过公钥加密/非对称加密实现加密后的安全传输的。另外，每台Linux机器都有自己的密钥对儿（通常放在/etc/ssh目录下），这个密钥对儿跟具体的用户无关。其工作流程是： 1）在主机A上向主机B发送连接请求； 2）主机B在与用户建立连接后，把自己的公钥发送给主机A； 3）主机A通过密钥协商技术产生一个随机密钥，然后使用主机B的公钥对这个随机密钥进行加密后发送给主机B; 4） 主机B接收到主机A发送过来的密文形式的密钥后，通过自己的私钥进行解密，得到对称加密使用的密钥明文；至此，会话密钥已经生成完毕了； 5）主机A通过生成的会话密钥对账号和密码等信息进行加密然后发送给主机B； 6）主机B接收到加密信息后，使用会话密钥进行解密，从而得到明文的账号和密码进行账号验证； 7）主机B在验证账号和密码后通知主机A是否登录成功； 这样即便有人结果了账号密码信息，也是密文信息，并不能知道里面是什么内容。貌似已经OK了，但是，主机A怎么验证主机B的身份呢？如果有主机C冒充主机B截获了登录请求，将自己伪造的公钥发送给主机A，怎么办？尽管信息是加密过的，通信过程也是合法的，但是通信信息都被主机C截获了，其实这就是所谓的“中间人攻击”（Man-in-the-middle attack）。其实，对主机B进行验证就是对主机B发送过来的公钥的合法性进行验证的过程。 公钥合法性验证的实现上面我们提到过，验证公钥的合法性有两种方式： 1）验证公钥的官方发布的公钥数据指纹 2）通过权威的结构进行验证 SSH主要用于机器之间的安全登录，因此通常不会通过权威的机构去签发证书，它主要是通过验证数据指纹的方式来验证公钥的合法性的。公钥的合法性验证是发生在主机A接收到主机B发送的公钥之后，主机A向主机B协商产生会话密钥之前，也就是上个部分所列举的数据机密时间的第2个步骤和第3个步骤之间。具体的工作流程如下： 1）上个部分所列举的数据加密实现的第1-2步； 2）主机A会去当前用户家目录下的.ssh/known_hosts文件中查找是否存在该机器的公钥，如果不存在，表示主机A是第一次与该主机进行通信，那么主机A会计算出该公钥的数据指纹并要求用户对该指纹进行合法性确认。就是我们经常看到的的这样子： 3）用户需要把目标主机管理员公布的公钥的数据指纹与主机A计算得到的数据指纹进行比对，如果一致，则说明该公钥是合法的；如果不一致则说明不合法； 4）用户如果确认该公钥是合法的，则输入yes表示继续后面的连接，主机A则会把这个公钥的内容保存到当前用户家目录下的.ssh/known_hosts文件中，然后提示用户输入密码，如下图所示：下次再登录，执行到步骤2时，主机A发现该公钥已经在.ssh/known_hosts文件中存在了，就不用要求再次确认了，而是会直接提示输出密码： 5）至此，主机B的身份合法性验证就结束了。 每个用户都有自己的kown_hosts文件，它们是相互独立的。我们也可以为所有用户保存一份公共的可信赖的远程主机的公钥，这个文件通常是/etc/ssh/ssh_known_hosts。 问题：假如之前我们通过ssh登录过的一台机器的IP被绑定到其他机器上了会出现什么情况？当机器A接收到机器B的公钥指纹时，发现knowns_hosts文件中虽然有机器B的公钥，但是计算得出的公钥指纹与机器B发送过来的公钥指纹不一致。这肯定是不一致的，因为每台机器的密钥对都是随机生成的，几乎不可能出现重复。因此，我们会看到如下提示信息： 上面的大概意思是，主机A发现主机B的公钥指纹对不上了，怀疑我们正在遭受中间人攻击（即有人在冒充主机B），并且密码验证方式和键盘交互验证方式都被禁止使用了。其实，我们自己知道是因为IP被绑定到其他机器上引起的这个问题，所以我们如果想继续登录新的主机B，只需要在.ssh/known_hosts文件中把原来保存的主机B的公钥删掉就可以了。 3. SSH免密钥登录的实现使用SSH免密钥登录的优点大家都知道，SSH免密钥登录是通过公钥认证的，用户登录时只需要提供用户名，而不需要输入密码。其实其优点不止这一个，我们来总结下： 1）使用账号和密码进行登录时，由于用户无法设置空密码，因此每次登录都要输入密码。而且即使系统允许给用户设置空密码，也是十分危险的行为。而公钥认证允许用户给私钥设置空密码，同时还能保证安全性。 2）使用账号和密码进行登录时密码容易被人看到，且密码也容易被猜到；而公钥认证所使用的密钥不用手动输入，而且内容很长，因此安全性比较高。 3）使用账号和密码进行登录时，服务器上的一个账号如果想给多个人同时使用，机器密码维护工作会变得很繁琐，因为他们所有人都需要知道密码是什么，当修改密码也要通知他们每个人。而使用公钥认证只需要把它们的公钥保存在服务器上，如果要取消某个人的操作权限，只需要把这个人的公钥删掉，而不需要修改服务器密码。 SSH免密钥登录过程其实登录的过程就是被登录端对登录用户进行“身份验证”的过程，前面是通过账号和密码来验证用户身份，因为密码应该只有该账号的拥有者才知道。而我们知道公钥加密算法中，用公钥加密的数据只能由与其配对的私钥才能解密，而私钥只有用户自己才有。那么，我们是否可以通过这种方式来验证用户身份呢？实际上SSH免密钥登录就是这样的原理。比如，我们想在主机A上以root用户以SSH免密钥的方式登录主机B，登录验证过程是这样的： 1）主机A与主机B协商产生会话密钥； 2）主机A会向主机B发送一个登录请求（如：root@192.168.1.2），发送的信息包括用户名root和root的公钥指纹，且所有信息都是通过会话密钥加密过的。 3）主机B通过会话密钥解密主机A发送的数据得到请求登录的用户名root和root的公钥指纹，然后读取root用户家目录下的所有公钥数据（/root/.ssh/autorized_keys文件中），并分别通过单向加密算法获取各公钥的数据指纹与主机A发送过来的数据指纹做对比，从而找到主机A上的root用户的公钥； 4）主机B使用找到的root用户的公钥对一个随机数进行加密发送发送给主机A； 5）主机A使用root用户的私钥对主机B发送的随机数密文进行解密，然后把解密结果发送给主机B; 6）主机B验证主机A解密后的数据与自己发送的数据一致，则对root用户的身份验证成功； 那么主机A是怎样获取root用户的私钥的呢？主机B又是怎样获取root用户的公钥的呢？ 这个就是实现SSH免密钥登录所要配置的内容： 1）生成密钥对儿：在当前机器A上，可以通过ssh-keygen命令生成一个ssh密钥对儿，一路回车就可以；生成的密钥对儿默认保存在当前登录用户家目录下的.ssh目录，也可以指定保存目录。我们当前是以root用户登录，因此是保存在/root/.ssh目录： 2）我们可以把这个密钥对儿中的两个文件复制到其他用户家目录的.ssh目录下（如/home/wader/.ssh/目录），也可以复制到其他任意目录。需要说明的是一定要注意目录和文件的权限：.ssh 目录的权限必须是0700，authorized_keys 文件权限必须是0600。 3）当在主机A上通过 ssh root@hostB进行登录时，主机A会尝试读取登录用户的家目录下的私钥文件（这里是以root用户登录主机B，因此主机A会读取/root/.ssh/id_rsa文件作为私钥），也可以通过-i选项指定要使用的私钥文件； 4）我们需要手动把公钥的内容复制到要登录机器B的相应用户（如root）家目录下的指定文件中：/home/root/.ssh/autorized_keys；可以使用ssh-copy-id root@hostB命令直接完成这个操作，也可以通过复制粘贴的方式来完成； 5）在当前机器上就可以通过ssh私钥使用root用户登录机器B了。 4. ssh免密钥登录在git中的使用我们在管理git仓库中的项目时，可以使用http/https协议，也可以使用ssh协议来管理我们的项目代码： http/https协议： 12http://192.168.1.1/GROUP_OR_USER/PROJECT_NAME.githttps://192.168.1.1/GROUP_OR_USER/PROJECT_NAME.git ssh协议: 1ssh://git@192.168.1.1/GROUP_OR_USER/PROJECT_NAME.git 无论使用http/https协议还是ssh协议来管理项目仓库，对于非公开的仓库都是需要进行登录（即账户身份验证）的。如果我们使用http/https协议的话，就需要提供用户名和密码进行验证；如果我们使用ssh协议的话，就可以把我们公钥保存到项目仓库机器的指定位置，来通过非对称加密的方式进行身份验证，验证的原理上面已经详细说明过了。 四、HTTPS工作原理 HTTPS实际上就是HTTP协议和SSL/TSL协议的组合，可以把HTTPS大致理解为“HTTP over SSL”或“HTTP over TSL”。关于它们的相关介绍，可以参考这篇文章。对于HTTPS我们应该有以下几个认知： 1）使用HTTPS传输数据是安全的，因为数据都是被加密传输的； 2）使用HTTPS需要在服务器端配置密钥对； 3）使用HTTPS需要花钱找专业的权威机构进行CA证书的签发。 那么使用HTTPS与网站服务器进行交互的流程和原理到底是怎样的呢？让我们先以逆向思考的方式来进行说明： 我们说过，公钥加密/非对称加密方式虽然安全，但是由于密钥过长，加密和解密速度都远远低于对称加密。因此，出于对性能方面的考虑，HTTPS并不是把所有传输的数据都使用公钥加密的方式进行机密性的保护，而是继续使用对称加密的方式来加密数据。还有一个原因就是，使用公钥机密算法来保证数据机密性的话，需要通信双方都要有密钥对儿，否则总有一方发出的数据是能被对方公布的公钥解密的。 既然时使用对称加密的方式加密数据，就需要有一个通信双方都知道的加解密所使用的密钥。HTTPS是通过上面提到的密钥交换技术来动态协商这个密钥的，实际上就是由客户端生成一个随机密钥，然后发送给服务器端，这样就解决了密钥的管理问题。 既然说HTTPS是安全的，那么客户端生成的这个随机密钥肯定不能以明文的方式发送给服务器端啊。是的，当客户端以https的方式访问一个站点时，该站点会自动下发其公钥信息。客户端会使用这个公钥对产生的随机密钥进行加密，然后传送给服务器端。服务器端以自己的私钥对这个密文进行解密，然后得到这个密钥的明文内容。至此，客户端与服务端用于对称加密和解密的密钥协商与传输工作已经安全的完成了。 那么要通过网络获取服务器端的公钥信息，那么怎么验证该公钥信息的合法性呢？我们上面说过，不是所有问题都能依赖技术来解决的。这里要验证公钥信息的合法性就要依靠CA证书签发机构了，网站服务的提供者必须找一个大家都信任的机构来对他提供的公钥进行签名，用户得到一个网站下发的公钥后看到有这个机构的签名就认为这个公钥是合法的，是可信赖的。 那么CA机构的签名要以什么样的形式来提供呢？实际上网站服务器下发给客户端（通常是浏览器）的公钥已经不仅仅是密钥对儿中公钥的内容了，而是包含了证书签发机构写入的其他信息的CA证书。这个CA证书中包括证书签发机构的标识和公钥的数据指纹，当然还有包含网站服务提供者的公钥信息以及证书到期时间等等。但是，我们前面提到过，单向加密只能保证数据的完整性，不能保证数据机密性。CA证书的伪造者完全可以伪造公钥信息并生成相应的数据指纹，然后发送给用户。那么现在的问题就变成了要验证CA证书中公钥的合法性以及CA证书提供者的身份了。貌似问题只是转移了，而没有被解决。 其实每个CA证书的签发机构也都有自己的密钥对儿，他们放在CA证书中的公钥的数据指纹时通过自己的私钥加密过的，而这些CA证书签发机构的公钥是被各浏览器厂商内置在浏览器内部的。当浏览器接收到某网站服务器下发的CA证书后会根据CA证书中签发机构的标识来读取浏览器内置的相应CA签发机构的公钥信息，通过这个公钥信息对公钥数据指纹的密文进行解密就可以得到CA证书中包含的公钥信息的真实数据指纹。浏览器再通过单向加密的方式自己计算一次CA证书中包含的公钥信息的数据指纹，两个数据指纹一致则说明这个CA证书确实是该CA机构签发的，同时也证明了CA证书中的公钥信息没有被篡改过。至此，所有的问题就都解决了。 现在我们再来以正常的顺序描述一下使用HTTPS与网站服务器进行交互的过程： 1）浏览器A与网站服务器B通过三次握手后建立网络连接。 2）浏览器A告诉网站服务器B：我想跟你通过HTTPS协议进行秘密交流。 3）网站服务器B把包含自己公钥信息的CA证书下发给浏览器A，并告诉浏览器A这个CA证书里有我的公钥信息，你决定一个对称加密使用的秘钥串，然后通过这个公钥加密后发送给我。 4） 浏览器A接收到网站服务器B下发的CA证书后，对这个CA证书的及其包含的公钥信息的合法性表示怀疑。于是根据CA证书中包含的证书签发机构的标识找到自身内置的该签发机构的公钥对CA证书中公钥的数据指纹进行解密，然后再自己计算一下CA证书中公钥的数据指纹，对了一下这两个数据指纹是一致的。浏览器A放心了，知道这个CA证书是合法的，CA证书中的公钥也没有被篡改过。 5）然后浏览器A通过通过密钥协商技术产生了一个随机的字符串作为与网站服务器B进行秘密通信的密钥，并把这个密钥通过CA证书中包含的公钥进行加密后发送给网站服务器B。 6）网站服务器B接收到密文格式的密钥后，通过自己的私钥进行解密得到密钥的明文内容。 7）浏览器A和网站服务器B开始了秘密交流。 五、参考资料 某哥视频学习笔记 http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html http://www.techug.com/post/https-ssl-tls.html]]></content>
      <categories>
        <category>网络相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTTP协议]]></title>
    <url>%2F2018%2F09%2F17%2FHTTP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[转自 ranyonsue HTTP简介HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。 HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。 HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。 http请求-响应模型.jpg 主要特点1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。5、支持B/S及C/S模式。 HTTP之URLHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息 URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成： http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name从上面的URL可以看出，一个完整的URL包括以下几部分：1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符 2.域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用 3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口 4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/” 5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名 6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分 7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。 （原文：http://blog.csdn.net/ergouge/article/details/8185219 ） URI和URL的区别URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的URI一般由三部组成：①访问资源的命名机制②存放资源的主机名③资源自身的名称，由路径表示，着重强调于资源。 URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：①协议(或称为服务方式)②存有该资源的主机IP地址(有时也包括端口号)③主机资源的具体地址。如目录和文件名等 URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。 在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。相反的是，URL类可以打开一个到达资源的流。 HTTP之请求消息Request客户端发送一个HTTP请求到服务器的请求消息包括以下格式： 请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。 Http请求消息结构.png 请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。 Get请求例子，使用Charles抓取的request：1234567GET /562f25980001b1b106000338.jpg HTTP/1.1Host img.mukewang.comUser-Agent Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36Accept image/webp,image/*,*/*;q=0.8Referer http://www.imooc.com/Accept-Encoding gzip, deflate, sdchAccept-Language zh-CN,zh;q=0.8 第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。 第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等 第三部分：空行，请求头部后面的空行是必须的即使第四部分的请求数据为空，也必须有空行。 第四部分：请求数据也叫主体，可以添加任意的其他数据。这个例子的请求数据为空。 POST请求例子，使用Charles抓取的request：12345678POST / HTTP1.1Host:www.wrox.comUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)Content-Type:application/x-www-form-urlencodedContent-Length:40Connection: Keep-Alivename=Professional%20Ajax&amp;publisher=Wiley 第一部分：请求行，第一行明了是post请求，以及http1.1版本。第二部分：请求头部，第二行至第六行。第三部分：空行，第七行的空行。第四部分：请求数据，第八行。 HTTP之响应消息Response一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。 HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。 http响应消息格式.jpg 例子 12345678910HTTP/1.1 200 OKDate: Fri, 22 May 2009 06:07:21 GMTContent-Type: text/html; charset=UTF-8&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;!--body goes here--&gt; &lt;/body&gt;&lt;/html&gt; 第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok） 第二部分：消息报头，用来说明客户端要使用的一些附加信息第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8 第三部分：空行，消息报头后面的空行是必须的第四部分：响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文。 HTTP之状态码状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别: 1xx：指示信息–表示请求已接收，继续处理2xx：成功–表示请求已被成功接收、理解、接受3xx：重定向–要完成请求必须进行更进一步的操作4xx：客户端错误–请求有语法错误或请求无法实现5xx：服务器端错误–服务器未能实现合法的请求常见状态码： 1234567200 OK //客户端请求成功400 Bad Request //客户端请求有语法错误，不能被服务器所理解401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden //服务器收到请求，但是拒绝提供服务404 Not Found //请求资源不存在，eg：输入了错误的URL500 Internal Server Error //服务器发生不可预期的错误503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常 更多状态码http://www.runoob.com/http/http-status-codes.html HTTP请求方法根据HTTP标准，HTTP请求可以使用多种请求方法。HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。 12345678GET 请求指定的页面信息，并返回实体主体。HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。PUT 从客户端向服务器传送的数据取代指定的文档的内容。DELETE 请求服务器删除指定的页面。CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。OPTIONS 允许客户端查看服务器的性能。TRACE 回显服务器收到的请求，主要用于测试或诊断。 HTTP工作原理HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。 以下是 HTTP 请求/响应的步骤： 1、客户端连接到Web服务器一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，http://www.oakcms.cn。 2、发送HTTP请求通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。 3、服务器接受请求并返回HTTP响应Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。 4、释放连接TCP连接若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求; 5、客户端浏览器解析HTML内容客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。 例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程： 1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址; 2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 5、释放 TCP连接; 6、浏览器将该 html 文本并显示内容; GET和POST请求的区别GET请求12345GET /books/?sex=man&amp;name=Professional HTTP/1.1Host: www.wrox.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Connection: Keep-Alive 注意最后一行是空行 POST请求123456789POST / HTTP/1.1Host: www.wrox.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 40Connection: Keep-Alivename=Professional%20Ajax&amp;publisher=Wiley 1、GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。 POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据 因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变2、传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。 而在实际开发中存在的限制主要有： GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。 因此对于GET提交时，传输数据就会受到URL长度的 限制。 POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。 3、安全性 POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击 4、Http get,post,soap协议都是在http上运行的 （1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全 （2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。 （3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式Content-type设置为: text/xml 任何数据都可以xml化。 Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息. 我们看看GET和POST的区别 GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中. GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制. GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。 GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.]]></content>
      <categories>
        <category>网络相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[TCP和UDP的区别和优缺点]]></title>
    <url>%2F2018%2F09%2F17%2FTCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9%2F</url>
    <content type="text"><![CDATA[转自 xiaobangkuaipao TCP与UDP区别总结：1、TCP面向连接（如打电话要先拨号建立连接）; UDP是无连接的，即发送数据之前不需要建立连接 2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付 Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。 3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。 4.每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信 5、TCP对系统资源要求较多，UDP对系统资源要求较少。 为什么UDP有时比TCP更有优势?UDP以其简单、传输快的优势，在越来越多场景下取代了TCP,如实时游戏。 （1）网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。 （2）TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。 采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。 3、UDP和TCP编程步骤也有些不同，如下： TCP: TCP编程的服务器端一般步骤是： 1、创建一个socket，用函数socket()； SOCKET SocketListen =socket(AF_INET,SOCK_STREAM, IPPROTO_TCP); 2、设置socket属性，用函数setsockopt(); 可选 3、绑定IP地址、端口等信息到socket上，用函数bind(); SOCKET_ERROR = bind(SocketListen,(const sockaddr)&amp;addr,sizeof(addr)) 4、开启监听，用函数listen()； SOCKET_ERROR == listen(SocketListen,2) 5、接收客户端上来的连接，用函数accept()； SOCKET SocketWaiter = accept(SocketListen, ​ Out struct sockaddr *addr Inout int addrlen); 6、收发数据，用函数send()和recv()，或者read()和write(); 7、关闭网络连接； closesocket(SocketListen);closesocket(SocketWaiter); 8、关闭监听；SOCK_STREAM这种的特点是面向连接的，即每次收发数据之前必须通过connect建立连接，而SOCK_DGRAM这种是User Datagram Protocol协议的网络通讯，它是无连接的，不可靠的。TCP编程的客户端一般步骤是： 1、创建一个socket，用函数socket()； 2、设置socket属性，用函数setsockopt(); 可选 3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选 4、设置要连接的对方的IP地址和端口等属性； 5、连接服务器，用函数connect()； 6、收发数据，用函数send()和recv()，或者read()和write(); 7、关闭网络连接； 123456int send( _In_ SOCKET s, //向哪个socket发送，accept返回的socket。 _In_ const char *buf, _In_ int len, _In_ int flags); 由于 send(SocketClient,(const char *)&amp;fh,sizeof(fh),0); recv(SocketClient,szbuf,sizeof(szbuf),0);UDP:与之对应的UDP编程步骤要简单许多，分别如下： UDP编程的服务器端一般步骤是： 1、创建一个socket，用函数socket()； 2、设置socket属性，用函数setsockopt(); 可选 3、绑定IP地址、端口等信息到socket上，用函数bind(); 4、循环接收数据，用函数recvfrom(); 5、关闭网络连接；UDP编程的客户端一般步骤是： 1、创建一个socket，用函数socket()； 2、设置socket属性，用函数setsockopt(); 可选 3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选 4、设置对方的IP地址和端口等属性; 5、发送数据，用函数sendto(); 6、关闭网络连接； 12345678int recvfrom( _In_ SOCKET s, //绑定的socket _Out_ char *buf, _In_ int len, _In_ int flags, _Out_ struct sockaddr *from, //用来接收对方的 _Inout_opt_ int *fromlen); int nres= recvfrom (pThis-&gt;m_socketListen,szBuf,sizeof(szBuf),0,(sockaddr)&amp;addrClient,&amp;nSize);//0处标志位sendto(m_socketListen,szBuffer,nSize,0,(const sockaddr)&amp;addr,sizeof(sockaddr_in)) TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。 4、将socket设置为广播属性bool optval=true;setsockopt(m_socketListen,SOL_SOCKET,SO_BROADCAST,(const char *)&amp;optval,sizeof(bool)); 5、将Socket设置为非阻塞。//bool benable=true;//ioctlsocket(m_socketListen,FIONBIO,(u_long*)&amp;benable); 6、Tcp头，20字节 7、UDP首部,8个字节]]></content>
      <categories>
        <category>网络相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RunLoop详尽总结]]></title>
    <url>%2F2018%2F09%2F17%2FRunLoop%E8%AF%A6%E5%B0%BD%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[转自 行走的少年郎 1. RunLoop简介1.1 什么是RunLoop？可以理解为字面意思：Run表示运行，Loop表示循环。结合在一起就是运行的循环的意思。哈哈，我更愿意翻译为『跑圈』。直观理解就像是不停的跑圈。 RunLoop实际上是一个对象，这个对象在循环中用来处理程序运行过程中出现的各种事件（比如说触摸事件、UI刷新事件、定时器事件、Selector事件），从而保持程序的持续运行；而且在没有事件处理的时候，会进入睡眠模式，从而节省CPU资源，提高程序性能。 1.2 RunLoop和线程RunLoop和线程是息息相关的，我们知道线程的作用是用来执行特定的一个或多个任务，但是在默认情况下，线程执行完之后就会退出，就不能再执行任务了。这时我们就需要采用一种方式来让线程能够处理任务，并不退出。所以，我们就有了RunLoop。 一条线程对应一个RunLoop对象，每条线程都有唯一一个与之对应的RunLoop对象。 我们只能在当前线程中操作当前线程的RunLoop，而不能去操作其他线程的RunLoop。 RunLoop对象在第一次获取RunLoop时创建，销毁则是在线程结束的时候。 主线程的RunLoop对象系统自动帮助我们创建好了(原理如下)，而子线程的RunLoop对象需要我们主动创建。 1.3 默认情况下主线程的RunLoop原理我们在启动一个iOS程序的时候，系统会调用创建项目时自动生成的main.m的文件。main.m文件如下所示： 12345int main(int argc, char * argv[]) &#123; @autoreleasepool &#123; return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class])); &#125;&#125; 其中UIApplicationMain函数内部帮我们开启了主线程的RunLoop，UIApplicationMain内部拥有一个无线循环的代码。上边的代码中开启RunLoop的过程可以简单的理解为如下代码： 123456789int main(int argc, char * argv[]) &#123; BOOL running = YES; do &#123; // 执行各种任务，处理各种事件 // ...... &#125; while (running); return 0;&#125; 从上边可看出，程序一直在do-while循环中执行，所以UIApplicationMain函数一直没有返回，我们在运行程序之后程序不会马上退出，会保持持续运行状态。 下图是苹果官方给出的RunLoop模型图。 从上图中可以看出，RunLoop就是线程中的一个循环，RunLoop在循环中会不断检测，通过Input sources（输入源）和Timer sources（定时源）两种来源等待接受事件；然后对接受到的事件通知线程进行处理，并在没有事件的时候进行休息。 2. RunLoop相关类下面我们来了解一下Core Foundation框架下关于RunLoop的5个类，只有弄懂这几个类的含义，我们才能深入了解RunLoop运行机制。 CFRunLoopRef：代表RunLoop的对象 CFRunLoopModeRef：RunLoop的运行模式 CFRunLoopSourceRef：就是RunLoop模型图中提到的输入源/事件源 CFRunLoopTimerRef：就是RunLoop模型图中提到的定时源 CFRunLoopObserverRef：观察者，能够监听RunLoop的状态改变 下边详细讲解下几种类的具体含义和关系。 先来看一张表示这5个类的关系图（来源：https://blog.ibireme.com/2015/05/18/runloop/）。 接着来讲解这5个类的相互关系（来源：https://blog.ibireme.com/2015/05/18/runloop/），这篇文章总结的特别好，就拿来参考一下，有兴趣的朋友可以去看看，写的很好。 一个RunLoop对象（CFRunLoopRef）中包含若干个运行模式（CFRunLoopModeRef）。而每一个运行模式下又包含若干个输入源（CFRunLoopSourceRef）、定时源（CFRunLoopTimerRef）、观察者（CFRunLoopObserverRef）。 每次RunLoop启动时，只能指定其中一个运行模式（CFRunLoopModeRef），这个运行模式（CFRunLoopModeRef）被称作CurrentMode。 如果需要切换运行模式（CFRunLoopModeRef），只能退出Loop，再重新指定一个运行模式（CFRunLoopModeRef）进入。 这样做主要是为了分隔开不同组的输入源（CFRunLoopSourceRef）、定时源（CFRunLoopTimerRef）、观察者（CFRunLoopObserverRef），让其互不影响 。 下边我们来详细讲解下这五个类： 2.1 CFRunLoopRefCFRunLoopRef就是Core Foundation框架下RunLoop对象类。我们可通过以下方式来获取RunLoop对象： Core Foundation CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象 CFRunLoopGetMain(); // 获得主线程的RunLoop对象 当然，在Foundation框架下获取RunLoop对象类的方法如下： Foundation [NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象 [NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象 2.2 CFRunLoopModeRef系统默认定义了多种运行模式（CFRunLoopModeRef），如下： kCFRunLoopDefaultMode：App的默认运行模式，通常主线程是在这个运行模式下运行 UITrackingRunLoopMode：跟踪用户交互事件（用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他Mode影响） UIInitializationRunLoopMode：在刚启动App时第进入的第一个 Mode，启动完成后就不再使用 GSEventReceiveRunLoopMode：接受系统内部事件，通常用不到 kCFRunLoopCommonModes：伪模式，不是一种真正的运行模式（后边会用到） 其中kCFRunLoopDefaultMode、UITrackingRunLoopMode、kCFRunLoopCommonModes是我们开发中需要用到的模式，具体使用方法我们在 2.3 CFRunLoopTimerRef 中结合CFRunLoopTimerRef来演示说明。 2.3 CFRunLoopTimerRefCFRunLoopTimerRef是定时源（RunLoop模型图中提到过），理解为基于时间的触发器，基本上就是NSTimer（哈哈，这个理解就简单了吧）。 下面我们来演示下CFRunLoopModeRef和CFRunLoopTimerRef结合的使用用法，从而加深理解。 首先我们新建一个iOS项目，在Main.storyboard中拖入一个Text View。 在ViewController.m文件中加入以下代码，Demo中请调用[self ShowDemo1];来演示。 1234567891011121314- (void)viewDidLoad &#123; [super viewDidLoad]; // 定义一个定时器，约定两秒之后调用self的run方法 NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES]; // 将定时器添加到当前RunLoop的NSDefaultRunLoopMode下 [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];&#125;- (void)run&#123; NSLog(@&quot;---run&quot;);&#125; 然后运行，这时候我们发现如果我们不对模拟器进行任何操作的话，定时器会稳定的每隔2秒调用run方法打印。 但是当我们拖动Text View滚动时，我们发现：run方法不打印了，也就是说NSTimer不工作了。而当我们松开鼠标的时候，NSTimer就又开始正常工作了。 这是因为： 当我们不做任何操作的时候，RunLoop处于NSDefaultRunLoopMode下。 而当我们拖动Text View的时候，RunLoop就结束NSDefaultRunLoopMode，切换到了UITrackingRunLoopMode模式下，这个模式下没有添加NSTimer，所以我们的NSTimer就不工作了。 但当我们松开鼠标的时候，RunLoop就结束UITrackingRunLoopMode模式，又切换回NSDefaultRunLoopMode模式，所以NSTimer就又开始正常工作了。 你可以试着将上述代码中的[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];语句换为[[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];，也就是将定时器添加到当前RunLoop的UITrackingRunLoopMode下，你就会发现定时器只会在拖动Text View的模式下工作，而不做操作的时候定时器就不工作。 那难道我们就不能在这两种模式下让NSTimer都能正常工作吗？ 当然可以，这就用到了我们之前说过的伪模式（kCFRunLoopCommonModes），这其实不是一种真实的模式，而是一种标记模式，意思就是可以在打上Common Modes标记的模式下运行。 那么哪些模式被标记上了Common Modes呢？ NSDefaultRunLoopMode 和 UITrackingRunLoopMode。 所以我们只要我们将NSTimer添加到当前RunLoop的kCFRunLoopCommonModes（Foundation框架下为NSRunLoopCommonModes）下，我们就可以让NSTimer在不做操作和拖动Text View两种情况下愉快的正常工作了。 具体做法就是讲添加语句改为[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes]; 既然讲到了NSTimer，这里顺便讲下NSTimer中的scheduledTimerWithTimeInterval方法和RunLoop的关系。添加下面的代码： 1[NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES]; 这句代码调用了scheduledTimer返回的定时器，NSTimer会自动被加入到了RunLoop的NSDefaultRunLoopMode模式下。这句代码相当于下面两句代码： 12NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode]; 2.4 CFRunLoopSourceRefCFRunLoopSourceRef是事件源（RunLoop模型图中提到过），CFRunLoopSourceRef有两种分类方法。 第一种按照官方文档来分类（就像RunLoop模型图中那样）： Port-Based Sources（基于端口） Custom Input Sources（自定义） Cocoa Perform Selector Sources 第二种按照函数调用栈来分类： Source0 ：非基于Port Source1：基于Port，通过内核和其他线程通信，接收、分发系统事件 这两种分类方式其实没有区别，只不过第一种是通过官方理论来分类，第二种是在实际应用中通过调用函数来分类。 下边我们举个例子大致来了解一下函数调用栈和Source。 在我们的项目中的Main.storyboard中添加一个Button按钮，并添加点击动作。 然后在点击动作的代码中加入一句输出语句，并打上断点，如下图所示： 然后运行程序，并点击按钮。 然后在项目中单击下下图红色部分。 可以看到如下图所示就是点击事件产生的函数调用栈。 所以点击事件是这样来的： 首先程序启动，调用16行的main函数，main函数调用15行UIApplicationMain函数，然后一直往上调用函数，最终调用到0行的BtnClick函数，即点击函数。 同时我们可以看到11行中有Sources0，也就是说我们点击事件是属于Sources0函数的，点击事件就是在Sources0中处理的。 而至于Sources1，则是用来接收、分发系统事件，然后再分发到Sources0中处理的。 2.5 CFRunLoopObserverRefCFRunLoopObserverRef是观察者，用来监听RunLoop的状态改变 CFRunLoopObserverRef可以监听的状态改变有以下几种： 123456789typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123; kCFRunLoopEntry = (1UL &lt;&lt; 0), // 即将进入Loop：1 kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1), // 即将处理Timer：2 kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // 即将处理Source：4 kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // 即将进入休眠：32 kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6), // 即将从休眠中唤醒：64 kCFRunLoopExit = (1UL &lt;&lt; 7), // 即将从Loop中退出：128 kCFRunLoopAllActivities = 0x0FFFFFFFU // 监听全部状态改变 &#125;; 下边我们通过代码来监听下RunLoop中的状态改变。 在ViewController.m中添加如下代码，Demo中请调用[self showDemo2];方法。 1234567891011121314- (void)viewDidLoad &#123; [super viewDidLoad]; // 创建观察者 CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(CFAllocatorGetDefault(), kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) &#123; NSLog(@&quot;监听到RunLoop发生改变---%zd&quot;,activity); &#125;); // 添加观察者到当前RunLoop中 CFRunLoopAddObserver(CFRunLoopGetCurrent(), observer, kCFRunLoopDefaultMode); // 释放observer，最后添加完需要释放掉 CFRelease(observer);&#125; 然后运行，看下打印结果，如下图。 可以看到RunLoop的状态在不断的改变，最终变成了状态 32，也就是即将进入睡眠状态，说明RunLoop之后就会进入睡眠状态。 3. RunLoop原理好了，五个类都讲解完了，下边开始放大招了。这下我们就可以来理解RunLoop的运行逻辑了。 下边上一张之前提到的文章中博主提供的运行逻辑图（来源：https://blog.ibireme.com/2015/05/18/runloop/） 这张图对于我们理解RunLoop来说太有帮助了，下边我们可以来说下官方文档给我们的RunLoop逻辑。 在每次运行开启RunLoop的时候，所在线程的RunLoop会自动处理之前未处理的事件，并且通知相关的观察者。 具体的顺序如下： 通知观察者RunLoop已经启动 通知观察者即将要开始的定时器 通知观察者任何即将启动的非基于端口的源 启动任何准备好的非基于端口的源 如果基于端口的源准备好并处于等待状态，立即启动；并进入步骤9 通知观察者线程进入休眠状态 将线程置于休眠知道任一下面的事件发生： 某一事件到达基于端口的源 定时器启动 RunLoop设置的时间已经超时 RunLoop被显示唤醒 通知观察者线程将被唤醒 处理未处理的事件 如果用户定义的定时器启动，处理定时器事件并重启RunLoop。进入步骤2 如果输入源启动，传递相应的消息 如果RunLoop被显示唤醒而且时间还没超时，重启RunLoop。进入步骤2 通知观察者RunLoop结束。 4. RunLoop实战应用哈哈，讲了这么多云里雾里的原理知识，下边终于到了实战应用环节。 光弄懂是没啥用的，能够实战应用才是硬道理。下面讲解一下RunLoop的几种应用。 4.1 NSTimer的使用NSTimer的使用方法在讲解CFRunLoopTimerRef类的时候详细讲解过，具体参考上边 2.3 CFRunLoopTimerRef。 4.2 ImageView推迟显示有时候，我们会遇到这种情况：当界面中含有UITableView，而且每个UITableViewCell里边都有图片。这时候当我们滚动UITableView的时候，如果有一堆的图片需要显示，那么可能会出现卡顿的现象。 怎么解决这个问题呢？ 这时候，我们应该推迟图片的显示，也就是ImageView推迟显示图片。有两种方法： 1. 监听UIScrollView的滚动因为UITableView继承自UIScrollView，所以我们可以通过监听UIScrollView的滚动，实现UIScrollView相关delegate即可。 2. 利用PerformSelector设置当前线程的RunLoop的运行模式利用performSelector方法为UIImageView调用setImage:方法，并利用inModes将其设置为RunLoop下NSDefaultRunLoopMode运行模式。代码如下： 1[self.imageView performSelector:@selector(setImage:) withObject:[UIImage imageNamed:@&quot;tupian&quot;] afterDelay:4.0 inModes:NSDefaultRunLoopMode]; 下边利用Demo演示一下该方法。 在项目中的Main.storyboard中添加一个UIImageView，并添加属性，并简单添加一下约束（不然无法显示）如下图所示。 在项目中拖入一张图片，比如下图。 然后我们在touchesBegan方法中添加下面的代码，在Demo中请在touchesBegan中调用[self showDemo3];方法。 1234- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123; [self.imageView performSelector:@selector(setImage:) withObject:[UIImage imageNamed:@&quot;tupian&quot;] afterDelay:4.0 inModes:@[NSDefaultRunLoopMode]];&#125; 运行程序，点击一下屏幕，然后拖动UIText View，拖动4秒以上，发现过了4秒之后，UIImageView还没有显示图片，当我们松开的时候，则显示图片，效果如下： 这样我们就实现了在拖动完之后，在延迟显示UIImageView。 4.3 后台常驻线程（很常用）我们在开发应用程序的过程中，如果后台操作特别频繁，经常会在子线程做一些耗时操作（下载文件、后台播放音乐等），我们最好能让这条线程永远常驻内存。 那么怎么做呢？ 添加一条用于常驻内存的强引用的子线程，在该线程的RunLoop下添加一个Sources，开启RunLoop。 具体实现过程如下： 在项目的ViewController.m中添加一条强引用的thread线程属性，如下图： 在viewDidLoad中创建线程self.thread，使线程启动并执行run1方法，代码如下。在Demo中，请在viewDidLoad调用[self showDemo4];方法。 123456789101112131415161718192021- (void)viewDidLoad &#123; [super viewDidLoad]; // 创建线程，并调用run1方法执行任务 self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run1) object:nil]; // 开启线程 [self.thread start]; &#125;- (void) run1&#123; // 这里写任务 NSLog(@&quot;----run1-----&quot;); // 添加下边两句代码，就可以开启RunLoop，之后self.thread就变成了常驻线程，可随时添加任务，并交于RunLoop处理 [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode]; [[NSRunLoop currentRunLoop] run]; // 测试是否开启了RunLoop，如果开启RunLoop，则来不了这里，因为RunLoop开启了循环。 NSLog(@&quot;未开启RunLoop&quot;);&#125; 运行之后发现打印了—-run1—–，而未开启RunLoop则未打印。 这时，我们就开启了一条常驻线程，下边我们来试着添加其他任务，除了之前创建的时候调用了run1方法，我们另外在点击的时候调用run2方法。 那么，我们在touchesBegan中调用PerformSelector，从而实现在点击屏幕的时候调用run2方法。Demo地址。具体代码如下： 12345678910- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123; // 利用performSelector，在self.thread的线程中调用run2方法执行任务 [self performSelector:@selector(run2) onThread:self.thread withObject:nil waitUntilDone:NO];&#125;- (void) run2&#123; NSLog(@&quot;----run2------&quot;);&#125; 经过运行测试，除了之前打印的—-run1—–，每当我们点击屏幕，都能调用—-run2——。这样我们就实现了常驻线程的需求。 彻底学会多线程系列其他文章： iOS多线程–彻底学会多线程之『pthread、NSThread』 iOS多线程–彻底学会多线程之『GCD』 iOS多线程–彻底学会多线程之『NSOperation』]]></content>
      <categories>
        <category>RunLoop</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pthread、NSThread]]></title>
    <url>%2F2018%2F09%2F17%2Fpthread%E3%80%81NSThread%2F</url>
    <content type="text"><![CDATA[转自 行走的少年郎 本文用来介绍 iOS 多线程中，pthread、NSThread 的使用方法及实现。第一部分：pthread 的使用、其他相关方法。第二部分：NSThread 的使用、线程相关用法、线程状态控制方法、线程之间的通信、线程安全和线程同步，以及线程的状态转换相关知识。 文中 Demo 我已放在了 Github 上，Demo 链接：传送门 1. pthread1.1 pthread 简介pthread 是一套通用的多线程的 API，可以在Unix / Linux / Windows 等系统跨平台使用，使用 C 语言编写，需要程序员自己管理线程的生命周期，使用难度较大，我们在 iOS 开发中几乎不使用 pthread，但是还是来可以了解一下的。 引自 百度百科POSIX 线程（POSIX threads），简称 Pthreads，是线程的 POSIX 标准。该标准定义了创建和操纵线程的一整套 API。在类Unix操作系统（Unix、Linux、Mac OS X等）中，都使用 Pthreads 作为操作系统的线程。Windows 操作系统也有其移植版 pthreads-win32。 引自 维基百科POSIX 线程（英语：POSIX Threads，常被缩写 为 Pthreads）是 POSIX 的线程标准，定义了创建和操纵线程的一套 API。实现 POSIX 线程标准的库常被称作 Pthreads，一般用于 Unix-like POSIX 系统，如 Linux、Solaris。但是 Microsoft Windows 上的实现也存在，例如直接使用 Windows API 实现的第三方库 pthreads-w32；而利用 Windows 的 SFU/SUA 子系统，则可以使用微软提供的一部分原生 POSIX API。 1.2 pthread 使用方法 首先要包含头文件#import &lt;pthread.h&gt; 其次要创建线程，并开启线程执行任务 12345678910111213// 1. 创建线程: 定义一个pthread_t类型变量pthread_t thread;// 2. 开启线程: 执行任务pthread_create(&amp;thread, NULL, run, NULL);// 3. 设置子线程的状态设置为 detached，该线程运行结束后会自动释放所有资源pthread_detach(thread);void * run(void *param) // 新线程调用方法，里边为需要执行的任务&#123;NSLog(@&quot;%@&quot;, [NSThread currentThread]);return NULL;&#125; pthread_create(&amp;thread, NULL, run, NULL); 中各项参数含义： 第一个参数&amp;thread是线程对象，指向线程标识符的指针 第二个是线程属性，可赋值NULL 第三个run表示指向函数的指针(run对应函数里是需要在新线程中执行的任务) 第四个是运行函数的参数，可赋值NULL 1.3 pthread 其他相关方法 pthread_create() 创建一个线程 pthread_exit() 终止当前线程 pthread_cancel() 中断另外一个线程的运行 pthread_join() 阻塞当前的线程，直到另外一个线程运行结束 pthread_attr_init() 初始化线程的属性 pthread_attr_setdetachstate() 设置脱离状态的属性（决定这个线程在终止时是否可以被结合） pthread_attr_getdetachstate() 获取脱离状态的属性 pthread_attr_destroy() 删除线程的属性 pthread_kill() 向线程发送一个信号 2. NSThreadNSThread 是苹果官方提供的，使用起来比 pthread 更加面向对象，简单易用，可以直接操作线程对象。不过也需要需要程序员自己管理线程的生命周期(主要是创建)，我们在开发的过程中偶尔使用 NSThread。比如我们会经常调用[NSThread currentThread]来显示当前的进程信息。 下边我们说说 NSThread 如何使用。 2.1 创建、启动线程 先创建线程，再启动线程 123456789// 1. 创建线程NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];// 2. 启动线程[thread start]; // 线程一启动，就会在线程thread中执行self的run方法// 新线程调用方法，里边为需要执行的任务- (void)run &#123;NSLog(@&quot;%@&quot;, [NSThread currentThread]);&#125; 创建线程后自动启动线程 1234567// 1. 创建线程后自动启动线程[NSThread detachNewThreadSelector:@selector(run) toTarget:self withObject:nil];// 新线程调用方法，里边为需要执行的任务- (void)run &#123;NSLog(@&quot;%@&quot;, [NSThread currentThread]);&#125; 隐式创建并启动线程 1234567// 1. 隐式创建并启动线程[self performSelectorInBackground:@selector(run) withObject:nil];// 新线程调用方法，里边为需要执行的任务- (void)run &#123;NSLog(@&quot;%@&quot;, [NSThread currentThread]);&#125; 2.2 线程相关用法1234567891011121314151617// 获得主线程+ (NSThread *)mainThread;// 判断是否为主线程(对象方法)- (BOOL)isMainThread;// 判断是否为主线程(类方法)+ (BOOL)isMainThread;// 获得当前线程NSThread *current = [NSThread currentThread];// 线程的名字——setter方法- (void)setName:(NSString *)n;// 线程的名字——getter方法- (NSString *)name; 2.3 线程状态控制方法 启动线程方法 12- (void)start;// 线程进入就绪状态 -&gt; 运行状态。当线程任务执行完毕，自动进入死亡状态 阻塞（暂停）线!程方法 123+ (void)sleepUntilDate:(NSDate *)date;+ (void)sleepForTimeInterval:(NSTimeInterval)ti;// 线程进入阻塞状态 强制停止线程 12+ (void)exit;// 线程进入死亡状态 2.4 线程之间的通信在开发中，我们经常会在子线程进行耗时操作，操作结束后再回到主线程去刷新 UI。这就涉及到了子线程和主线程之间的通信。我们先来了解一下官方关于 NSThread 的线程间通信的方法。 12345678910111213// 在主线程上执行操作- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait;- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray&lt;NSString *&gt; *)array;// equivalent to the first method with kCFRunLoopCommonModes// 在指定线程上执行操作- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array NS_AVAILABLE(10_5, 2_0);- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait NS_AVAILABLE(10_5, 2_0);// 在当前线程上执行操作，调用 NSObject 的 performSelector:相关方法- (id)performSelector:(SEL)aSelector;- (id)performSelector:(SEL)aSelector withObject:(id)object;- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2; 下面通过一个经典的下载图片 DEMO 来展示线程之间的通信。具体步骤如下： 开启一个子线程，在子线程中下载图片。 回到主线程刷新 UI，将图片展示在 UIImageView 中。 DEMO 代码如下： 1234567891011121314151617181920212223242526272829303132333435/*** 创建一个线程下载图片*/- (void)downloadImageOnSubThread &#123;// 在创建的子线程中调用downloadImage下载图片[NSThread detachNewThreadSelector:@selector(downloadImage) toTarget:self withObject:nil];&#125;/*** 下载图片，下载完之后回到主线程进行 UI 刷新*/- (void)downloadImage &#123;NSLog(@&quot;current thread -- %@&quot;, [NSThread currentThread]);// 1. 获取图片 imageUrlNSURL *imageUrl = [NSURL URLWithString:@&quot;https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-icon.jpg&quot;];// 2. 从 imageUrl 中读取数据(下载图片) -- 耗时操作NSData *imageData = [NSData dataWithContentsOfURL:imageUrl];// 通过二进制 data 创建 imageUIImage *image = [UIImage imageWithData:imageData];// 3. 回到主线程进行图片赋值和界面刷新[self performSelectorOnMainThread:@selector(refreshOnMainThread:) withObject:image waitUntilDone:YES];&#125;/*** 回到主线程进行图片赋值和界面刷新*/- (void)refreshOnMainThread:(UIImage *)image &#123;NSLog(@&quot;current thread -- %@&quot;, [NSThread currentThread]);// 赋值图片到imageviewself.imageView.image = image;&#125; 2.5 NSThread 线程安全和线程同步线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。 若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。 线程同步：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。 举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。 下面，我们模拟火车票售卖的方式，实现 NSThread 线程安全和解决线程同步问题。 场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。 2.5.1 NSThread 非线程安全先来看看不考虑线程安全的代码： 123456789101112131415161718192021222324252627282930313233343536373839/*** 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票*/- (void)initTicketStatusNotSave &#123;// 1. 设置剩余火车票为 50self.ticketSurplusCount = 50;// 2. 设置北京火车票售卖窗口的线程self.ticketSaleWindow1 = [[NSThread alloc]initWithTarget:self selector:@selector(saleTicketNotSafe) object:nil];self.ticketSaleWindow1.name = @&quot;北京火车票售票窗口&quot;;// 3. 设置上海火车票售卖窗口的线程self.ticketSaleWindow2 = [[NSThread alloc]initWithTarget:self selector:@selector(saleTicketNotSafe) object:nil];self.ticketSaleWindow2.name = @&quot;上海火车票售票窗口&quot;;// 4. 开始售卖火车票[self.ticketSaleWindow1 start];[self.ticketSaleWindow2 start];&#125;/*** 售卖火车票(非线程安全)*/- (void)saleTicketNotSafe &#123;while (1) &#123;//如果还有票，继续售卖if (self.ticketSurplusCount &gt; 0) &#123;self.ticketSurplusCount --;NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数：%ld 窗口：%@&quot;, self.ticketSurplusCount, [NSThread currentThread].name]);[NSThread sleepForTimeInterval:0.2];&#125;//如果已卖完，关闭售票窗口else &#123;NSLog(@&quot;所有火车票均已售完&quot;);break;&#125;&#125;&#125; 运行后部分结果为： 可以看到在不考虑线程安全的情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。 2.5.2 NSThread 线程安全线程安全解决方案：可以给线程加锁，在一个线程执行该操作的时候，不允许其他线程进行操作。iOS 实现线程加锁有很多种方式。@synchronized、 NSLock、NSRecursiveLock、NSCondition、NSConditionLock、pthread_mutex、dispatch_semaphore、OSSpinLock、atomic(property) set/ge等等各种方式。为了简单起见，这里不对各种锁的解决方案和性能做分析，只用最简单的@synchronized来保证线程安全，从而解决线程同步问题。 考虑线程安全的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142/*** 初始化火车票数量、卖票窗口(线程安全)、并开始卖票*/- (void)initTicketStatusSave &#123;// 1. 设置剩余火车票为 50self.ticketSurplusCount = 50;// 2. 设置北京火车票售卖窗口的线程self.ticketSaleWindow1 = [[NSThread alloc]initWithTarget:self selector:@selector(saleTicketSafe) object:nil];self.ticketSaleWindow1.name = @&quot;北京火车票售票窗口&quot;;// 3. 设置上海火车票售卖窗口的线程self.ticketSaleWindow2 = [[NSThread alloc]initWithTarget:self selector:@selector(saleTicketSafe) object:nil];self.ticketSaleWindow2.name = @&quot;上海火车票售票窗口&quot;;// 4. 开始售卖火车票[self.ticketSaleWindow1 start];[self.ticketSaleWindow2 start];&#125;/*** 售卖火车票(线程安全)*/- (void)saleTicketSafe &#123;while (1) &#123;// 互斥锁@synchronized (self) &#123;//如果还有票，继续售卖if (self.ticketSurplusCount &gt; 0) &#123;self.ticketSurplusCount --;NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数：%ld 窗口：%@&quot;, self.ticketSurplusCount, [NSThread currentThread].name]);[NSThread sleepForTimeInterval:0.2];&#125;//如果已卖完，关闭售票窗口else &#123;NSLog(@&quot;所有火车票均已售完&quot;);break;&#125;&#125;&#125;&#125; 运行后结果为： 省略一部分结果图。。。 可以看出，在考虑了线程安全的情况下，加锁之后，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。 2.6 线程的状态转换当我们新建一条线程NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];，在内存中的表现为： 当调用[thread start];后，系统把线程对象放入可调度线程池中，线程对象进入就绪状态，如下图所示。 当然，可调度线程池中，会有其他的线程对象，如下图所示。在这里我们只关心左边的线程对象。 下边我们来看看当前线程的状态转换。 如果CPU现在调度当前线程对象，则当前线程对象进入运行状态，如果CPU调度其他线程对象，则当前线程对象回到就绪状态。 如果CPU在运行当前线程对象的时候调用了sleep方法\等待同步锁，则当前线程对象就进入了阻塞状态，等到sleep到时\得到同步锁，则回到就绪状态。 如果CPU在运行当前线程对象的时候线程任务执行完毕\异常强制退出，则当前线程对象进入死亡状态。 只看文字可能不太好理解，具体当前线程对象的状态变化如下图所示。 iOS多线程详尽总结系列文章： iOS多线程：『pthread、NSThread』详尽总结 iOS多线程：『GCD』详解总结 iOS多线程：『NSOperation』详解总结 iOS多线程：『RunLoop』详解总结]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[NSOperation]]></title>
    <url>%2F2018%2F09%2F17%2FNSOperation%2F</url>
    <content type="text"><![CDATA[[转自 『不羁阁』 | 行走的少年郎 - 博客 **](https://bujige.net/) 本文用来介绍 iOS 多线程中 NSOperation、NSOperationQueue 的相关知识以及使用方法。通过本文，您将了解到：NSOperation、NSOperationQueue 简介、操作和操作队列、使用步骤和基本使用方法、控制串行/并发执行、NSOperation 操作依赖和优先级、线程间的通信、线程同步和线程安全，以及 NSOperation、NSOperationQueue 常用属性和方法归纳。 文中 Demo 我已放在了 Github 上，Demo 链接：传送门 1. NSOperation、NSOperationQueue 简介NSOperation、NSOperationQueue 是苹果提供给我们的一套多线程解决方案。实际上 NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。 为什么要使用 NSOperation、NSOperationQueue？ 可添加完成的代码块，在操作完成后执行。 添加操作之间的依赖关系，方便的控制执行顺序。 设定操作执行的优先级。 可以很方便的取消一个操作的执行。 使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。 2. NSOperation、NSOperationQueue 操作和操作队列既然是基于 GCD 的更高一层的封装。那么，GCD 中的一些概念同样适用于 NSOperation、NSOperationQueue。在 NSOperation、NSOperationQueue 中也有类似的任务（操作）和队列（操作队列）的概念。 操作（Operation）： 执行操作的意思，换句话说就是你在线程中执行的那段代码。 在 GCD 中是放在 block 中的。在 NSOperation 中，我们使用 NSOperation 子类 NSInvocationOperation、NSBlockOperation，或者自定义子类来封装操作。 操作队列（Operation Queues）： 这里的队列指操作队列，即用来存放操作的队列。不同于 GCD 中的调度队列 FIFO（先进先出）的原则。NSOperationQueue 对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。 操作队列通过设置最大并发操作数（maxConcurrentOperationCount）来控制并发、串行。 NSOperationQueue 为我们提供了两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。 3. NSOperation、NSOperationQueue 使用步骤NSOperation 需要配合 NSOperationQueue 来实现多线程。因为默认情况下，NSOperation 单独使用时系统同步执行操作，配合 NSOperationQueue 我们能更好的实现异步执行。 NSOperation 实现多线程的使用步骤分为三步： 创建操作：先将需要执行的操作封装到一个 NSOperation 对象中。 创建队列：创建 NSOperationQueue 对象。 将操作加入到队列中：将 NSOperation 对象添加到 NSOperationQueue 对象中。 之后呢，系统就会自动将 NSOperationQueue 中的 NSOperation 取出来，在新线程中执行操作。 下面我们来学习下 NSOperation 和 NSOperationQueue 的基本使用。 4. NSOperation 和 NSOperationQueue 基本使用4.1 创建操作NSOperation 是个抽象类，不能用来封装操作。我们只有使用它的子类来封装操作。我们有三种方式来封装操作。 使用子类 NSInvocationOperation 使用子类 NSBlockOperation 自定义继承自 NSOperation 的子类，通过实现内部相应的方法来封装操作。 在不使用 NSOperationQueue，单独使用 NSOperation 的情况下系统同步执行操作，下面我们学习以下操作的三种创建方式。 4.1.1 使用子类 NSInvocationOperation123456789101112131415161718192021/** * 使用子类 NSInvocationOperation */- (void)useInvocationOperation &#123; // 1.创建 NSInvocationOperation 对象 NSInvocationOperation *op = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(task1) object:nil]; // 2.调用 start 方法开始执行操作 [op start];&#125;/** * 任务1 */- (void)task1 &#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125;&#125; 输出结果： 可以看到：在没有使用 NSOperationQueue、在主线程中单独使用使用子类 NSInvocationOperation 执行一个操作的情况下，操作是在当前线程执行的，并没有开启新线程。 如果在其他线程中执行操作，则打印结果为其他线程。 12// 在其他线程使用子类 NSInvocationOperation[NSThread detachNewThreadSelector:@selector(useInvocationOperation) toTarget:self withObject:nil]; 输出结果： 可以看到：在其他线程中单独使用子类 NSInvocationOperation，操作是在当前调用的其他线程执行的，并没有开启新线程。 下边再来看看 NSBlockOperation。 4.1.2 使用子类 NSBlockOperation12345678910111213141516/** * 使用子类 NSBlockOperation */- (void)useBlockOperation &#123; // 1.创建 NSBlockOperation 对象 NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; // 2.调用 start 方法开始执行操作 [op start];&#125; 输出结果： 可以看到：在没有使用 NSOperationQueue、在主线程中单独使用 NSBlockOperation 执行一个操作的情况下，操作是在当前线程执行的，并没有开启新线程。 注意：和上边 NSInvocationOperation 使用一样。因为代码是在主线程中调用的，所以打印结果为主线程。如果在其他线程中执行操作，则打印结果为其他线程。 但是，NSBlockOperation 还提供了一个方法 addExecutionBlock:，通过 addExecutionBlock: 就可以为 NSBlockOperation 添加额外的操作。这些操作（包括 blockOperationWithBlock 中的操作）可以在不同的线程中同时（并发）执行。只有当所有相关的操作已经完成执行时，才视为完成。 如果添加的操作多的话，blockOperationWithBlock: 中的操作也可能会在其他线程（非当前线程）中执行，这是由系统决定的，并不是说添加到 blockOperationWithBlock: 中的操作一定会在当前线程中执行。（可以使用 addExecutionBlock: 多添加几个操作试试）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * 使用子类 NSBlockOperation * 调用方法 AddExecutionBlock: */- (void)useBlockOperationAddExecutionBlock &#123; // 1.创建 NSBlockOperation 对象 NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; // 2.添加额外的操作 [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;4---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;5---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;6---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;7---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;8---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; // 3.调用 start 方法开始执行操作 [op start];&#125; 输出结果： 可以看出：使用子类 NSBlockOperation，并调用方法 AddExecutionBlock: 的情况下，blockOperationWithBlock:方法中的操作 和 addExecutionBlock: 中的操作是在不同的线程中异步执行的。而且，这次执行结果中 blockOperationWithBlock:方法中的操作也不是在当前线程（主线程）中执行的。从而印证了blockOperationWithBlock: 中的操作也可能会在其他线程（非当前线程）中执行。 一般情况下，如果一个 NSBlockOperation 对象封装了多个操作。NSBlockOperation 是否开启新线程，取决于操作的个数。如果添加的操作的个数多，就会自动开启新线程。当然开启的线程数是由系统来决定的。 4.1.3 使用自定义继承自 NSOperation 的子类如果使用子类 NSInvocationOperation、NSBlockOperation 不能满足日常需求，我们可以使用自定义继承自 NSOperation 的子类。可以通过重写 main 或者 start 方法 来定义自己的 NSOperation 对象。重写main方法比较简单，我们不需要管理操作的状态属性 isExecuting 和 isFinished。当 main 执行完返回的时候，这个操作就结束了。 先定义一个继承自 NSOperation 的子类，重写main方法。 12345678910111213141516171819202122// YSCOperation.h 文件#import &lt;Foundation/Foundation.h&gt;@interface YSCOperation : NSOperation@end// YSCOperation.m 文件#import &quot;YSCOperation.h&quot;@implementation YSCOperation- (void)main &#123; if (!self.isCancelled) &#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); &#125; &#125;&#125;@end 然后使用的时候导入头文件YSCOperation.h。 123456789/** * 使用自定义继承自 NSOperation 的子类 */- (void)useCustomOperation &#123; // 1.创建 YSCOperation 对象 YSCOperation *op = [[YSCOperation alloc] init]; // 2.调用 start 方法开始执行操作 [op start];&#125; 输出结果： 可以看出：在没有使用 NSOperationQueue、在主线程单独使用自定义继承自 NSOperation 的子类的情况下，是在主线程执行操作，并没有开启新线程。 下边我们来讲讲 NSOperationQueue 的创建。 4.2 创建队列NSOperationQueue 一共有两种队列：主队列、自定义队列。其中自定义队列同时包含了串行、并发功能。下边是主队列、自定义队列的基本创建方法和特点。 主队列 凡是添加到主队列中的操作，都会放到主线程中执行。 12// 主队列获取方法NSOperationQueue *queue = [NSOperationQueue mainQueue]; 自定义队列（非主队列） 添加到这种队列中的操作，就会自动放到子线程中执行。 同时包含了：串行、并发功能。 12// 自定义队列创建方法NSOperationQueue *queue = [[NSOperationQueue alloc] init]; 4.3 将操作加入到队列中上边我们说到 NSOperation 需要配合 NSOperationQueue 来实现多线程。 那么我们需要将创建好的操作加入到队列中去。总共有两种方法： 1- (void)addOperation:(NSOperation *)op; 需要先创建操作，再将创建好的操作加入到创建好的队列中去。 12345678910111213141516171819202122232425262728293031323334/** * 使用 addOperation: 将操作加入到操作队列中 */- (void)addOperationToQueue &#123; // 1.创建队列 NSOperationQueue *queue = [[NSOperationQueue alloc] init]; // 2.创建操作 // 使用 NSInvocationOperation 创建操作1 NSInvocationOperation *op1 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(task1) object:nil]; // 使用 NSInvocationOperation 创建操作2 NSInvocationOperation *op2 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(task2) object:nil]; // 使用 NSBlockOperation 创建操作3 NSBlockOperation *op3 = [NSBlockOperation blockOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [op3 addExecutionBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;4---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; // 3.使用 addOperation: 添加所有操作到队列中 [queue addOperation:op1]; // [op1 start] [queue addOperation:op2]; // [op2 start] [queue addOperation:op3]; // [op3 start]&#125; 输出结果： 可以看出：使用 NSOperation 子类创建操作，并使用 addOperation: 将操作加入到操作队列后能够开启新线程，进行并发执行。 1- (void)addOperationWithBlock:(void (^)(void))block; 无需先创建操作，在 block 中添加操作，直接将包含操作的 block 加入到队列中。 12345678910111213141516171819202122232425262728/** * 使用 addOperationWithBlock: 将操作加入到操作队列中 */- (void)addOperationWithBlockToQueue &#123; // 1.创建队列 NSOperationQueue *queue = [[NSOperationQueue alloc] init]; // 2.使用 addOperationWithBlock: 添加操作到队列中 [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;];&#125; 输出结果： 可以看出：使用 addOperationWithBlock: 将操作加入到操作队列后能够开启新线程，进行并发执行。 5. NSOperationQueue 控制串行执行、并发执行之前我们说过，NSOperationQueue 创建的自定义队列同时具有串行、并发功能，上边我们演示了并发功能，那么他的串行功能是如何实现的？ 这里有个关键属性 maxConcurrentOperationCount，叫做最大并发操作数。用来控制一个特定队列中可以有多少个操作同时参与并发执行。 注意：这里 maxConcurrentOperationCount 控制的不是并发线程的数量，而是一个队列中同时能并发执行的最大操作数。而且一个操作也并非只能在一个线程中运行。 最大并发操作数： 1maxConcurrentOperationCount maxConcurrentOperationCount 默认情况下为-1，表示不进行限制，可进行并发执行。 maxConcurrentOperationCount 为1时，队列为串行队列。只能串行执行。 maxConcurrentOperationCount 大于1时，队列为并发队列。操作并发执行，当然这个值不应超过系统限制，即使自己设置一个很大的值，系统也会自动调整为 min{自己设定的值，系统设定的默认最大值}。 123456789101112131415161718192021222324252627282930313233343536373839/** * 设置 MaxConcurrentOperationCount（最大并发操作数） */- (void)setMaxConcurrentOperationCount &#123; // 1.创建队列 NSOperationQueue *queue = [[NSOperationQueue alloc] init]; // 2.设置最大并发操作数 queue.maxConcurrentOperationCount = 1; // 串行队列// queue.maxConcurrentOperationCount = 2; // 并发队列// queue.maxConcurrentOperationCount = 8; // 并发队列 // 3.添加操作 [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; [queue addOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;4---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;];&#125; 最大并发操作数为1 输出结果：最大并发操作数为2 输出结果： 可以看出：当最大并发操作数为1时，操作是按顺序串行执行的，并且一个操作完成之后，下一个操作才开始执行。当最大操作并发数为2时，操作是并发执行的，可以同时执行两个操作。而开启线程数量是由系统决定的，不需要我们来管理。 这样看来，是不是比 GCD 还要简单了许多？ 6. NSOperation 操作依赖NSOperation、NSOperationQueue 最吸引人的地方是它能添加操作之间的依赖关系。通过操作依赖，我们可以很方便的控制操作之间的执行先后顺序。NSOperation 提供了3个接口供我们管理和查看依赖。 - (void)addDependency:(NSOperation *)op; 添加依赖，使当前操作依赖于操作 op 的完成。 - (void)removeDependency:(NSOperation *)op; 移除依赖，取消当前操作对操作 op 的依赖。 @property (readonly, copy) NSArray&lt;NSOperation *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。 当然，我们经常用到的还是添加依赖操作。现在考虑这样的需求，比如说有 A、B 两个操作，其中 A 执行完操作，B 才能执行操作。 如果使用依赖来处理的话，那么就需要让操作 B 依赖于操作 A。具体代码如下： 123456789101112131415161718192021222324252627282930/** * 操作依赖 * 使用方法：addDependency: */- (void)addDependency &#123; // 1.创建队列 NSOperationQueue *queue = [[NSOperationQueue alloc] init]; // 2.创建操作 NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^&#123; for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; // 3.添加依赖 [op2 addDependency:op1]; // 让op2 依赖于 op1，则先执行op1，在执行op2 // 4.添加操作到队列中 [queue addOperation:op1]; [queue addOperation:op2];&#125; 输出结果： 可以看到：通过添加操作依赖，无论运行几次，其结果都是 op1 先执行，op2 后执行。 7. NSOperation 优先级NSOperation 提供了queuePriority（优先级）属性，queuePriority属性适用于同一操作队列中的操作，不适用于不同操作队列中的操作。默认情况下，所有新创建的操作对象优先级都是NSOperationQueuePriorityNormal。但是我们可以通过setQueuePriority:方法来改变当前操作在同一队列中的执行优先级。 12345678// 优先级的取值typedef NS_ENUM(NSInteger, NSOperationQueuePriority) &#123; NSOperationQueuePriorityVeryLow = -8L, NSOperationQueuePriorityLow = -4L, NSOperationQueuePriorityNormal = 0, NSOperationQueuePriorityHigh = 4, NSOperationQueuePriorityVeryHigh = 8&#125;; 上边我们说过：对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。 那么，什么样的操作才是进入就绪状态的操作呢？ 当一个操作的所有依赖都已经完成时，操作对象通常会进入准备就绪状态，等待执行。 举个例子，现在有4个优先级都是 NSOperationQueuePriorityNormal（默认级别）的操作：op1，op2，op3，op4。其中 op3 依赖于 op2，op2 依赖于 op1，即 op3 -&gt; op2 -&gt; op1。现在将这4个操作添加到队列中并发执行。 因为 op1 和 op4 都没有需要依赖的操作，所以在 op1，op4 执行之前，就是出于准备就绪状态的操作。 而 op3 和 op2 都有依赖的操作（op3 依赖于 op2，op2 依赖于 op1），所以 op3 和 op2 都不是准备就绪状态下的操作。 理解了进入就绪状态的操作，那么我们就理解了queuePriority 属性的作用对象。 queuePriority 属性决定了进入准备就绪状态下的操作之间的开始执行顺序。并且，优先级不能取代依赖关系。 如果一个队列中既包含高优先级操作，又包含低优先级操作，并且两个操作都已经准备就绪，那么队列先执行高优先级操作。比如上例中，如果 op1 和 op4 是不同优先级的操作，那么就会先执行优先级高的操作。 如果，一个队列中既包含了准备就绪状态的操作，又包含了未准备就绪的操作，未准备就绪的操作优先级比准备就绪的操作优先级高。那么，虽然准备就绪的操作优先级低，也会优先执行。优先级不能取代依赖关系。如果要控制操作间的启动顺序，则必须使用依赖关系。 8. NSOperation、NSOperationQueue 线程间的通信在 iOS 开发过程中，我们一般在主线程里边进行 UI 刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。 1234567891011121314151617181920212223242526/** * 线程间通信 */- (void)communication &#123; // 1.创建队列 NSOperationQueue *queue = [[NSOperationQueue alloc]init]; // 2.添加操作 [queue addOperationWithBlock:^&#123; // 异步进行耗时操作 for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; // 回到主线程 [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123; // 进行一些 UI 刷新等操作 for (int i = 0; i &lt; 2; i++) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程 &#125; &#125;]; &#125;];&#125; 输出结果： 可以看到：通过线程间的通信，先在其他线程中执行操作，等操作执行完了之后再回到主线程执行主线程的相应操作。 9. NSOperation、NSOperationQueue 线程同步和线程安全 线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。 线程同步：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。 举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。 下面，我们模拟火车票售卖的方式，实现 NSOperation 线程安全和解决线程同步问题。场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。 9.1 NSOperation、NSOperationQueue 非线程安全先来看看不考虑线程安全的代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * 非线程安全：不使用 NSLock * 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票 */- (void)initTicketStatusNotSave &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 self.ticketSurplusCount = 50; // 1.创建 queue1,queue1 代表北京火车票售卖窗口 NSOperationQueue *queue1 = [[NSOperationQueue alloc] init]; queue1.maxConcurrentOperationCount = 1; // 2.创建 queue2,queue2 代表上海火车票售卖窗口 NSOperationQueue *queue2 = [[NSOperationQueue alloc] init]; queue2.maxConcurrentOperationCount = 1; // 3.创建卖票操作 op1 __weak typeof(self) weakSelf = self; NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^&#123; [weakSelf saleTicketNotSafe]; &#125;]; // 4.创建卖票操作 op2 NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^&#123; [weakSelf saleTicketNotSafe]; &#125;]; // 5.添加操作，开始卖票 [queue1 addOperation:op1]; [queue2 addOperation:op2];&#125;/** * 售卖火车票(非线程安全) */- (void)saleTicketNotSafe &#123; while (1) &#123; if (self.ticketSurplusCount &gt; 0) &#123; //如果还有票，继续售卖 self.ticketSurplusCount--; NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数:%d 窗口:%@&quot;, self.ticketSurplusCount, [NSThread currentThread]]); [NSThread sleepForTimeInterval:0.2]; &#125; else &#123; NSLog(@&quot;所有火车票均已售完&quot;); break; &#125; &#125;&#125; 输出结果：…… 可以看到：在不考虑线程安全，不使用 NSLock 情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。 9.2 NSOperation、NSOperationQueue 非线程安全线程安全解决方案：可以给线程加锁，在一个线程执行该操作的时候，不允许其他线程进行操作。iOS 实现线程加锁有很多种方式。@synchronized、 NSLock、NSRecursiveLock、NSCondition、NSConditionLock、pthread_mutex、dispatch_semaphore、OSSpinLock、atomic(property) set/ge等等各种方式。这里我们使用 NSLock 对象来解决线程同步问题。NSLock 对象可以通过进入锁时调用 lock 方法，解锁时调用 unlock 方法来保证线程安全。 考虑线程安全的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * 线程安全：使用 NSLock 加锁 * 初始化火车票数量、卖票窗口(线程安全)、并开始卖票 */- (void)initTicketStatusSave &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 self.ticketSurplusCount = 50; self.lock = [[NSLock alloc] init]; // 初始化 NSLock 对象 // 1.创建 queue1,queue1 代表北京火车票售卖窗口 NSOperationQueue *queue1 = [[NSOperationQueue alloc] init]; queue1.maxConcurrentOperationCount = 1; // 2.创建 queue2,queue2 代表上海火车票售卖窗口 NSOperationQueue *queue2 = [[NSOperationQueue alloc] init]; queue2.maxConcurrentOperationCount = 1; // 3.创建卖票操作 op1 __weak typeof(self) weakSelf = self; NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^&#123; [weakSelf saleTicketSafe]; &#125;]; // 4.创建卖票操作 op2 NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^&#123; [weakSelf saleTicketSafe]; &#125;]; // 5.添加操作，开始卖票 [queue1 addOperation:op1]; [queue2 addOperation:op2];&#125;/** * 售卖火车票(线程安全) */- (void)saleTicketSafe &#123; while (1) &#123; // 加锁 [self.lock lock]; if (self.ticketSurplusCount &gt; 0) &#123; //如果还有票，继续售卖 self.ticketSurplusCount--; NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数:%d 窗口:%@&quot;, self.ticketSurplusCount, [NSThread currentThread]]); [NSThread sleepForTimeInterval:0.2]; &#125; // 解锁 [self.lock unlock]; if (self.ticketSurplusCount &lt;= 0) &#123; NSLog(@&quot;所有火车票均已售完&quot;); break; &#125; &#125;&#125; 输出结果：…… 可以看出：在考虑了线程安全，使用 NSLock 加锁、解锁机制的情况下，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。 10. NSOperation、NSOperationQueue 常用属性和方法归纳10.1 NSOperation 常用属性和方法 取消操作方法 - (void)cancel; 可取消操作，实质是标记 isCancelled 状态。 判断操作状态方法 - (BOOL)isFinished; 判断操作是否已经结束。 - (BOOL)isCancelled; 判断操作是否已经标记为取消。 - (BOOL)isExecuting; 判断操作是否正在在运行。 - (BOOL)isReady; 判断操作是否处于准备就绪状态，这个值和操作的依赖关系相关。 操作同步 - (void)waitUntilFinished; 阻塞当前线程，直到该操作结束。可用于线程执行顺序的同步。 - (void)setCompletionBlock:(void (^)(void))block; completionBlock 会在当前操作执行完毕时执行 completionBlock。 - (void)addDependency:(NSOperation *)op; 添加依赖，使当前操作依赖于操作 op 的完成。 - (void)removeDependency:(NSOperation *)op; 移除依赖，取消当前操作对操作 op 的依赖。 @property (readonly, copy) NSArray&lt;NSOperation *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。 10.2 NSOperationQueue 常用属性和方法 取消/暂停/恢复操作 - (void)cancelAllOperations; 可以取消队列的所有操作。 - (BOOL)isSuspended; 判断队列是否处于暂停状态。 YES 为暂停状态，NO 为恢复状态。 - (void)setSuspended:(BOOL)b; 可设置操作的暂停和恢复，YES 代表暂停队列，NO 代表恢复队列。 操作同步 - (void)waitUntilAllOperationsAreFinished; 阻塞当前线程，直到队列中的操作全部执行完毕。 添加/获取操作` - (void)addOperationWithBlock:(void (^)(void))block; 向队列中添加一个 NSBlockOperation 类型操作对象。 - (void)addOperations:(NSArray *)ops waitUntilFinished:(BOOL)wait; 向队列中添加操作数组，wait 标志是否阻塞当前线程直到所有操作结束 - (NSArray *)operations; 当前在队列中的操作数组（某个操作执行结束后会自动从这个数组清除）。 - (NSUInteger)operationCount; 当前队列中的操作数。 获取队列 + (id)currentQueue; 获取当前队列，如果当前线程不是在 NSOperationQueue 上运行则返回 nil。 + (id)mainQueue; 获取主队列。 注意： 这里的暂停和取消（包括操作的取消和队列的取消）并不代表可以将当前的操作立即取消，而是当当前的操作执行完毕之后不再执行新的操作。 暂停和取消的区别就在于：暂停操作之后还可以恢复操作，继续向下执行；而取消操作之后，所有的操作就清空了，无法再接着执行剩下的操作。 参考资料： 苹果官方——并发编程指南：Operation Queues 推荐看看 苹果官方文档：NSOperation Objc 中国：并发编程：API 及挑战 iOS多线程详尽总结系列文章： iOS多线程：『pthread、NSThread』详尽总结 iOS多线程：『GCD』详解总结 iOS多线程：『NSOperation』详解总结 iOS多线程：『RunLoop』详解总结]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[线程安全]]></title>
    <url>%2F2018%2F09%2F17%2F%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[一、前言前段时间看了几个开源项目，发现他们保持线程同步的方式各不相同，有@synchronized、NSLock、dispatch_semaphore、NSCondition、pthread_mutex、OSSpinLock。后来网上查了一下，发现他们的实现机制各不相同，性能也各不一样。不好意思，我们平常使用最多的@synchronized是性能最差的。下面我们先分别介绍每个加锁方式的使用，在使用一个案例来对他们进行性能对比。 二、介绍与使用2.1、@synchronized12345678910111213141516NSObject *obj = [[NSObject alloc] init];dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; @synchronized(obj) &#123; NSLog(@&quot;需要线程同步的操作1 开始&quot;); sleep(3); NSLog(@&quot;需要线程同步的操作1 结束&quot;); &#125;&#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; sleep(1); @synchronized(obj) &#123; NSLog(@&quot;需要线程同步的操作2&quot;); &#125;&#125;); @synchronized(obj)指令使用的obj为该锁的唯一标识，只有当标识相同时，才为满足互斥，如果线程2中的@synchronized(obj)改为@synchronized(self),刚线程2就不会被阻塞，@synchronized指令实现锁的优点就是我们不需要在代码中显式的创建锁对象，便可以实现锁的机制，但作为一种预防措施，@synchronized块会隐式的添加一个异常处理例程来保护代码，该处理例程会在异常抛出的时候自动的释放互斥锁。所以如果不想让隐式的异常处理例程带来额外的开销，你可以考虑使用锁对象。 上面结果的执行结果为： 2016-06-29 20:48:35.747 SafeMultiThread[35945:580107] 需要线程同步的操作1 开始2016-06-29 20:48:38.748 SafeMultiThread[35945:580107] 需要线程同步的操作1 结束2016-06-29 20:48:38.749 SafeMultiThread[35945:580118] 需要线程同步的操作2 2.2、dispatch_semaphore1234567891011121314151617dispatch_semaphore_t signal = dispatch_semaphore_create(1);dispatch_time_t overTime = dispatch_time(DISPATCH_TIME_NOW, 3 * NSEC_PER_SEC);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; dispatch_semaphore_wait(signal, overTime); NSLog(@&quot;需要线程同步的操作1 开始&quot;); sleep(2); NSLog(@&quot;需要线程同步的操作1 结束&quot;); dispatch_semaphore_signal(signal);&#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; sleep(1); dispatch_semaphore_wait(signal, overTime); NSLog(@&quot;需要线程同步的操作2&quot;); dispatch_semaphore_signal(signal);&#125;); dispatch_semaphore是GCD用来同步的一种方式，与他相关的共有三个函数，分别是dispatch_semaphore_create，dispatch_semaphore_signal，dispatch_semaphore_wait。 （1）dispatch_semaphore_create的声明为： dispatch_semaphore_t dispatch_semaphore_create(long value); 传入的参数为long，输出一个dispatch_semaphore_t类型且值为value的信号量。 值得注意的是，这里的传入的参数value必须大于或等于0，否则dispatch_semaphore_create会返回NULL。 （2）dispatch_semaphore_signal的声明为： long dispatch_semaphore_signal(dispatch_semaphore_t dsema) 这个函数会使传入的信号量dsema的值加1； (3) dispatch_semaphore_wait的声明为： long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)； 这个函数会使传入的信号量dsema的值减1；这个函数的作用是这样的，如果dsema信号量的值大于0，该函数所处线程就继续执行下面的语句，并且将信号量的值减1；如果desema的值为0，那么这个函数就阻塞当前线程等待timeout（注意timeout的类型为dispatch_time_t，不能直接传入整形或float型数），如果等待的期间desema的值被dispatch_semaphore_signal函数加1了，且该函数（即dispatch_semaphore_wait）所处线程获得了信号量，那么就继续向下执行并将信号量减1。如果等待期间没有获取到信号量或者信号量的值一直为0，那么等到timeout时，其所处线程自动执行其后语句。 dispatch_semaphore 是信号量，但当信号总量设为 1 时也可以当作锁来。在没有等待情况出现时，它的性能比 pthread_mutex 还要高，但一旦有等待情况出现时，性能就会下降许多。相对于 OSSpinLock 来说，它的优势在于等待时不会消耗 CPU 资源。 如上的代码，如果超时时间overTime设置成&gt;2，可完成同步操作。如果overTime&lt;2的话，在线程1还没有执行完成的情况下，此时超时了，将自动执行下面的代码。 上面代码的执行结果为： 2016-06-29 20:47:52.324 SafeMultiThread[35945:579032] 需要线程同步的操作1 开始2016-06-29 20:47:55.325 SafeMultiThread[35945:579032] 需要线程同步的操作1 结束2016-06-29 20:47:55.326 SafeMultiThread[35945:579033] 需要线程同步的操作2 如果把超时时间设置为&lt;2s的时候，执行的结果就是： 2016-06-30 18:53:24.049 SafeMultiThread[30834:434334] 需要线程同步的操作1 开始2016-06-30 18:53:25.554 SafeMultiThread[30834:434332] 需要线程同步的操作22016-06-30 18:53:26.054 SafeMultiThread[30834:434334] 需要线程同步的操作1 结束 2.3、NSLock1234567891011121314151617181920212223242526272829NSLock *lock = [[NSLock alloc] init];dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; //[lock lock]; [lock lockBeforeDate:[NSDate date]]; NSLog(@&quot;需要线程同步的操作1 开始&quot;); sleep(2); NSLog(@&quot;需要线程同步的操作1 结束&quot;); [lock unlock]; &#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; sleep(1); if ([lock tryLock]) &#123;//尝试获取锁，如果获取不到返回NO，不会阻塞该线程 NSLog(@&quot;锁可用的操作&quot;); [lock unlock]; &#125;else&#123; NSLog(@&quot;锁不可用的操作&quot;); &#125; NSDate *date = [[NSDate alloc] initWithTimeIntervalSinceNow:3]; if ([lock lockBeforeDate:date]) &#123;//尝试在未来的3s内获取锁，并阻塞该线程，如果3s内获取不到恢复线程, 返回NO,不会阻塞该线程 NSLog(@&quot;没有超时，获得锁&quot;); [lock unlock]; &#125;else&#123; NSLog(@&quot;超时，没有获得锁&quot;); &#125; &#125;); NSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate:两个方法，前一个方法会尝试加锁，如果锁不可用(已经被锁住)，刚并不会阻塞线程，并返回NO。lockBeforeDate:方法会在所指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。 上面代码的执行结果为： 2016-06-29 20:45:08.864 SafeMultiThread[35911:575795] 需要线程同步的操作1 开始2016-06-29 20:45:09.869 SafeMultiThread[35911:575781] 锁不可用的操作2016-06-29 20:45:10.869 SafeMultiThread[35911:575795] 需要线程同步的操作1 结束2016-06-29 20:45:10.870 SafeMultiThread[35911:575781] 没有超时，获得锁 源码定义如下： 123456789101112131415161718@protocol NSLocking- (void)lock;- (void)unlock;@end@interface NSLock : NSObject &lt;NSLocking&gt; &#123;@private void *_priv;&#125;- (BOOL)tryLock;- (BOOL)lockBeforeDate:(NSDate *)limit;@property (nullable, copy) NSString *name NS_AVAILABLE(10_5, 2_0);@end 2.4、NSRecursiveLock递归锁123456789101112131415161718192021//NSLock *lock = [[NSLock alloc] init];NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; static void (^RecursiveMethod)(int); RecursiveMethod = ^(int value) &#123; [lock lock]; if (value &gt; 0) &#123; NSLog(@&quot;value = %d&quot;, value); sleep(1); RecursiveMethod(value - 1); &#125; [lock unlock]; &#125;; RecursiveMethod(5);&#125;); NSRecursiveLock实际上定义的是一个递归锁，这个锁可以被同一线程多次请求，而不会引起死锁。这主要是用在循环或递归操作中。 这段代码是一个典型的死锁情况。在我们的线程中，RecursiveMethod是递归调用的。所以每次进入这个block时，都会去加一次锁，而从第二次开始，由于锁已经被使用了且没有解锁，所以它需要等待锁被解除，这样就导致了死锁，线程被阻塞住了。调试器中会输出如下信息： 2016-06-30 19:08:06.393 SafeMultiThread[30928:449008] value = 52016-06-30 19:08:07.399 SafeMultiThread[30928:449008] -[NSLock lock]: deadlock ( ‘(null)’)2016-06-30 19:08:07.399 SafeMultiThread[30928:449008] Break on _NSLockError() to debug. 在这种情况下，我们就可以使用NSRecursiveLock。它可以允许同一线程多次加锁，而不会造成死锁。递归锁会跟踪它被lock的次数。每次成功的lock都必须平衡调用unlock操作。只有所有达到这种平衡，锁最后才能被释放，以供其它线程使用。 如果我们将NSLock代替为NSRecursiveLock，上面代码则会正确执行。 2016-06-30 19:09:41.414 SafeMultiThread[30949:450684] value = 52016-06-30 19:09:42.418 SafeMultiThread[30949:450684] value = 42016-06-30 19:09:43.419 SafeMultiThread[30949:450684] value = 32016-06-30 19:09:44.424 SafeMultiThread[30949:450684] value = 22016-06-30 19:09:45.426 SafeMultiThread[30949:450684] value = 1 如果需要其他功能，源码定义如下： 1234567891011@interface NSRecursiveLock : NSObject &lt;NSLocking&gt; &#123;@private void *_priv;&#125;- (BOOL)tryLock;- (BOOL)lockBeforeDate:(NSDate *)limit;@property (nullable, copy) NSString *name NS_AVAILABLE(10_5, 2_0);@end 2.5、NSConditionLock条件锁1234567891011121314151617181920212223242526NSMutableArray *products = [NSMutableArray array];NSInteger HAS_DATA = 1;NSInteger NO_DATA = 0;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; while (1) &#123; [lock lockWhenCondition:NO_DATA]; [products addObject:[[NSObject alloc] init]]; NSLog(@&quot;produce a product,总量:%zi&quot;,products.count); [lock unlockWithCondition:HAS_DATA]; sleep(1); &#125; &#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; while (1) &#123; NSLog(@&quot;wait for product&quot;); [lock lockWhenCondition:HAS_DATA]; [products removeObjectAtIndex:0]; NSLog(@&quot;custome a product&quot;); [lock unlockWithCondition:NO_DATA]; &#125; &#125;); 当我们在使用多线程的时候，有时一把只会lock和unlock的锁未必就能完全满足我们的使用。因为普通的锁只能关心锁与不锁，而不在乎用什么钥匙才能开锁，而我们在处理资源共享的时候，多数情况是只有满足一定条件的情况下才能打开这把锁： 在线程1中的加锁使用了lock，所以是不需要条件的，所以顺利的就锁住了，但在unlock的使用了一个整型的条件，它可以开启其它线程中正在等待这把钥匙的临界地，而线程2则需要一把被标识为2的钥匙，所以当线程1循环到最后一次的时候，才最终打开了线程2中的阻塞。但即便如此，NSConditionLock也跟其它的锁一样，是需要lock与unlock对应的，只是lock,lockWhenCondition:与unlock，unlockWithCondition:是可以随意组合的，当然这是与你的需求相关的。 上面代码执行结果如下： 2016-06-30 20:31:58.699 SafeMultiThread[31282:521698] wait for product2016-06-30 20:31:58.699 SafeMultiThread[31282:521708] produce a product,总量:12016-06-30 20:31:58.700 SafeMultiThread[31282:521698] custome a product2016-06-30 20:31:58.700 SafeMultiThread[31282:521698] wait for product2016-06-30 20:31:59.705 SafeMultiThread[31282:521708] produce a product,总量:12016-06-30 20:31:59.706 SafeMultiThread[31282:521698] custome a product2016-06-30 20:31:59.706 SafeMultiThread[31282:521698] wait for product2016-06-30 20:32:00.707 SafeMultiThread[31282:521708] produce a product,总量:12016-06-30 20:32:00.708 SafeMultiThread[31282:521698] custome a product 如果你需要其他功能，源码定义如下： 123456789101112131415161718@interface NSConditionLock : NSObject &lt;NSLocking&gt; &#123;@private void *_priv;&#125;- (instancetype)initWithCondition:(NSInteger)condition NS_DESIGNATED_INITIALIZER;@property (readonly) NSInteger condition;- (void)lockWhenCondition:(NSInteger)condition;- (BOOL)tryLock;- (BOOL)tryLockWhenCondition:(NSInteger)condition;- (void)unlockWithCondition:(NSInteger)condition;- (BOOL)lockBeforeDate:(NSDate *)limit;- (BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate *)limit;@property (nullable, copy) NSString *name NS_AVAILABLE(10_5, 2_0);@end 2.6、NSCondition1234567891011121314151617181920212223242526272829NSCondition *condition = [[NSCondition alloc] init];NSMutableArray *products = [NSMutableArray array];dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; while (1) &#123; [condition lock]; if ([products count] == 0) &#123; NSLog(@&quot;wait for product&quot;); [condition wait]; &#125; [products removeObjectAtIndex:0]; NSLog(@&quot;custome a product&quot;); [condition unlock]; &#125;&#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; while (1) &#123; [condition lock]; [products addObject:[[NSObject alloc] init]]; NSLog(@&quot;produce a product,总量:%zi&quot;,products.count); [condition signal]; [condition unlock]; sleep(1); &#125;&#125;); 一种最基本的条件锁。手动控制线程wait和signal。 [condition lock];一般用于多线程同时访问、修改同一个数据源，保证在同一时间内数据源只被访问、修改一次，其他线程的命令需要在lock 外等待，只到unlock ，才可访问 [condition unlock];与lock 同时使用 [condition wait];让当前线程处于等待状态 [condition signal];CPU发信号告诉线程不用在等待，可以继续执行 上面代码执行结果如下： 2016-06-30 20:21:25.295 SafeMultiThread[31256:513991] wait for product2016-06-30 20:21:25.296 SafeMultiThread[31256:513994] produce a product,总量:12016-06-30 20:21:25.296 SafeMultiThread[31256:513991] custome a product2016-06-30 20:21:25.297 SafeMultiThread[31256:513991] wait for product2016-06-30 20:21:26.302 SafeMultiThread[31256:513994] produce a product,总量:12016-06-30 20:21:26.302 SafeMultiThread[31256:513991] custome a product2016-06-30 20:21:26.302 SafeMultiThread[31256:513991] wait for product2016-06-30 20:21:27.307 SafeMultiThread[31256:513994] produce a product,总量:12016-06-30 20:21:27.308 SafeMultiThread[31256:513991] custome a product 2.7、pthread_mutex12345678910111213141516171819__block pthread_mutex_t theLock;pthread_mutex_init(&amp;theLock, NULL);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; pthread_mutex_lock(&amp;theLock); NSLog(@&quot;需要线程同步的操作1 开始&quot;); sleep(3); NSLog(@&quot;需要线程同步的操作1 结束&quot;); pthread_mutex_unlock(&amp;theLock); &#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; sleep(1); pthread_mutex_lock(&amp;theLock); NSLog(@&quot;需要线程同步的操作2&quot;); pthread_mutex_unlock(&amp;theLock); &#125;); c语言定义下多线程加锁方式。 1：pthread_mutex_init(pthread_mutex_t* mutex,const pthread_mutexattr_t attr);初始化锁变量mutex。attr为锁属性，NULL值为默认属性。2：pthread_mutex_lock(pthread_mutex_t mutex);加锁3：pthread_mutex_tylock(pthread_mutex_t mutex);加锁，但是与2不一样的是当锁已经在使用的时候，返回为EBUSY，而不是挂起等待。4：pthread_mutex_unlock(pthread_mutex_t mutex);释放锁5：pthread_mutex_destroy(pthread_mutex_t *mutex);使用完后释放 代码执行操作结果如下： 2016-06-30 21:13:32.440 SafeMultiThread[31429:548869] 需要线程同步的操作1 开始2016-06-30 21:13:35.445 SafeMultiThread[31429:548869] 需要线程同步的操作1 结束2016-06-30 21:13:35.446 SafeMultiThread[31429:548866] 需要线程同步的操作2 2.8、pthread_mutex(recursive)123456789101112131415161718192021222324252627__block pthread_mutex_t theLock;//pthread_mutex_init(&amp;theLock, NULL);pthread_mutexattr_t attr;pthread_mutexattr_init(&amp;attr);pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE);pthread_mutex_init(&amp;lock, &amp;attr);pthread_mutexattr_destroy(&amp;attr);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; static void (^RecursiveMethod)(int); RecursiveMethod = ^(int value) &#123; pthread_mutex_lock(&amp;theLock); if (value &gt; 0) &#123; NSLog(@&quot;value = %d&quot;, value); sleep(1); RecursiveMethod(value - 1); &#125; pthread_mutex_unlock(&amp;theLock); &#125;; RecursiveMethod(5);&#125;); 这是pthread_mutex为了防止在递归的情况下出现死锁而出现的递归锁。作用和NSRecursiveLock递归锁类似。 如果使用pthread_mutex_init(&amp;theLock, NULL);初始化锁的话，上面的代码会出现死锁现象。如果使用递归锁的形式，则没有问题。 2.9、OSSpinLock1234567891011121314151617__block OSSpinLock theLock = OS_SPINLOCK_INIT;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; OSSpinLockLock(&amp;theLock); NSLog(@&quot;需要线程同步的操作1 开始&quot;); sleep(3); NSLog(@&quot;需要线程同步的操作1 结束&quot;); OSSpinLockUnlock(&amp;theLock); &#125;);dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; OSSpinLockLock(&amp;theLock); sleep(1); NSLog(@&quot;需要线程同步的操作2&quot;); OSSpinLockUnlock(&amp;theLock); &#125;); OSSpinLock 自旋锁，性能最高的锁。原理很简单，就是一直 do while 忙等。它的缺点是当等待时会消耗大量 CPU 资源，所以它不适用于较长时间的任务。 不过最近YY大神在自己的博客不再安全的 OSSpinLock中说明了OSSpinLock已经不再安全，请大家谨慎使用。 三、性能对比对以上各个锁进行1000000此的加锁解锁的空操作时间如下： OSSpinLock: 46.15 msdispatch_semaphore: 56.50 mspthread_mutex: 178.28 msNSCondition: 193.38 msNSLock: 175.02 mspthread_mutex(recursive): 172.56 msNSRecursiveLock: 157.44 msNSConditionLock: 490.04 ms@synchronized: 371.17 ms 总的来说： OSSpinLock和dispatch_semaphore的效率远远高于其他。 @synchronized和NSConditionLock效率较差。 鉴于OSSpinLock的不安全，所以我们在开发中如果考虑性能的话，建议使用dispatch_semaphore。 如果不考虑性能，只是图个方便的话，那就使用@synchronized。 四、联系方式新浪微博github简书首页欢迎加好友、一起交流。 转自 景铭巴巴]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[GCD]]></title>
    <url>%2F2018%2F09%2F17%2FGCD%2F</url>
    <content type="text"><![CDATA[转自 行走的少年郎 本文用来介绍 iOS 多线程中 GCD 的相关知识以及使用方法。这大概是史上最详细、清晰的关于 GCD 的详细讲解+总结的文章了。通过本文，您将了解到：1. GCD 简介2. GCD 任务和队列3. GCD 的使用步骤4. GCD 的基本使用（6种不同组合区别）5. GCD 线程间的通信6. GCD 的其他方法（栅栏方法：dispatch_barrier_async、延时执行方法：dispatch_after、一次性代码（只执行一次）：dispatch_once、快速迭代方法：dispatch_apply、队列组：dispatch_group、信号量：dispatch_semaphore） 文中 Demo 我已放在了 Github 上，Demo 链接：传送门 1. GCD 简介什么是 GCD 呢？我们先来看看百度百科的解释简单了解下概念 引自百度百科Grand Central Dispatch(GCD) 是 Apple 开发的一个多核编程的较新的解决方法。它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。它是一个在线程池模式的基础上执行的并发任务。在 Mac OS X 10.6 雪豹中首次推出，也可在 iOS 4 及以上版本使用。 为什么要用 GCD 呢？ 因为 GCD 有很多好处啊，具体如下： GCD 可用于多核的并行运算 GCD 会自动利用更多的 CPU 内核（比如双核、四核） GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程） 程序员只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码 既然 GCD 有这么多的好处，那么下面我们就来系统的学习一下 GCD 的使用方法。 2. GCD 任务和队列学习 GCD 之前，先来了解 GCD 中两个核心概念：任务和队列。 任务：就是执行操作的意思，换句话说就是你在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种方式：同步执行（sync）和异步执行（async）。两者的主要区别是：是否等待队列的任务执行结束，以及是否具备开启新线程的能力。 同步执行（sync） ： 同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再继续执行。 只能在当前线程中执行任务，不具备开启新线程的能力。 异步执行（async） ： 异步添加任务到指定的队列中，它不会做任何等待，可以继续执行任务。 可以在新的线程中执行任务，具备开启新线程的能力。 举个简单例子：你要打电话给小明和小白。同步执行就是，你打电话给小明的时候，不能同时打给小白，等到给小明打完了，才能打给小白（等待任务执行结束）。而且只能用当前的电话（不具备开启新线程的能力）。而异步执行就是，你打电话给小明的时候，不等和小明通话结束，还能直接给小白打电话，不用等着和小明通话结束再打（不用等待任务执行结束）。除了当前电话，你还可以使用其他所能使用的电话（具备开启新线程的能力）。 注意：异步执行（async）虽然具有开启新线程的能力，但是并不一定开启新线程。这跟任务所指定的队列类型有关（下面会讲）。 队列（Dispatch Queue）：这里的队列指执行任务的等待队列，即用来存放任务的队列。队列是一种特殊的线性表，采用 FIFO（先进先出）的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从队列的头部开始读取。每读取一个任务，则从队列中释放一个任务。队列的结构可参考下图： 在 GCD 中有两种队列：串行队列和并发队列。两者都符合 FIFO（先进先出）的原则。两者的主要区别是：执行顺序不同，以及开启线程数不同。 串行队列（Serial Dispatch Queue） ： 每次只有一个任务被执行。让任务一个接着一个地执行。一个任务执行完毕后，再执行下一个任务。 只开启一个新线程（或者不开启新线程，在当前线程执行任务）。 并发队列（Concurrent Dispatch Queue） ： 可以让多个任务并发（同时）执行。 可以开启多个线程，并且同时执行任务。 注意：并发队列的并发功能只有在异步（dispatch_async）函数下才有效。 两者具体区别如下两图所示。 3. GCD 的使用步骤GCD 的使用步骤其实很简单，只有两步。 创建一个队列（串行队列或并发队列） 将任务追加到任务的等待队列中，然后系统就会根据任务类型执行任务（同步执行或异步执行） 下边来看看队列的创建方法/获取方法，以及任务的创建方法。 3.1 队列的创建方法/获取方法 可以使用dispatch_queue_create来创建队列，需要传入两个参数，第一个参数表示队列的唯一标识符，用于 DEBUG，可为空，Dispatch Queue 的名称推荐使用应用程序 ID 这种逆序全程域名；第二个参数用来识别是串行队列还是并发队列。DISPATCH_QUEUE_SERIAL 表示串行队列，DISPATCH_QUEUE_CONCURRENT 表示并发队列。 1234// 串行队列的创建方法dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_SERIAL);// 并发队列的创建方法dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT); 对于串行队列，GCD 提供了的一种特殊的串行队列： 主队列（Main Dispatch Queue） 。 所有放在主队列中的任务，都会放到主线程中执行。 可使用dispatch_get_main_queue()获得主队列。 12// 主队列的获取方法dispatch_queue_t queue = dispatch_get_main_queue(); 对于并发队列，GCD 默认提供了 全局并发队列（Global Dispatch Queue） 。 可以使用dispatch_get_global_queue来获取。需要传入两个参数。第一个参数表示队列优先级，一般用DISPATCH_QUEUE_PRIORITY_DEFAULT。第二个参数暂时没用，用0即可。 12// 全局并发队列的获取方法dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); 3.2 任务的创建方法GCD 提供了同步执行任务的创建方法dispatch_sync和异步执行任务创建方法dispatch_async。 12345678// 同步执行任务创建方法dispatch_sync(queue, ^&#123; // 这里放同步执行任务代码&#125;);// 异步执行任务创建方法dispatch_async(queue, ^&#123; // 这里放异步执行任务代码&#125;); 虽然使用 GCD 只需两步，但是既然我们有两种队列（串行队列/并发队列），两种任务执行方式（同步执行/异步执行），那么我们就有了四种不同的组合方式。这四种不同的组合方式是： 同步执行 + 并发队列 异步执行 + 并发队列 同步执行 + 串行队列 异步执行 + 串行队列 实际上，刚才还说了两种特殊队列：全局并发队列、主队列。全局并发队列可以作为普通并发队列来使用。但是主队列因为有点特殊，所以我们就又多了两种组合方式。这样就有六种不同的组合方式了。 同步执行 + 主队列 异步执行 + 主队列 那么这几种不同组合方式各有什么区别呢，这里为了方便，先上结果，再来讲解。你可以直接查看表格结果，然后跳过 4. GCD的基本使用 。 区别 并发队列 串行队列 主队列 同步(sync) 没有开启新线程，串行执行任务 没有开启新线程，串行执行任务 主线程调用：死锁卡住不执行其他线程调用：没有开启新线程，串行执行任务 异步(async) 有开启新线程，并发执行任务 有开启新线程(1条)，串行执行任务 没有开启新线程，串行执行任务 下边我们来分别讲讲这几种不同的组合方式的使用方法。 4. GCD 的基本使用先来讲讲并发队列的两种执行方式。 4.1 同步执行 + 并发队列 在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务。 123456789101112131415161718192021222324252627282930313233343536/** * 同步执行 + 并发队列 * 特点：在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务。 */- (void)syncConcurrent &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;syncConcurrent---begin&quot;); dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_sync(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_sync(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_sync(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); NSLog(@&quot;syncConcurrent---end&quot;);&#125; 输出结果：2018-02-23 20:34:55.095932+0800 YSC-GCD-demo[19892:4996930] currentThread—{number = 1, name = main}2018-02-23 20:34:55.096086+0800 YSC-GCD-demo[19892:4996930] syncConcurrent—begin2018-02-23 20:34:57.097589+0800 YSC-GCD-demo[19892:4996930] 1—{number = 1, name = main}2018-02-23 20:34:59.099100+0800 YSC-GCD-demo[19892:4996930] 1—{number = 1, name = main}2018-02-23 20:35:01.099843+0800 YSC-GCD-demo[19892:4996930] 2—{number = 1, name = main}2018-02-23 20:35:03.101171+0800 YSC-GCD-demo[19892:4996930] 2—{number = 1, name = main}2018-02-23 20:35:05.101750+0800 YSC-GCD-demo[19892:4996930] 3—{number = 1, name = main}2018-02-23 20:35:07.102414+0800 YSC-GCD-demo[19892:4996930] 3—{number = 1, name = main}2018-02-23 20:35:07.102575+0800 YSC-GCD-demo[19892:4996930] syncConcurrent—end 从同步执行 + 并发队列中可看到： 所有任务都是在当前线程（主线程）中执行的，没有开启新的线程（同步执行不具备开启新线程的能力）。 所有任务都在打印的syncConcurrent---begin和syncConcurrent---end之间执行的（同步任务需要等待队列的任务执行结束）。 任务按顺序执行的。按顺序执行的原因：虽然并发队列可以开启多个线程，并且同时执行多个任务。但是因为本身不能创建新线程，只有当前线程这一个线程（同步任务不具备开启新线程的能力），所以也就不存在并发。而且当前线程只有等待当前队列中正在执行的任务执行完毕之后，才能继续接着执行下面的操作（同步任务需要等待队列的任务执行结束）。所以任务只能一个接一个按顺序执行，不能同时被执行。 4.2 异步执行 + 并发队列 可以开启多个线程，任务交替（同时）执行。 123456789101112131415161718192021222324252627282930313233343536/** * 异步执行 + 并发队列 * 特点：可以开启多个线程，任务交替（同时）执行。 */- (void)asyncConcurrent &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;asyncConcurrent---begin&quot;); dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_async(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); NSLog(@&quot;asyncConcurrent---end&quot;);&#125; 输出结果：2018-02-23 20:36:41.769269+0800 YSC-GCD-demo[19929:5005237] currentThread—{number = 1, name = main}2018-02-23 20:36:41.769496+0800 YSC-GCD-demo[19929:5005237] asyncConcurrent—begin2018-02-23 20:36:41.769725+0800 YSC-GCD-demo[19929:5005237] asyncConcurrent—end2018-02-23 20:36:43.774442+0800 YSC-GCD-demo[19929:5005566] 2—{number = 5, name = (null)}2018-02-23 20:36:43.774440+0800 YSC-GCD-demo[19929:5005567] 3—{number = 4, name = (null)}2018-02-23 20:36:43.774440+0800 YSC-GCD-demo[19929:5005565] 1—{number = 3, name = (null)}2018-02-23 20:36:45.779286+0800 YSC-GCD-demo[19929:5005567] 3—{number = 4, name = (null)}2018-02-23 20:36:45.779302+0800 YSC-GCD-demo[19929:5005565] 1—{number = 3, name = (null)}2018-02-23 20:36:45.779286+0800 YSC-GCD-demo[19929:5005566] 2—{number = 5, name = (null)} 在异步执行 + 并发队列中可以看出： 除了当前线程（主线程），系统又开启了3个线程，并且任务是交替/同时执行的。（异步执行具备开启新线程的能力。且并发队列可开启多个线程，同时执行多个任务）。 所有任务是在打印的syncConcurrent---begin和syncConcurrent---end之后才执行的。说明当前线程没有等待，而是直接开启了新线程，在新线程中执行任务（异步执行不做等待，可以继续执行任务）。 接下来再来讲讲串行队列的两种执行方式。 4.3 同步执行 + 串行队列 不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务。 12345678910111213141516171819202122232425262728293031323334/** * 同步执行 + 串行队列 * 特点：不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务。 */- (void)syncSerial &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;syncSerial---begin&quot;); dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_SERIAL); dispatch_sync(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_sync(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_sync(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); NSLog(@&quot;syncSerial---end&quot;);&#125; 输出结果为：2018-02-23 20:39:37.876811+0800 YSC-GCD-demo[19975:5017162] currentThread—{number = 1, name = main}2018-02-23 20:39:37.876998+0800 YSC-GCD-demo[19975:5017162] syncSerial—begin2018-02-23 20:39:39.878316+0800 YSC-GCD-demo[19975:5017162] 1—{number = 1, name = main}2018-02-23 20:39:41.879829+0800 YSC-GCD-demo[19975:5017162] 1—{number = 1, name = main}2018-02-23 20:39:43.880660+0800 YSC-GCD-demo[19975:5017162] 2—{number = 1, name = main}2018-02-23 20:39:45.881265+0800 YSC-GCD-demo[19975:5017162] 2—{number = 1, name = main}2018-02-23 20:39:47.882257+0800 YSC-GCD-demo[19975:5017162] 3—{number = 1, name = main}2018-02-23 20:39:49.883008+0800 YSC-GCD-demo[19975:5017162] 3—{number = 1, name = main}2018-02-23 20:39:49.883253+0800 YSC-GCD-demo[19975:5017162] syncSerial—end 在同步执行 + 串行队列可以看到： 所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（同步执行不具备开启新线程的能力）。 所有任务都在打印的syncConcurrent---begin和syncConcurrent---end之间执行（同步任务需要等待队列的任务执行结束）。 任务是按顺序执行的（串行队列每次只有一个任务被执行，任务一个接一个按顺序执行）。 4.4 异步执行 + 串行队列 会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务 12345678910111213141516171819202122232425262728293031323334/** * 异步执行 + 串行队列 * 特点：会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务。 */- (void)asyncSerial &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;asyncSerial---begin&quot;); dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_SERIAL); dispatch_async(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); NSLog(@&quot;asyncSerial---end&quot;);&#125; 输出结果为：2018-02-23 20:41:17.029999+0800 YSC-GCD-demo[20008:5024757] currentThread—{number = 1, name = main}2018-02-23 20:41:17.030212+0800 YSC-GCD-demo[20008:5024757] asyncSerial—begin2018-02-23 20:41:17.030364+0800 YSC-GCD-demo[20008:5024757] asyncSerial—end2018-02-23 20:41:19.035379+0800 YSC-GCD-demo[20008:5024950] 1—{number = 3, name = (null)}2018-02-23 20:41:21.037140+0800 YSC-GCD-demo[20008:5024950] 1—{number = 3, name = (null)}2018-02-23 20:41:23.042220+0800 YSC-GCD-demo[20008:5024950] 2—{number = 3, name = (null)}2018-02-23 20:41:25.042971+0800 YSC-GCD-demo[20008:5024950] 2—{number = 3, name = (null)}2018-02-23 20:41:27.047690+0800 YSC-GCD-demo[20008:5024950] 3—{number = 3, name = (null)}2018-02-23 20:41:29.052327+0800 YSC-GCD-demo[20008:5024950] 3—{number = 3, name = (null)} 在异步执行 + 串行队列可以看到： 开启了一条新线程（异步执行具备开启新线程的能力，串行队列只开启一个线程）。 所有任务是在打印的syncConcurrent---begin和syncConcurrent---end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。 任务是按顺序执行的（串行队列每次只有一个任务被执行，任务一个接一个按顺序执行）。 下边讲讲刚才我们提到过的特殊队列：主队列。 主队列：GCD自带的一种特殊的 串行队列 所有放在主队列中的任务，都会放到主线程中执行 可使用dispatch_get_main_queue()获得主队列 我们再来看看主队列的两种组合方式。 4.5 同步执行 + 主队列同步执行 + 主队列在不同线程中调用结果也是不一样，在主线程中调用会出现死锁，而在其他线程中则不会。 4.5.1 在主线程中调用同步执行 + 主队列 互相等待卡住不可行 1234567891011121314151617181920212223242526272829303132333435363738/** * 同步执行 + 主队列 * 特点(主线程调用)：互等卡主不执行。 * 特点(其他线程调用)：不会开启新线程，执行完一个任务，再执行下一个任务。 */- (void)syncMain &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;syncMain---begin&quot;); dispatch_queue_t queue = dispatch_get_main_queue(); dispatch_sync(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_sync(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_sync(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); NSLog(@&quot;syncMain---end&quot;);&#125; 输出结果2018-02-23 20:42:36.842892+0800 YSC-GCD-demo[20041:5030982] currentThread—{number = 1, name = main}2018-02-23 20:42:36.843050+0800 YSC-GCD-demo[20041:5030982] syncMain—begin(lldb) 在同步执行 + 主队列可以惊奇的发现： 在主线程中使用同步执行 + 主队列，追加到主线程的任务1、任务2、任务3都不再执行了，而且syncMain---end也没有打印，在XCode 9上还会报崩溃。这是为什么呢？ 这是因为我们在主线程中执行syncMain方法，相当于把syncMain任务放到了主线程的队列中。而同步执行会等待当前队列中的任务执行完毕，才会接着执行。那么当我们把任务1追加到主队列中，任务1就在等待主线程处理完syncMain任务。而syncMain任务需要等待任务1执行完毕，才能接着执行。 那么，现在的情况就是syncMain任务和任务1都在等对方执行完毕。这样大家互相等待，所以就卡住了，所以我们的任务执行不了，而且syncMain---end也没有打印。 要是如果不在主线程中调用，而在其他线程中调用会如何呢？ 4.5.2 在其他线程中调用同步执行 + 主队列 不会开启新线程，执行完一个任务，再执行下一个任务 123// 使用 NSThread 的 detachNewThreadSelector 方法会创建线程，并自动启动线程执行 selector 任务[NSThread detachNewThreadSelector:@selector(syncMain) toTarget:self withObject:nil]; 输出结果：2018-02-23 20:44:19.377321+0800 YSC-GCD-demo[20083:5040347] currentThread—{number = 3, name = (null)}2018-02-23 20:44:19.377494+0800 YSC-GCD-demo[20083:5040347] syncMain—begin2018-02-23 20:44:21.384716+0800 YSC-GCD-demo[20083:5040132] 1—{number = 1, name = main}2018-02-23 20:44:23.386091+0800 YSC-GCD-demo[20083:5040132] 1—{number = 1, name = main}2018-02-23 20:44:25.387687+0800 YSC-GCD-demo[20083:5040132] 2—{number = 1, name = main}2018-02-23 20:44:27.388648+0800 YSC-GCD-demo[20083:5040132] 2—{number = 1, name = main}2018-02-23 20:44:29.390459+0800 YSC-GCD-demo[20083:5040132] 3—{number = 1, name = main}2018-02-23 20:44:31.391965+0800 YSC-GCD-demo[20083:5040132] 3—{number = 1, name = main}2018-02-23 20:44:31.392513+0800 YSC-GCD-demo[20083:5040347] syncMain—end 在其他线程中使用同步执行 + 主队列可看到： 所有任务都是在主线程（非当前线程）中执行的，没有开启新的线程（所有放在主队列中的任务，都会放到主线程中执行）。 所有任务都在打印的syncConcurrent---begin和syncConcurrent---end之间执行（同步任务需要等待队列的任务执行结束）。 任务是按顺序执行的（主队列是串行队列，每次只有一个任务被执行，任务一个接一个按顺序执行）。 为什么现在就不会卡住了呢？因为syncMain 任务放到了其他线程里，而任务1、任务2、任务3都在追加到主队列中，这三个任务都会在主线程中执行。syncMain 任务在其他线程中执行到追加任务1到主队列中，因为主队列现在没有正在执行的任务，所以，会直接执行主队列的任务1，等任务1执行完毕，再接着执行任务2、任务3。所以这里不会卡住线程。 4.6 异步执行 + 主队列 只在主线程中执行任务，执行完一个任务，再执行下一个任务。 123456789101112131415161718192021222324252627282930313233343536/** * 异步执行 + 主队列 * 特点：只在主线程中执行任务，执行完一个任务，再执行下一个任务 */- (void)asyncMain &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;asyncMain---begin&quot;); dispatch_queue_t queue = dispatch_get_main_queue(); dispatch_async(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); NSLog(@&quot;asyncMain---end&quot;);&#125; 输出结果：2018-02-23 20:45:49.981505+0800 YSC-GCD-demo[20111:5046708] currentThread—{number = 1, name = main}2018-02-23 20:45:49.981935+0800 YSC-GCD-demo[20111:5046708] asyncMain—begin2018-02-23 20:45:49.982352+0800 YSC-GCD-demo[20111:5046708] asyncMain—end2018-02-23 20:45:51.991096+0800 YSC-GCD-demo[20111:5046708] 1—{number = 1, name = main}2018-02-23 20:45:53.991959+0800 YSC-GCD-demo[20111:5046708] 1—{number = 1, name = main}2018-02-23 20:45:55.992937+0800 YSC-GCD-demo[20111:5046708] 2—{number = 1, name = main}2018-02-23 20:45:57.993649+0800 YSC-GCD-demo[20111:5046708] 2—{number = 1, name = main}2018-02-23 20:45:59.994928+0800 YSC-GCD-demo[20111:5046708] 3—{number = 1, name = main}2018-02-23 20:46:01.995589+0800 YSC-GCD-demo[20111:5046708] 3—{number = 1, name = main} 在异步执行 + 主队列可以看到： 所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（虽然异步执行具备开启线程的能力，但因为是主队列，所以所有任务都在主线程中）。 所有任务是在打印的syncConcurrent—begin和syncConcurrent—end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。 任务是按顺序执行的（因为主队列是串行队列，每次只有一个任务被执行，任务一个接一个按顺序执行）。 弄懂了难理解、绕来绕去的队列+任务之后，我们来学习一个简单的东西：5. GCD 线程间的通信。 5. GCD 线程间的通信在iOS开发过程中，我们一般在主线程里边进行UI刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。 123456789101112131415161718192021222324/** * 线程间通信 */- (void)communication &#123; // 获取全局并发队列 dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); // 获取主队列 dispatch_queue_t mainQueue = dispatch_get_main_queue(); dispatch_async(queue, ^&#123; // 异步追加任务 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; // 回到主线程 dispatch_async(mainQueue, ^&#123; // 追加在主线程中执行的任务 [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125;); &#125;);&#125; 输出结果：2018-02-23 20:47:03.462394+0800 YSC-GCD-demo[20154:5053282] 1—{number = 3, name = (null)}2018-02-23 20:47:05.465912+0800 YSC-GCD-demo[20154:5053282] 1—{number = 3, name = (null)}2018-02-23 20:47:07.466657+0800 YSC-GCD-demo[20154:5052953] 2—{number = 1, name = main} 可以看到在其他线程中先执行任务，执行完了之后回到主线程执行主线程的相应操作。 6. GCD 的其他方法6.1 GCD 栅栏方法：dispatch_barrier_async 我们有时需要异步执行两组操作，而且第一组操作执行完之后，才能开始执行第二组操作。这样我们就需要一个相当于栅栏一样的一个方法将两组异步执行的操作组给分割起来，当然这里的操作组里可以包含一个或多个任务。这就需要用到dispatch_barrier_async方法在两个操作组间形成栅栏。dispatch_barrier_async函数会等待前边追加到并发队列中的任务全部执行完毕之后，再将指定的任务追加到该异步队列中。然后在dispatch_barrier_async函数追加的任务执行完毕之后，异步队列才恢复为一般动作，接着追加任务到该异步队列并开始执行。具体如下图所示： 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * 栅栏方法 dispatch_barrier_async */- (void)barrier &#123; dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_async(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_barrier_async(queue, ^&#123; // 追加任务 barrier for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;barrier---%@&quot;,[NSThread currentThread]);// 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务3 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_async(queue, ^&#123; // 追加任务4 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;4---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;);&#125; 输出结果：2018-02-23 20:48:18.297745+0800 YSC-GCD-demo[20188:5059274] 1—{number = 4, name = (null)}2018-02-23 20:48:18.297745+0800 YSC-GCD-demo[20188:5059273] 2—{number = 3, name = (null)}2018-02-23 20:48:20.301139+0800 YSC-GCD-demo[20188:5059274] 1—{number = 4, name = (null)}2018-02-23 20:48:20.301139+0800 YSC-GCD-demo[20188:5059273] 2—{number = 3, name = (null)}2018-02-23 20:48:22.306290+0800 YSC-GCD-demo[20188:5059274] barrier—{number = 4, name = (null)}2018-02-23 20:48:24.311655+0800 YSC-GCD-demo[20188:5059274] barrier—{number = 4, name = (null)}2018-02-23 20:48:26.316943+0800 YSC-GCD-demo[20188:5059273] 4—{number = 3, name = (null)}2018-02-23 20:48:26.316956+0800 YSC-GCD-demo[20188:5059274] 3—{number = 4, name = (null)}2018-02-23 20:48:28.320660+0800 YSC-GCD-demo[20188:5059273] 4—{number = 3, name = (null)}2018-02-23 20:48:28.320649+0800 YSC-GCD-demo[20188:5059274] 3—{number = 4, name = (null)} 在dispatch_barrier_async执行结果中可以看出： 在执行完栅栏前面的操作之后，才执行栅栏操作，最后再执行栅栏后边的操作。 6.2 GCD 延时执行方法：dispatch_after我们经常会遇到这样的需求：在指定时间（例如3秒）之后执行某个任务。可以用 GCD 的dispatch_after函数来实现。需要注意的是：dispatch_after函数并不是在指定时间之后才开始执行处理，而是在指定时间之后将任务追加到主队列中。严格来说，这个时间并不是绝对准确的，但想要大致延迟执行任务，dispatch_after函数是很有效的。 123456789101112/** * 延时执行方法 dispatch_after */- (void)after &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;asyncMain---begin&quot;); dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123; // 2.0秒后异步追加任务代码到主队列，并开始执行 NSLog(@&quot;after---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125;);&#125; 输出结果：2018-02-23 20:53:08.713784+0800 YSC-GCD-demo[20282:5080295] currentThread—{number = 1, name = main}2018-02-23 20:53:08.713962+0800 YSC-GCD-demo[20282:5080295] asyncMain—begin2018-02-23 20:53:10.714283+0800 YSC-GCD-demo[20282:5080295] after—{number = 1, name = main} 可以看出：在打印 asyncMain---begin 之后大约 2.0 秒的时间，打印了 after---&lt;NSThread: 0x60000006ee00&gt;{number = 1, name = main} 6.3 GCD 一次性代码（只执行一次）：dispatch_once 我们在创建单例、或者有整个程序运行过程中只执行一次的代码时，我们就用到了 GCD 的 dispatch_once 函数。使用dispatch_once 函数能保证某段代码在程序运行过程中只被执行1次，并且即使在多线程的环境下，dispatch_once也可以保证线程安全。 123456789/** * 一次性代码（只执行一次）dispatch_once */- (void)once &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; // 只执行1次的代码(这里面默认是线程安全的) &#125;);&#125; 6.4 GCD 快速迭代方法：dispatch_apply 通常我们会用 for 循环遍历，但是 GCD 给我们提供了快速迭代的函数 dispatch_apply。dispatch_apply 按照指定的次数将指定的任务追加到指定的队列中，并等待全部队列执行结束。 如果是在串行队列中使用 dispatch_apply，那么就和 for 循环一样，按顺序同步执行。可这样就体现不出快速迭代的意义了。我们可以利用并发队列进行异步执行。比如说遍历 0~5 这6个数字，for 循环的做法是每次取出一个元素，逐个遍历。dispatch_apply 可以 在多个线程中同时（异步）遍历多个数字。还有一点，无论是在串行队列，还是异步队列中，dispatch_apply 都会等待全部任务执行完毕，这点就像是同步操作，也像是队列组中的 dispatch_group_wait方法。 123456789101112/** * 快速迭代方法 dispatch_apply */- (void)apply &#123; dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); NSLog(@&quot;apply---begin&quot;); dispatch_apply(6, queue, ^(size_t index) &#123; NSLog(@&quot;%zd---%@&quot;,index, [NSThread currentThread]); &#125;); NSLog(@&quot;apply---end&quot;);&#125; 输出结果：2018-02-23 22:03:18.475499+0800 YSC-GCD-demo[20470:5176805] apply—begin2018-02-23 22:03:18.476672+0800 YSC-GCD-demo[20470:5177035] 1—{number = 3, name = (null)}2018-02-23 22:03:18.476693+0800 YSC-GCD-demo[20470:5176805] 0—{number = 1, name = main}2018-02-23 22:03:18.476704+0800 YSC-GCD-demo[20470:5177037] 2—{number = 4, name = (null)}2018-02-23 22:03:18.476735+0800 YSC-GCD-demo[20470:5177036] 3—{number = 5, name = (null)}2018-02-23 22:03:18.476867+0800 YSC-GCD-demo[20470:5177035] 4—{number = 3, name = (null)}2018-02-23 22:03:18.476867+0800 YSC-GCD-demo[20470:5176805] 5—{number = 1, name = main}2018-02-23 22:03:18.477038+0800 YSC-GCD-demo[20470:5176805] apply—end 因为是在并发队列中异步队执行任务，所以各个任务的执行时间长短不定，最后结束顺序也不定。但是apply---end一定在最后执行。这是因为dispatch_apply函数会等待全部任务执行完毕。 6.5 GCD 的队列组：dispatch_group有时候我们会有这样的需求：分别异步执行2个耗时任务，然后当2个耗时任务都执行完毕后再回到主线程执行任务。这时候我们可以用到 GCD 的队列组。 调用队列组的 dispatch_group_async 先把任务放到队列中，然后将队列放入队列组中。或者使用队列组的 dispatch_group_enter、dispatch_group_leave 组合 来实现dispatch_group_async。 调用队列组的 dispatch_group_notify 回到指定线程执行任务。或者使用 dispatch_group_wait回到当前线程继续向下执行（会阻塞当前线程）。 6.5.1 dispatch_group_notify 监听 group 中任务的完成状态，当所有的任务都执行完成后，追加任务到 group 中，并执行任务。 12345678910111213141516171819202122232425262728293031323334/** * 队列组 dispatch_group_notify */- (void)groupNotify &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;group---begin&quot;); dispatch_group_t group = dispatch_group_create(); dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123; // 等前面的异步任务1、任务2都执行完毕后，回到主线程执行下边任务 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; NSLog(@&quot;group---end&quot;); &#125;);&#125; 输出结果：2018-02-23 22:05:03.790035+0800 YSC-GCD-demo[20494:5183349] currentThread—{number = 1, name = main}2018-02-23 22:05:03.790237+0800 YSC-GCD-demo[20494:5183349] group—begin2018-02-23 22:05:05.792721+0800 YSC-GCD-demo[20494:5183654] 1—{number = 4, name = (null)}2018-02-23 22:05:05.792725+0800 YSC-GCD-demo[20494:5183656] 2—{number = 3, name = (null)}2018-02-23 22:05:07.797408+0800 YSC-GCD-demo[20494:5183656] 2—{number = 3, name = (null)}2018-02-23 22:05:07.797408+0800 YSC-GCD-demo[20494:5183654] 1—{number = 4, name = (null)}2018-02-23 22:05:09.798717+0800 YSC-GCD-demo[20494:5183349] 3—{number = 1, name = main}2018-02-23 22:05:11.799827+0800 YSC-GCD-demo[20494:5183349] 3—{number = 1, name = main}2018-02-23 22:05:11.799977+0800 YSC-GCD-demo[20494:5183349] group—end 从dispatch_group_notify相关代码运行输出结果可以看出：当所有任务都执行完成之后，才执行dispatch_group_notify block 中的任务。 6.5.2 dispatch_group_wait 暂停当前线程（阻塞当前线程），等待指定的 group 中的任务执行完成后，才会往下继续执行。 123456789101112131415161718192021222324252627282930/** * 队列组 dispatch_group_wait */- (void)groupWait &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;group---begin&quot;); dispatch_group_t group = dispatch_group_create(); dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; &#125;); // 等待上面的任务全部完成后，会往下继续执行（会阻塞当前线程） dispatch_group_wait(group, DISPATCH_TIME_FOREVER); NSLog(@&quot;group---end&quot;);&#125; 输出结果：2018-02-23 22:10:16.939258+0800 YSC-GCD-demo[20538:5198871] currentThread—{number = 1, name = main}2018-02-23 22:10:16.939455+0800 YSC-GCD-demo[20538:5198871] group—begin2018-02-23 22:10:18.943862+0800 YSC-GCD-demo[20538:5199137] 2—{number = 4, name = (null)}2018-02-23 22:10:18.943861+0800 YSC-GCD-demo[20538:5199138] 1—{number = 3, name = (null)}2018-02-23 22:10:20.947787+0800 YSC-GCD-demo[20538:5199137] 2—{number = 4, name = (null)}2018-02-23 22:10:20.947790+0800 YSC-GCD-demo[20538:5199138] 1—{number = 3, name = (null)}2018-02-23 22:10:20.948134+0800 YSC-GCD-demo[20538:5198871] group—end 从dispatch_group_wait相关代码运行输出结果可以看出：当所有任务执行完成之后，才执行 dispatch_group_wait 之后的操作。但是，使用dispatch_group_wait 会阻塞当前线程。 6.5.3 dispatch_group_enter、dispatch_group_leave dispatch_group_enter 标志着一个任务追加到 group，执行一次，相当于 group 中未执行完毕任务数+1 dispatch_group_leave 标志着一个任务离开了 group，执行一次，相当于 group 中未执行完毕任务数-1。 当 group 中未执行完毕任务数为0的时候，才会使dispatch_group_wait解除阻塞，以及执行追加到dispatch_group_notify中的任务。 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * 队列组 dispatch_group_enter、dispatch_group_leave */- (void)groupEnterAndLeave&#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;group---begin&quot;); dispatch_group_t group = dispatch_group_create(); dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); dispatch_group_enter(group); dispatch_async(queue, ^&#123; // 追加任务1 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; dispatch_group_leave(group); &#125;); dispatch_group_enter(group); dispatch_async(queue, ^&#123; // 追加任务2 for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;2---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; dispatch_group_leave(group); &#125;); dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123; // 等前面的异步操作都执行完毕后，回到主线程. for (int i = 0; i &lt; 2; ++i) &#123; [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;3---%@&quot;,[NSThread currentThread]); // 打印当前线程 &#125; NSLog(@&quot;group---end&quot;); &#125;); // // 等待上面的任务全部完成后，会往下继续执行（会阻塞当前线程）// dispatch_group_wait(group, DISPATCH_TIME_FOREVER);//// NSLog(@&quot;group---end&quot;);&#125; 输出结果：2018-02-23 22:14:17.997667+0800 YSC-GCD-demo[20592:5214830] currentThread—{number = 1, name = main}2018-02-23 22:14:17.997839+0800 YSC-GCD-demo[20592:5214830] group—begin2018-02-23 22:14:20.000298+0800 YSC-GCD-demo[20592:5215094] 1—{number = 4, name = (null)}2018-02-23 22:14:20.000305+0800 YSC-GCD-demo[20592:5215095] 2—{number = 3, name = (null)}2018-02-23 22:14:22.001323+0800 YSC-GCD-demo[20592:5215094] 1—{number = 4, name = (null)}2018-02-23 22:14:22.001339+0800 YSC-GCD-demo[20592:5215095] 2—{number = 3, name = (null)}2018-02-23 22:14:24.002321+0800 YSC-GCD-demo[20592:5214830] 3—{number = 1, name = main}2018-02-23 22:14:26.002852+0800 YSC-GCD-demo[20592:5214830] 3—{number = 1, name = main}2018-02-23 22:14:26.003116+0800 YSC-GCD-demo[20592:5214830] group—end 从dispatch_group_enter、dispatch_group_leave相关代码运行结果中可以看出：当所有任务执行完成之后，才执行 dispatch_group_notify 中的任务。这里的dispatch_group_enter、dispatch_group_leave组合，其实等同于dispatch_group_async。 6.6 GCD 信号量：dispatch_semaphoreGCD 中的信号量是指 Dispatch Semaphore，是持有计数的信号。类似于过高速路收费站的栏杆。可以通过时，打开栏杆，不可以通过时，关闭栏杆。在 Dispatch Semaphore 中，使用计数来完成这个功能，计数为0时等待，不可通过。计数为1或大于1时，计数减1且不等待，可通过。Dispatch Semaphore 提供了三个函数。 dispatch_semaphore_create：创建一个Semaphore并初始化信号的总量 dispatch_semaphore_signal：发送一个信号，让信号总量加1 dispatch_semaphore_wait：可以使总信号量减1，当信号总量为0时就会一直等待（阻塞所在线程），否则就可以正常执行。 注意：信号量的使用前提是：想清楚你需要处理哪个线程等待（阻塞），又要哪个线程继续执行，然后使用信号量。 Dispatch Semaphore 在实际开发中主要用于： 保持线程同步，将异步执行任务转换为同步执行任务 保证线程安全，为线程加锁 6.6.1 Dispatch Semaphore 线程同步我们在开发中，会遇到这样的需求：异步执行耗时任务，并使用异步执行的结果进行一些额外的操作。换句话说，相当于，将将异步执行任务转换为同步执行任务。比如说：AFNetworking 中 AFURLSessionManager.m 里面的 tasksForKeyPath: 方法。通过引入信号量的方式，等待异步执行任务结果，获取到 tasks，然后再返回该 tasks。 123456789101112131415161718192021- (NSArray *)tasksForKeyPath:(NSString *)keyPath &#123; __block NSArray *tasks = nil; dispatch_semaphore_t semaphore = dispatch_semaphore_create(0); [self.session getTasksWithCompletionHandler:^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks) &#123; if ([keyPath isEqualToString:NSStringFromSelector(@selector(dataTasks))]) &#123; tasks = dataTasks; &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(uploadTasks))]) &#123; tasks = uploadTasks; &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(downloadTasks))]) &#123; tasks = downloadTasks; &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(tasks))]) &#123; tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:@&quot;@unionOfArrays.self&quot;]; &#125; dispatch_semaphore_signal(semaphore); &#125;]; dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); return tasks;&#125; 下面，我们来利用 Dispatch Semaphore 实现线程同步，将异步执行任务转换为同步执行任务。 12345678910111213141516171819202122232425/** * semaphore 线程同步 */- (void)semaphoreSync &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;semaphore---begin&quot;); dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); dispatch_semaphore_t semaphore = dispatch_semaphore_create(0); __block int number = 0; dispatch_async(queue, ^&#123; // 追加任务1 [NSThread sleepForTimeInterval:2]; // 模拟耗时操作 NSLog(@&quot;1---%@&quot;,[NSThread currentThread]); // 打印当前线程 number = 100; dispatch_semaphore_signal(semaphore); &#125;); dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); NSLog(@&quot;semaphore---end,number = %zd&quot;,number);&#125; 输出结果：2018-02-23 22:22:26.521665+0800 YSC-GCD-demo[20642:5246341] currentThread—{number = 1, name = main}2018-02-23 22:22:26.521869+0800 YSC-GCD-demo[20642:5246341] semaphore—begin2018-02-23 22:22:28.526841+0800 YSC-GCD-demo[20642:5246638] 1—{number = 3, name = (null)}2018-02-23 22:22:28.527030+0800 YSC-GCD-demo[20642:5246341] semaphore—end,number = 100 从 Dispatch Semaphore 实现线程同步的代码可以看到： semaphore---end 是在执行完 number = 100; 之后才打印的。而且输出结果 number 为 100。这是因为异步执行不会做任何等待，可以继续执行任务。异步执行将任务1追加到队列之后，不做等待，接着执行dispatch_semaphore_wait方法。此时 semaphore == 0，当前线程进入等待状态。然后，异步任务1开始执行。任务1执行到dispatch_semaphore_signal之后，总信号量，此时 semaphore == 1，dispatch_semaphore_wait方法使总信号量减1，正在被阻塞的线程（主线程）恢复继续执行。最后打印semaphore---end,number = 100。这样就实现了线程同步，将异步执行任务转换为同步执行任务。 6.6.2 Dispatch Semaphore 线程安全和线程同步（为线程加锁）线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。 若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。 线程同步：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。 举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。 下面，我们模拟火车票售卖的方式，实现 NSThread 线程安全和解决线程同步问题。 场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。 6.6.2.1 非线程安全（不使用 semaphore）先来看看不考虑线程安全的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142/** * 非线程安全：不使用 semaphore * 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票 */- (void)initTicketStatusNotSave &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;semaphore---begin&quot;); self.ticketSurplusCount = 50; // queue1 代表北京火车票售卖窗口 dispatch_queue_t queue1 = dispatch_queue_create(&quot;net.bujige.testQueue1&quot;, DISPATCH_QUEUE_SERIAL); // queue2 代表上海火车票售卖窗口 dispatch_queue_t queue2 = dispatch_queue_create(&quot;net.bujige.testQueue2&quot;, DISPATCH_QUEUE_SERIAL); __weak typeof(self) weakSelf = self; dispatch_async(queue1, ^&#123; [weakSelf saleTicketNotSafe]; &#125;); dispatch_async(queue2, ^&#123; [weakSelf saleTicketNotSafe]; &#125;);&#125;/** * 售卖火车票(非线程安全) */- (void)saleTicketNotSafe &#123; while (1) &#123; if (self.ticketSurplusCount &gt; 0) &#123; //如果还有票，继续售卖 self.ticketSurplusCount--; NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数：%d 窗口：%@&quot;, self.ticketSurplusCount, [NSThread currentThread]]); [NSThread sleepForTimeInterval:0.2]; &#125; else &#123; //如果已卖完，关闭售票窗口 NSLog(@&quot;所有火车票均已售完&quot;); break; &#125; &#125;&#125; 输出结果（部分）：2018-02-23 22:25:35.789072+0800 YSC-GCD-demo[20712:5258914] currentThread—{number = 1, name = main}2018-02-23 22:25:35.789260+0800 YSC-GCD-demo[20712:5258914] semaphore—begin2018-02-23 22:25:35.789641+0800 YSC-GCD-demo[20712:5259176] 剩余票数：48 窗口：{number = 3, name = (null)}2018-02-23 22:25:35.789646+0800 YSC-GCD-demo[20712:5259175] 剩余票数：49 窗口：{number = 4, name = (null)}2018-02-23 22:25:35.994113+0800 YSC-GCD-demo[20712:5259175] 剩余票数：47 窗口：{number = 4, name = (null)}2018-02-23 22:25:35.994129+0800 YSC-GCD-demo[20712:5259176] 剩余票数：46 窗口：{number = 3, name = (null)}2018-02-23 22:25:36.198993+0800 YSC-GCD-demo[20712:5259176] 剩余票数：45 窗口：{number = 3, name = (null)}… 可以看到在不考虑线程安全，不使用 semaphore 的情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。 6.6.2.2 线程安全（使用 semaphore 加锁）考虑线程安全的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 线程安全：使用 semaphore 加锁 * 初始化火车票数量、卖票窗口(线程安全)、并开始卖票 */- (void)initTicketStatusSave &#123; NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程 NSLog(@&quot;semaphore---begin&quot;); semaphoreLock = dispatch_semaphore_create(1); self.ticketSurplusCount = 50; // queue1 代表北京火车票售卖窗口 dispatch_queue_t queue1 = dispatch_queue_create(&quot;net.bujige.testQueue1&quot;, DISPATCH_QUEUE_SERIAL); // queue2 代表上海火车票售卖窗口 dispatch_queue_t queue2 = dispatch_queue_create(&quot;net.bujige.testQueue2&quot;, DISPATCH_QUEUE_SERIAL); __weak typeof(self) weakSelf = self; dispatch_async(queue1, ^&#123; [weakSelf saleTicketSafe]; &#125;); dispatch_async(queue2, ^&#123; [weakSelf saleTicketSafe]; &#125;);&#125;/** * 售卖火车票(线程安全) */- (void)saleTicketSafe &#123; while (1) &#123; // 相当于加锁 dispatch_semaphore_wait(semaphoreLock, DISPATCH_TIME_FOREVER); if (self.ticketSurplusCount &gt; 0) &#123; //如果还有票，继续售卖 self.ticketSurplusCount--; NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数：%d 窗口：%@&quot;, self.ticketSurplusCount, [NSThread currentThread]]); [NSThread sleepForTimeInterval:0.2]; &#125; else &#123; //如果已卖完，关闭售票窗口 NSLog(@&quot;所有火车票均已售完&quot;); // 相当于解锁 dispatch_semaphore_signal(semaphoreLock); break; &#125; // 相当于解锁 dispatch_semaphore_signal(semaphoreLock); &#125;&#125; 输出结果为：2018-02-23 22:32:19.814232+0800 YSC-GCD-demo[20862:5290531] currentThread—{number = 1, name = main}2018-02-23 22:32:19.814412+0800 YSC-GCD-demo[20862:5290531] semaphore—begin2018-02-23 22:32:19.814837+0800 YSC-GCD-demo[20862:5290687] 剩余票数：49 窗口：{number = 3, name = (null)}2018-02-23 22:32:20.017745+0800 YSC-GCD-demo[20862:5290689] 剩余票数：48 窗口：{number = 4, name = (null)}2018-02-23 22:32:20.222039+0800 YSC-GCD-demo[20862:5290687] 剩余票数：47 窗口：{number = 3, name = (null)}…2018-02-23 22:32:29.024817+0800 YSC-GCD-demo[20862:5290689] 剩余票数：4 窗口：{number = 4, name = (null)}2018-02-23 22:32:29.230110+0800 YSC-GCD-demo[20862:5290687] 剩余票数：3 窗口：{number = 3, name = (null)}2018-02-23 22:32:29.433615+0800 YSC-GCD-demo[20862:5290689] 剩余票数：2 窗口：{number = 4, name = (null)}2018-02-23 22:32:29.637572+0800 YSC-GCD-demo[20862:5290687] 剩余票数：1 窗口：{number = 3, name = (null)}2018-02-23 22:32:29.840234+0800 YSC-GCD-demo[20862:5290689] 剩余票数：0 窗口：{number = 4, name = (null)}2018-02-23 22:32:30.044960+0800 YSC-GCD-demo[20862:5290687] 所有火车票均已售完2018-02-23 22:32:30.045260+0800 YSC-GCD-demo[20862:5290689] 所有火车票均已售完 可以看出，在考虑了线程安全的情况下，使用 dispatch_semaphore机制之后，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。 参考资料： iOS GCD之dispatch_semaphore（信号量） iOS多线程详尽总结系列文章： iOS多线程：『pthread、NSThread』详尽总结 iOS多线程：『GCD』详解总结 iOS多线程：『NSOperation』详解总结 iOS多线程：『RunLoop』详解总结]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS Block用法和实现原理]]></title>
    <url>%2F2018%2F09%2F17%2FiOS-Block%E7%94%A8%E6%B3%95%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[《Objective-C高级编程》是一本有趣又难懂的书，全书就讲了引用计数、Block、GCD三个概念，有趣是因为讲原理、实现的部分是其它iOS专业书籍里少有的。然而每个章节不读个三五遍还是比较难理解贯通的。本文针对其中的Block部分做些简单的笔记记录，讲述Block的用法和部分实现原理，详细解说从原书中寻。 Block概要Block：带有自动变量的匿名函数。匿名函数：没有函数名的函数，一对{}包裹的内容是匿名函数的作用域。自动变量：栈上声明的一个变量不是静态变量和全局变量，是不可以在这个栈内声明的匿名函数中使用的，但在Block中却可以。虽然使用Block不用声明类，但是Block提供了类似Objective-C的类一样可以通过成员变量来保存作用域外变量值的方法，那些在Block的一对{}里使用到但却是在{}作用域以外声明的变量，就是Block截获的自动变量。 Block常规概念Block语法Block表达式语法： ^ 返回值类型 (参数列表) {表达式} 例如： 123^ int (int count) &#123; return count + 1;&#125;; 其中，可省略部分有： 返回类型，例： 123^ (int count) &#123; return count + 1;&#125;; 参数列表为空，则可省略，例： 123^ &#123; NSLog(@&quot;No Parameter&quot;);&#125;; 即最简模式语法为： ^ {表达式} Block类型变量声明Block类型变量语法： 返回值类型 (^变量名)(参数列表) = Block表达式 例如，如下声明了一个变量名为blk的Block： 123int (^blk)(int) = ^(int count) &#123; return count + 1;&#125;; 当Block类型变量作为函数的参数时，写作： 123- (void)func:(int (^)(int))blk &#123; NSLog(@&quot;Param:%@&quot;, blk);&#125; 借助typedef可简写： 12345typedef int (^blk_k)(int);- (void)func:(blk_k)blk &#123; NSLog(@&quot;Param:%@&quot;, blk);&#125; Block类型变量作返回值时，写作： 12345- (int (^)(int))funcR &#123; return ^(int count) &#123; return count ++; &#125;;&#125; 借助typedef简写： 1234567typedef int (^blk_k)(int);- (blk_k)funcR &#123; return ^(int count) &#123; return count ++; &#125;;&#125; 截获自动变量值Block表达式可截获所使用的自动变量的值。截获：保存自动变量的瞬间值。因为是“瞬间值”，所以声明Block之后，即便在Block外修改自动变量的值，也不会对Block内截获的自动变量值产生影响。例如： 1234567int i = 10;void (^blk)(void) = ^&#123; NSLog(@&quot;In block, i = %d&quot;, i);&#125;;i = 20;//Block外修改变量i，也不影响Block内的自动变量blk();//i修改为20后才执行，打印: In block, i = 10NSLog(@&quot;i = %d&quot;, i);//打印：i = 20 __block说明符号自动变量截获的值为Block声明时刻的瞬间值，保存后就不能改写该值，如需对自动变量进行重新赋值，需要在变量声明前附加block说明符，这时该变量称为block变量。例如： 1234567__block int i = 10;//i为__block变量，可在block中重新赋值void (^blk)(void) = ^&#123; NSLog(@&quot;In block, i = %d&quot;, i);&#125;;i = 20;blk();//打印: In block, i = 20NSLog(@&quot;i = %d&quot;, i);//打印：i = 20 自动变量值为一个对象情况当自动变量为一个类的对象，且没有使用__block修饰时，虽然不可以在Block内对该变量进行重新赋值，但可以修改该对象的属性。如果该对象是个Mutable的对象，例如NSMutableArray，则还可以在Block内对NSMutableArray进行元素的增删： 12345678NSMutableArray *array = [[NSMutableArray alloc] initWithObjects:@&quot;1&quot;, @&quot;2&quot;,nil ];NSLog(@&quot;Array Count:%ld&quot;, array.count);//打印Array Count:2void (^blk)(void) = ^&#123; [array removeObjectAtIndex:0];//Ok //array = [NSNSMutableArray new];//没有__block修饰，编译失败！&#125;;blk();NSLog(@&quot;Array Count:%ld&quot;, array.count);//打印Array Count:1 Block实现原理使用ClangBlock实际上是作为极普通的C语言源码来处理的：含有Block语法的源码首先被转换成C语言编译器能处理的源码，再作为普通的C源代码进行编译。使用LLVM编译器的clang命令可将含有Block的Objective-C代码转换成C++的源代码，以探查其具体实现方式： clang -rewrite-objc 源码文件名 注：如果使用该命令报错：’UIKit/UIKit.h’ file not found，可参考《Objective-C编译成C++代码报错》解决。 Block结构使用Block的时候，编译器对Block语法进行了怎样的转换？ 1234567int main() &#123; int count = 10; void (^ blk)() = ^()&#123; NSLog(@&quot;In Block:%d&quot;, count); &#125;; blk();&#125; 如上所示的最简单的Block使用代码，经clang转换后，可得到以下几个部分（有代码删减和注释添加）： 1234567static void __main_block_func_0( struct __main_block_impl_0 *__cself) &#123; int count = __cself-&gt;count; // bound by copy NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_64_vf2p_jz52yz7x4xtcx55yv0r0000gn_T_main_d2f8d2_mi_0, count);&#125; 这是一个函数的实现，对应Block中{}内的内容，这些内容被当做了C语言函数来处理，函数参数中的__cself相当于Objective-C中的self。 123456789101112131415struct __main_block_impl_0 &#123; struct __block_impl impl; struct __main_block_desc_0* Desc; //描述Block大小、版本等信息 int count; //构造函数函数 __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _count, int flags=0) : count(_count) &#123; impl.isa = &amp;_NSConcreteStackBlock; //在函数栈上声明，则为_NSConcreteStackBlock impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;; __main_block_impl_0即为main()函数栈上的Block结构体，其中的__block_impl结构体声明如下： 123456struct __block_impl &#123; void *isa;//指明对象的Class int Flags; int Reserved; void *FuncPtr;&#125;; __block_impl结构体，即为Block的结构体，可理解为Block的类结构。再看下main()函数翻译的内容： 123456int main() &#123; int count = 10; void (* blk)() = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, count)); ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);&#125; 去除掉复杂的类型转化，可简写为： 1234567int main() &#123; int count = 10; sturct __main_block_impl_0 *blk = &amp;__main_block_impl_0(__main_block_func_0, //函数指针 &amp;__main_block_desc_0_DATA)); //Block大小、版本等信息 (*blk-&gt;FuncPtr)(blk); //调用FuncPtr指向的函数，并将blk自己作为参数传入&#125; 由此，可以看出，Block也是Objective-C中的对象。Block有三种类（即__block_impl的isa指针指向的值，isa说明参考《Objective-C isa 指针 与 runtime 机制》），根据Block对象创建时所处数据区不同而进行区别： _NSConcreteStackBlock：在栈上创建的Block对象 _NSConcreteMallocBlock：在堆上创建的Block对象 _NSConcreteGlobalBlock：全局数据区的Block对象 如何截获自动变量上部分介绍了Block的结构，和作为匿名函数的调用机制，那自动变量截获是发生在什么时候呢？观察上节代码中__main_block_impl_0结构体（main栈上Block的结构体）的构造函数可以看到，栈上的变量count以参数的形式传入到了这个构造函数中，此处即为变量的自动截获。因此可以这样理解：__block_impl结构体已经可以代表Block类了，但在栈上又声明了__main_block_impl_0结构体，对__block_impl进行封装后才来表示栈上的Block类，就是为了获取Block中使用到的栈上声明的变量（栈上没在Block中使用的变量不会被捕获），变量被保存在Block的结构体实例中。所以在blk()执行之前，栈上简单数据类型的count无论发生什么变化，都不会影响到Block以参数形式传入而捕获的值。但这个变量是指向对象的指针时，是可以修改这个对象的属性的，只是不能为变量重新赋值。 Block的存储域上文已提到，根据Block创建的位置不同，Block有三种类型，创建的Block对象分别会存储到栈、堆、全局数据区域。 12345678void (^blk)(void) = ^&#123; NSLog(@&quot;Global Block&quot;);&#125;;int main() &#123; blk(); NSLog(@&quot;%@&quot;,[blk class]);//打印：__NSGlobalBlock__&#125; 像上面代码块中的全局blk自然是存储在全局数据区，但注意在函数栈上创建的blk，如果没有截获自动变量，Block的结构实例还是会被设置在程序的全局数据区，而非栈上： 1234567891011121314int main() &#123; void (^blk)(void) = ^&#123;//没有截获自动变量的Block NSLog(@&quot;Stack Block&quot;); &#125;; blk(); NSLog(@&quot;%@&quot;,[blk class]);//打印:__NSGlobalBlock__ int i = 1; void (^captureBlk)(void) = ^&#123;//截获自动变量i的Block NSLog(@&quot;Capture:%d&quot;, i); &#125;; captureBlk(); NSLog(@&quot;%@&quot;,[captureBlk class]);//打印：__NSMallocBlock__&#125; 可以看到截获了自动变量的Block打印的类是NSGlobalBlock，表示存储在全局数据区。但为什么捕获自动变量的Block打印的类却是设置在堆上的NSMallocBlock，而非栈上的NSStackBlock?这个问题稍后解释。 Block复制配置在栈上的Block，如果其所属的栈作用域结束，该Block就会被废弃，对于超出Block作用域仍需使用Block的情况，Block提供了将Block从栈上复制到堆上的方法来解决这种问题，即便Block栈作用域已结束，但被拷贝到堆上的Block还可以继续存在。复制到堆上的Block，将_NSConcreteMallocBlock类对象写入Block结构体实例的成员变量isa： 1impl.isa = &amp;_NSConcreteMallocBlock; 在ARC有效时，大多数情况下编译器会进行判断，自动生成将Block从栈上复制到堆上的代码，以下几种情况栈上的Block会自动复制到堆上： 调用Block的copy方法 将Block作为函数返回值时 将Block赋值给__strong修改的变量时 向Cocoa框架含有usingBlock的方法或者GCD的API传递Block参数时 其它时候向方法的参数中传递Block时，需要手动调用copy方法复制Block。上一节的栈上截获了自动变量i的Block之所以在栈上创建，却是NSMallocBlock类，就是因为这个Block对象赋值给了_strong修饰的变量captureBlk（_strong是ARC下对象的默认修饰符）。因为上面四条规则，在ARC下其实很少见到_NSConcreteStackBlock类的Block，大多数情况编译器都保证了Block是在堆上创建的，如下代码所示，仅最后一行代码直接使用一个不赋值给变量的Block，它的类才是NSStackBlock**： 123456789int count = 0;blk_t blk = ^()&#123; NSLog(@&quot;In Stack:%d&quot;, count);&#125;;NSLog(@&quot;blk&apos;s Class:%@&quot;, [blk class]);//打印：blk&apos;s Class:__NSMallocBlock__NSLog(@&quot;Global Block:%@&quot;, [^&#123;NSLog(@&quot;Global Block&quot;);&#125; class]);//打印：Global Block:__NSGlobalBlock__NSLog(@&quot;Copy Block:%@&quot;, [[^&#123;NSLog(@&quot;Copy Block:%d&quot;,count);&#125; copy] class]);//打印：Copy Block:__NSMallocBlock__NSLog(@&quot;Stack Block:%@&quot;, [^&#123;NSLog(@&quot;Stack Block:%d&quot;,count);&#125; class]);//打印：Stack Block:__NSStackBlock__ 关于ARC下和MRC下Block自动copy的区别，查看《Block 小测验》里几道题目就能区分了。另外，原书存在ARC和MRC混合讲解、区分不明的情况，比如书中几个使用到栈上对象导致Crash的例子是MRC条件下才会发生的，但书中没做特殊说明。 使用__block发生了什么Block捕获的自动变量添加block说明符，就可在Block内读和写该变量，也可以在原来的栈上读写该变量。自动变量的截获保证了栈上的自动变量被销毁后，Block内仍可使用该变量。**block保证了栈上和Block内（通常在堆上）可以访问和修改“同一个变量”**，__block是如何实现这一功能的？ block发挥作用的原理：将栈上用block修饰的自动变量封装成一个结构体，让其在堆上创建，以方便从栈上或堆上访问和修改同一份数据。 验证过程：现在对刚才的代码段，加上__block说明符，并在block内外读写变量count。 1234567891011int main() &#123; __block int count = 10; void (^ blk)() = ^()&#123; count = 20; NSLog(@&quot;In Block:%d&quot;, count);//打印：In Block:20 &#125;; count ++; NSLog(@&quot;Out Block:%d&quot;, count);//打印：Out Block:11 blk();&#125; 将上面的代码段clang，发现Block的结构体__main_block_impl_0结构如下所示： 1234567891011struct __main_block_impl_0 &#123; struct __block_impl impl; struct __main_block_desc_0* Desc; __Block_byref_count_0 *count; // by ref __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_count_0 *_count, int flags=0) : count(_count-&gt;__forwarding) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;; 最大的变化就是count变量不再是int类型了，count变成了一个指向__Block_byref_count_0结构体的指针，__Block_byref_count_0结构如下： 1234567struct __Block_byref_count_0 &#123; void *__isa;__Block_byref_count_0 *__forwarding; int __flags; int __size; int count;&#125;; 它保存了int count变量，还有一个指向__Block_byref_count_0实例的指针__forwarding，通过下面两段代码__forwarding指针的用法可以知道，该指针其实指向的是对象自身： 12345678//Block的执行函数static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123; __Block_byref_count_0 *count = __cself-&gt;count; // bound by ref (count-&gt;__forwarding-&gt;count) = 20;//对应count = 20; NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_64_vf2p_jz52yz7x4xtcx55yv0r0000gn_T_main_fafeeb_mi_0, (count-&gt;__forwarding-&gt;count)); &#125; 1234567891011121314151617181920//main函数int main() &#123; __attribute__((__blocks__(byref))) __Block_byref_count_0 count = &#123;(void*)0, (__Block_byref_count_0 *)&amp;count, 0, sizeof(__Block_byref_count_0), 10&#125;; void (* blk)() = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_count_0 *)&amp;count, 570425344)); (count.__forwarding-&gt;count) ++;//对应count ++; NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_64_vf2p_jz52yz7x4xtcx55yv0r0000gn_T_main_fafeeb_mi_1, (count.__forwarding-&gt;count)); ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);&#125; 为什么要通过forwarding指针完成对count变量的读写修改？为了保证无论是在栈上还是在堆上，都能通过都forwarding指针找到在堆上创建的count这个main_block_func_0结构体，以完成对count-&gt;count（第一个count是main_block_func_0对象，第二个count是int类型变量）的访问和修改。示意图如下： Block的循环引用Block的循环引用原理和解决方法大家都比较熟悉，此处将结合上文的介绍，介绍一种不常用的解决Block循环引用的方法和一种借助Block参数解决该问题的方法。Block循环引用原因：一个对象A有Block类型的属性，从而持有这个Block，如果Block的代码块中使用到这个对象A，或者仅仅是用用到A对象的属性，会使Block也持有A对象，导致两者互相持有，不能在作用域结束后正常释放。解决原理：对象A照常持有Block，但Block不能强引用持有对象A以打破循环。解决方法：方法一：对Block内要使用的对象A使用__weak进行修饰，Block对对象A弱引用打破循环。 有三种常用形式： 使用__weak ClassName 1234__block XXViewController* weakSelf = self;self.blk = ^&#123; NSLog(@&quot;In Block : %@&quot;,weakSelf);&#125;; 使用__weak typeof(self) 1234__weak typeof(self) weakSelf = self;self.blk = ^&#123; NSLog(@&quot;In Block : %@&quot;,weakSelf);&#125;; Reactive Cocoa中的@weakify和@strongify 12345@weakify(self);self.blk = ^&#123; @strongify(self); NSLog(@&quot;In Block : %@&quot;,self);&#125;; 其原理参考《@weakify, @strongify》，自己简便实现参考《@weak - @strong 宏的实现》 方法二：对Block内要使用的对象A使用__block进行修饰，并在代码块内，使用完__block变量后将其设为nil，并且该block必须至少执行一次。 1234__block XXController *blkSelf = self;self.blk = ^&#123; NSLog(@&quot;In Block : %@&quot;,blkSelf);&#125;; 注意上述代码仍存在内存泄露，因为： XXController对象持有Block对象blk blk对象持有__block变量blkSelf __block变量blkSelf持有XXController对象 1234567__block XXController *blkSelf = self;self.blk = ^&#123; NSLog(@&quot;In Block : %@&quot;,blkSelf); blkSelf = nil;//不能省略&#125;;self.blk();//该block必须执行一次，否则还是内存泄露 在block代码块内，使用完使用完__block变量后将其设为nil，并且该block必须至少执行一次后，不存在内存泄露，因为此时： XXController对象持有Block对象blk blk对象持有__block变量blkSelf(类型为编译器创建的结构体) block变量blkSelf在执行blk()之后被设置为nil（block变量结构体的__forwarding指针指向了nil），不再持有XXController对象，打破循环 第二种使用__block打破循环的方法，优点是： 可通过block变量动态控制持有XXController对象的时间，运行时决定是否将nil或其他变量赋值给block变量 不能使用weak的系统中，使用unsafe_unretained来替代weak打破循环可能有野指针问题，使用block则可避免该问题 其缺点也明显： 必须手动保证__block变量最后设置为nil block必须执行一次，否则__block不为nil循环应用仍存在 因此，还是避免使用第二种不常用方式，直接使用weak打破Block循环引用。方法三：将在Block内要使用到的对象（一般为self对象），以Block参数的形式传入，Block就不会捕获该对象，而将其作为参数使用，其生命周期系统的栈自动管理，不造成内存泄露。即原来使用weak的写法： 1234567__weak typeof(self) weakSelf = self;self.blk = ^&#123; __strong typeof(self) strongSelf = weakSelf; NSLog(@&quot;Use Property:%@&quot;, strongSelf.name); //……&#125;;self.blk(); 改为Block传参写法后： 1234self.blk = ^(UIViewController *vc) &#123; NSLog(@&quot;Use Property:%@&quot;, vc.name);&#125;;self.blk(self); 优点： 简化了两行代码，更优雅 更明确的API设计：告诉API使用者，该方法的Block直接使用传进来的参数对象，不会造成循环引用，不用调用者再使用weak避免循环 该种用法的详细思路，和clang后的数据结构，可参考《Heap-Stack Dance》。 转自 [kamous]]]></content>
      <categories>
        <category>Block</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Block技巧与底层解析]]></title>
    <url>%2F2018%2F09%2F17%2FBlock%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%BA%95%E5%B1%82%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[目录 Block底层解析 什么是block？ block编译转换结构 block实际结构 block的类型 NSConcreteGlobalBlock和NSConcreteStackBlock NSConcreteMallocBlock 捕捉变量对block结构的影响 局部变量 全局变量 局部静态变量 __block修饰的变量 self隐式循环引用 不同类型block的复制 栈block 堆block 全局block block辅助函数 __block修饰的基本类型的辅助函数 对象的辅助函数 ARC中block的工作 block试验 block作为参数传递 block作为返回值 block属性 参考博文 Block底层解析最近看了一些block的资料，并动手做了一些实践，摘录并添加了一些结论。 什么是block？首先，看一个极简的block： 1234567int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; ^&#123; &#125;; &#125; return 0;&#125; block编译转换结构对其执行clang -rewrite-objc编译转换成C++实现，得到以下代码： 123456789101112131415161718192021222324252627282930struct __block_impl &#123; void *isa; int Flags; int Reserved; void *FuncPtr;&#125;;struct __main_block_impl_0 &#123; struct __block_impl impl; struct __main_block_desc_0* Desc; __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;&#125;static struct __main_block_desc_0 &#123; size_t reserved; size_t Block_size;&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;int main(int argc, const char * argv[]) &#123; /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA); &#125; return 0;&#125; 不难看出其中的__main_block_impl_0就是block的一个C++的实现(最后面的_0代表是main中的第几个block)，也就是说也是一个结构体。其中__block_impl的定义如下： 123456struct __block_impl &#123; void *isa; int Flags; int Reserved; void *FuncPtr;&#125;; 其结构体成员如下： isa，指向所属类的指针，也就是block的类型 flags，标志变量，在实现block的内部操作时会用到 Reserved，保留变量 FuncPtr，block执行时调用的函数指针可以看出，它包含了isa指针（包含isa指针的皆为对象），也就是说block也是一个对象(runtime里面，对象和类都是用结构体表示)。 __main_block_desc_0的定义如下： 1234static struct __main_block_desc_0 &#123; size_t reserved; size_t Block_size;&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;; 其结构成员含义如下： reserved：保留字段 Block_size：block大小(sizeof(struct __main_block_impl_0)) 以上代码在定义__main_block_desc_0结构体时，同时创建了__main_block_desc_0_DATA，并给它赋值，以供在main函数中对__main_block_impl_0进行初始化。__main_block_impl_0定义了显式的构造函数，其函数体如下： 123456__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc;&#125; 可以看出， __main_block_impl_0的isa指针指向了_NSConcreteStackBlock， 从main函数中看， __main_block_impl_0的FuncPtr指向了函数__main_block_func_0 __main_block_impl_0的Desc也指向了定义__main_block_desc_0时就创建的__main_block_desc_0_DATA，其中纪录了block结构体大小等信息。 以上就是根据编译转换的结果，对一个简单block的解析，后面会将block操作不同类型的外部变量，对block结构的影响进行相应的说明。 block实际结构接下来观察下Block_private.h文件中对block的相关结构体的真实定义： 1234567891011121314151617/* Revised new layout. */struct Block_descriptor &#123; unsigned long int reserved; unsigned long int size; void (*copy)(void *dst, void *src); void (*dispose)(void *);&#125;;struct Block_layout &#123; void *isa; int flags; int reserved; void (*invoke)(void *, ...); struct Block_descriptor *descriptor; /* Imported variables. */&#125;; 有了上文对编译转换的分析，这里只针对略微不同的成员进行分析： invoke，同上文的FuncPtr，block执行时调用的函数指针，block定义时内部的执行代码都在这个函数中 Block_descriptor，block的详细描述 ​ copy/dispose，辅助拷贝/销毁函数，处理block范围外的变量时使用 总体来说，block就是一个里面存储了指向函数体中包含定义block时的代码块的函数指针，以及block外部上下文变量等信息的结构体。 block的类型block的常见类型有3种： _NSConcreteGlobalBlock（全局） _NSConcreteStackBlock（栈） _NSConcreteMallocBlock（堆） 附上APUE的进程虚拟内存段分布图： 进程虚拟内存空间分布 其中前2种在Block.h种声明，后1种在Block_private.h中声明，所以最后1种基本不会在源码中出现。由于无法直接创建_NSConcreteMallocBlock类型的block，所以这里只对前面2种进行手动创建分析，最后1种通过源代码分析。 NSConcreteGlobalBlock和NSConcreteStackBlock首先，根据前面两种类型，编写以下代码： 123456789101112void (^globalBlock)() = ^&#123;&#125;;int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; void (^stackBlock1)() = ^&#123; &#125;; &#125; return 0;&#125; 对其进行编译转换后得到以下缩略代码： 12345678910111213141516171819202122232425262728293031// globalBlockstruct __globalBlock_block_impl_0 &#123; struct __block_impl impl; struct __globalBlock_block_desc_0* Desc; __globalBlock_block_impl_0(void *fp, struct __globalBlock_block_desc_0 *desc, int flags=0) &#123; impl.isa = &amp;_NSConcreteGlobalBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;...// stackBlockstruct __main_block_impl_0 &#123; struct __block_impl impl; struct __main_block_desc_0* Desc; __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;...int main(int argc, const char * argv[]) &#123; /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; void (*stackBlock)() = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA); &#125; return 0;&#125; 可以看出globalBlock的isa指向了_NSConcreteGlobalBlock，即在全局区域创建，编译时具体的代码就已经确定在上图中的代码段中了，block变量存储在全局数据存储区；stackBlock的isa指向了_NSConcreteStackBlock，即在栈区创建。 NSConcreteMallocBlock接下来是在堆中的block，堆中的block无法直接创建，其需要由_NSConcreteStackBlock类型的block拷贝而来(也就是说block需要执行copy之后才能存放到堆中)。由于block的拷贝最终都会调用_Block_copy_internal函数，所以观察这个函数就可以知道堆中block是如何被创建的了： 123456789101112131415161718192021222324252627static void *_Block_copy_internal(const void *arg, const int flags) &#123; struct Block_layout *aBlock; ... aBlock = (struct Block_layout *)arg; ... // Its a stack block. Make a copy. if (!isGC) &#123; // 申请block的堆内存 struct Block_layout *result = malloc(aBlock-&gt;descriptor-&gt;size); if (!result) return (void *)0; // 拷贝栈中block到刚申请的堆内存中 memmove(result, aBlock, aBlock-&gt;descriptor-&gt;size); // bitcopy first // reset refcount result-&gt;flags &amp;= ~(BLOCK_REFCOUNT_MASK); // XXX not needed result-&gt;flags |= BLOCK_NEEDS_FREE | 1; // 改变isa指向_NSConcreteMallocBlock，即堆block类型 result-&gt;isa = _NSConcreteMallocBlock; if (result-&gt;flags &amp; BLOCK_HAS_COPY_DISPOSE) &#123; //printf(&quot;calling block copy helper %p(%p, %p)...\n&quot;, aBlock-&gt;descriptor-&gt;copy, result, aBlock); (*aBlock-&gt;descriptor-&gt;copy)(result, aBlock); // do fixup &#125; return result; &#125; else &#123; ... &#125;&#125; 从以上代码以及注释可以很清楚的看出，函数通过memmove将栈中的block的内容拷贝到了堆中，并使isa指向了_NSConcreteMallocBlock。block主要的一些学问就出在栈中block向堆中block的转移过程中了。 捕捉变量对block结构的影响接下来会编译转换捕捉不同变量类型的block，以对比它们的区别。 局部变量前： 12345- (void)test&#123; int a; ^&#123;a;&#125;;&#125; 后： 12345678910111213141516171819202122232425struct __Person__test_block_impl_0 &#123; struct __block_impl impl; struct __Person__test_block_desc_0* Desc; int a; // a(_a)是构造函数的参数列表初始化形式，相当于a = _a。从_I_Person_test看，传入的就是a __Person__test_block_impl_0(void *fp, struct __Person__test_block_desc_0 *desc, int _a, int flags=0) : a(_a) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;static void __Person__test_block_func_0(struct __Person__test_block_impl_0 *__cself) &#123; int a = __cself-&gt;a; // bound by copya;&#125;static struct __Person__test_block_desc_0 &#123; size_t reserved; size_t Block_size;&#125; __Person__test_block_desc_0_DATA = &#123; 0, sizeof(struct __Person__test_block_impl_0)&#125;;static void _I_Person_test(Person * self, SEL _cmd) &#123; int a; (void (*)())&amp;__Person__test_block_impl_0((void *)__Person__test_block_func_0, &amp;__Person__test_block_desc_0_DATA, a);&#125; 可以看到，block相对于文章开头增加了一个int类型的成员变量，他就是用来存储外部变量a的。可以看出，这次拷贝只是一次值传递。并且当我们想在block中进行以下操作时，将会发生错误 1^&#123;a = 10;&#125;; 编译器会提示 错误提示 。因为_I_Person_test函数中的a和Persontest_block_func_0函数中的a并没有在同一个作用域，所以在block对a进行赋值是没有意义的，所以编译器给出了错误。我们可以通过地址传递来消除以上错误： 1234567891011- (void)test&#123; int a = 0; // 利用指针p存储a的地址 int *p = &amp;a; ^&#123; // 通过a的地址设置a的值 *p = 10; &#125;;&#125; 但是变量a的生命周期是和方法test的栈相关联的，当test运行结束，栈随之销毁，那么变量a就会被销毁，p也就成为了野指针。如果block是作为参数或者返回值，这些类型都是跨栈的，也就是说再次调用会造成野指针错误。 全局变量前： 123456789101112// 全局静态static int a;// 全局int b;- (void)test&#123; ^&#123; a = 10; b = 10; &#125;;&#125; 后： 12345678910111213141516171819202122232425262728static int a;int b;struct __Person__test_block_impl_0 &#123; struct __block_impl impl; struct __Person__test_block_desc_0* Desc; __Person__test_block_impl_0(void *fp, struct __Person__test_block_desc_0 *desc, int flags=0) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;static void __Person__test_block_func_0(struct __Person__test_block_impl_0 *__cself) &#123; a = 10; b = 10; &#125;static struct __Person__test_block_desc_0 &#123; size_t reserved; size_t Block_size;&#125; __Person__test_block_desc_0_DATA = &#123; 0, sizeof(struct __Person__test_block_impl_0)&#125;;static void _I_Person_test(Person * self, SEL _cmd) &#123; (void (*)())&amp;__Person__test_block_impl_0((void *)__Person__test_block_func_0, &amp;__Person__test_block_desc_0_DATA);&#125; 可以看出，因为全局变量都是在静态数据存储区，在程序结束前不会被销毁，所以block直接访问了对应的变量，而没有在Persontest_block_impl_0结构体中给变量预留位置。 局部静态变量前 1234567- (void)test&#123; static int a; ^&#123; a = 10; &#125;;&#125; 后： 123456789101112131415161718192021222324252627struct __Person__test_block_impl_0 &#123; struct __block_impl impl; struct __Person__test_block_desc_0* Desc; int *a; __Person__test_block_impl_0(void *fp, struct __Person__test_block_desc_0 *desc, int *_a, int flags=0) : a(_a) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;static void __Person__test_block_func_0(struct __Person__test_block_impl_0 *__cself) &#123; int *a = __cself-&gt;a; // bound by copy // 这里通过局部静态变量a的地址来对其进行修改 (*a) = 10; &#125;static struct __Person__test_block_desc_0 &#123; size_t reserved; size_t Block_size;&#125; __Person__test_block_desc_0_DATA = &#123; 0, sizeof(struct __Person__test_block_impl_0)&#125;;static void _I_Person_test(Person * self, SEL _cmd) &#123; static int a; // 传入a的地址 (void (*)())&amp;__Person__test_block_impl_0((void *)__Person__test_block_func_0, &amp;__Person__test_block_desc_0_DATA, &amp;a);&#125; 需要注意一点的是静态局部变量是存储在静态数据存储区域的，也就是和程序拥有一样的生命周期，也就是说在程序运行时，都能够保证block访问到一个有效的变量。但是其作用范围还是局限于定义它的函数中，所以只能在block通过静态局部变量的地址来进行访问。关于变量的存储我原来的这篇博客有提及：c语言臆想–全局—局部变量 __block修饰的变量前： 1234567- (void)test&#123; __block int a; ^&#123; a = 10; &#125;;&#125; 后： 1234567891011121314151617181920212223242526272829303132333435363738394041struct __Block_byref_a_0 &#123; void *__isa;__Block_byref_a_0 *__forwarding; int __flags; int __size; int a;&#125;;struct __Person__test_block_impl_0 &#123; struct __block_impl impl; struct __Person__test_block_desc_0* Desc; __Block_byref_a_0 *a; // by ref __Person__test_block_impl_0(void *fp, struct __Person__test_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags=0) : a(_a-&gt;__forwarding) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;static void __Person__test_block_func_0(struct __Person__test_block_impl_0 *__cself) &#123; __Block_byref_a_0 *a = __cself-&gt;a; // bound by ref // 注意，这里的_forwarding用来保证操作的始终是堆中的拷贝a，而不是栈中的a (a-&gt;__forwarding-&gt;a) = 10; &#125;static void __Person__test_block_copy_0(struct __Person__test_block_impl_0*dst, struct __Person__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;static void __Person__test_block_dispose_0(struct __Person__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;static struct __Person__test_block_desc_0 &#123; size_t reserved; size_t Block_size; void (*copy)(struct __Person__test_block_impl_0*, struct __Person__test_block_impl_0*); void (*dispose)(struct __Person__test_block_impl_0*);&#125; __Person__test_block_desc_0_DATA = &#123; 0, sizeof(struct __Person__test_block_impl_0), __Person__test_block_copy_0, __Person__test_block_dispose_0&#125;;static void _I_Person_test(Person * self, SEL _cmd) &#123; // __block将a包装成了一个对象 __attribute__((__blocks__(byref))) __Block_byref_a_0 a = &#123;(void*)0,(__Block_byref_a_0 *)&amp;a, 0, sizeof(__Block_byref_a_0)&#125;;; (void (*)())&amp;__Person__test_block_impl_0((void *)__Person__test_block_func_0, &amp;__Person__test_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, 570425344);&#125; 可以看到，对比上面的结果，明显多了__Block_byref_a_0结构体，这个结构体中含有isa指针，所以也是一个对象，它是用来包装局部变量a的。当block被copy到堆中时，__Person__test_block_impl_0的拷贝辅助函数__Person__test_block_copy_0会将__Block_byref_a_0拷贝至堆中，所以即使局部变量所在堆被销毁，block依然能对堆中的局部变量进行操作。其中__Block_byref_a_0成员指针__forwarding用来指向它在堆中的拷贝，其依据源码如下： 1234567891011static void _Block_byref_assign_copy(void *dest, const void *arg, const int flags) &#123; struct Block_byref **destp = (struct Block_byref **)dest; struct Block_byref *src = (struct Block_byref *)arg; ... // 堆中拷贝的forwarding指向它自己 copy-&gt;forwarding = copy; // patch heap copy to point to itself (skip write-barrier) // 栈中的forwarding指向堆中的拷贝 src-&gt;forwarding = copy; // patch stack to point to heap copy ...&#125; 这样做是为了保证操作的值始终是堆中的拷贝，而不是栈中的值。（处理在局部变量所在栈还没销毁，就调用block来改变局部变量值的情况，如果没有__forwarding指针，则修改无效）至于block如何实现对局部变量的拷贝，下面会详细说明。 self隐式循环引用前： 12345678910111213@implementation Person&#123; int _a; void (^_block)();&#125;- (void)test&#123; void (^_block)() = ^&#123; _a = 10; &#125;;&#125;@end 后： 12345678910111213141516171819202122232425262728293031struct __Person__test_block_impl_0 &#123; struct __block_impl impl; struct __Person__test_block_desc_0* Desc; // 可以看到，block强引用了self Person *self; __Person__test_block_impl_0(void *fp, struct __Person__test_block_desc_0 *desc, Person *_self, int flags=0) : self(_self) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;static void __Person__test_block_func_0(struct __Person__test_block_impl_0 *__cself) &#123; Person *self = __cself-&gt;self; // bound by copy (*(int *)((char *)self + OBJC_IVAR_$_Person$_a)) = 10; &#125;static void __Person__test_block_copy_0(struct __Person__test_block_impl_0*dst, struct __Person__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;self, (void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;static void __Person__test_block_dispose_0(struct __Person__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;static struct __Person__test_block_desc_0 &#123; size_t reserved; size_t Block_size; void (*copy)(struct __Person__test_block_impl_0*, struct __Person__test_block_impl_0*); void (*dispose)(struct __Person__test_block_impl_0*);&#125; __Person__test_block_desc_0_DATA = &#123; 0, sizeof(struct __Person__test_block_impl_0), __Person__test_block_copy_0, __Person__test_block_dispose_0&#125;;static void _I_Person_test(Person * self, SEL _cmd) &#123; void (*_block)() = (void (*)())&amp;__Person__test_block_impl_0((void *)__Person__test_block_func_0, &amp;__Person__test_block_desc_0_DATA, self, 570425344);&#125; 如果在编译转换前，将_a改成self.a，能很明显地看出是产生了循环引用(self强引用block，block强引用self)。那么使用_a呢？经过编译转换后，依然可以在__Person__test_block_impl_0看见self的身影。且在函数_I_Person_test中，传入的参数也是self。通过以下语句，可以看出，不管是用什么形式访问实例变量，最终都会转换成self+变量内存偏移的形式。所以在上面例子中使用_a也会造成循环引用。 12345static void __Person__test_block_func_0(struct __Person__test_block_impl_0 *__cself) &#123; Person *self = __cself-&gt;self; // bound by copy // self＋实例变量a的偏移值 (*(int *)((char *)self + OBJC_IVAR_$_Person$_a)) = 10; &#125; 不同类型block的复制block的复制代码在_Block_copy_internal函数中。 栈block从以下代码可以看出，栈block的复制不仅仅复制了其内容，还添加了一些额外的东西 1、往flags中并入了BLOCK_NEEDS_FREE（这个标志表明block需要释放，在release以及再次拷贝时会用到） 2、如果有辅助copy函数（BLOCK_HAS_COPY_DISPOSE），那么就调用（这个辅助copy函数是用来拷贝block捕获的变量的） 1234567891011121314...struct Block_layout *result = malloc(aBlock-&gt;descriptor-&gt;size); if (!result) return (void *)0; memmove(result, aBlock, aBlock-&gt;descriptor-&gt;size); // bitcopy first // reset refcount result-&gt;flags &amp;= ~(BLOCK_REFCOUNT_MASK); // XXX not needed result-&gt;flags |= BLOCK_NEEDS_FREE | 1; result-&gt;isa = _NSConcreteMallocBlock; if (result-&gt;flags &amp; BLOCK_HAS_COPY_DISPOSE) &#123; //printf(&quot;calling block copy helper %p(%p, %p)...\n&quot;, aBlock-&gt;descriptor-&gt;copy, result, aBlock); (*aBlock-&gt;descriptor-&gt;copy)(result, aBlock); // do fixup &#125; return result;... 堆block从以下代码看出，如果block的flags中有BLOCK_NEEDS_FREE标志（block从栈中拷贝到堆时添加的标志），就执行latching_incr_int操作，其功能就是让block的引用计数加1。所以堆中block的拷贝只是单纯地改变了引用计数 1234567...if (aBlock-&gt;flags &amp; BLOCK_NEEDS_FREE) &#123; // latches on high latching_incr_int(&amp;aBlock-&gt;flags); return aBlock; &#125;... 全局block从以下代码看出，对于全局block，函数没有做任何操作，直接返回了传入的block 12345...else if (aBlock-&gt;flags &amp; BLOCK_IS_GLOBAL) &#123; return aBlock; &#125;... block辅助函数上文提及到了block辅助copy与dispose处理函数，这里分析下这两个函数的内部实现。在捕获变量为__block修饰的基本类型，或者为对象时，block才会有这两个辅助函数。block捕捉变量拷贝函数为_Block_object_assign。在调用复制block的函数_Block_copy_internal时，会根据block有无辅助函数来对捕捉变量拷贝函数_Block_object_assign进行调用。而在_Block_object_assign函数中，也会判断捕捉变量包装而成的对象(Block_byref结构体)是否有辅助函数，来进行调用。 __block修饰的基本类型的辅助函数编写以下代码： 12345678typedef void(^Block)();int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; __block int a; Block block = ^ &#123; a; &#125;;&#125; 转换成C++代码后： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950typedef void(*Block)();// __block int astruct __Block_byref_a_0 &#123; void *__isa;__Block_byref_a_0 *__forwarding; int __flags; int __size; int a;&#125;;// blockstruct __main_block_impl_0 &#123; struct __block_impl impl; struct __main_block_desc_0* Desc; __Block_byref_a_0 *a; // by ref __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags=0) : a(_a-&gt;__forwarding) &#123; impl.isa = &amp;_NSConcreteStackBlock; impl.Flags = flags; impl.FuncPtr = fp; Desc = desc; &#125;&#125;;// block函数体static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123; __Block_byref_a_0 *a = __cself-&gt;a; // bound by ref (a-&gt;__forwarding-&gt;a); &#125;// 辅助copy函数static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;// 辅助dispose函数static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;static struct __main_block_desc_0 &#123; size_t reserved; size_t Block_size; void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*); void (*dispose)(struct __main_block_impl_0*);&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;int main(int argc, const char * argv[]) &#123; /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; // 这里创建了，并将a的flags设置为0 __attribute__((__blocks__(byref))) __Block_byref_a_0 a = &#123;(void*)0,(__Block_byref_a_0 *)&amp;a, 0, sizeof(__Block_byref_a_0)&#125;;; Block block = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, 570425344); &#125; return 0;&#125; 从上面代码中，被__block修饰的a变量变为了__Block_byref_a_0类型，根据这个格式，从源码中查看得到相似的定义： 123456789101112131415161718192021222324252627282930313233struct Block_byref &#123; void *isa; struct Block_byref *forwarding; int flags; /* refcount; */ int size; void (*byref_keep)(struct Block_byref *dst, struct Block_byref *src); void (*byref_destroy)(struct Block_byref *); /* long shared[0]; */&#125;;// 做下对比struct __Block_byref_a_0 &#123; void *__isa;__Block_byref_a_0 *__forwarding; int __flags; int __size; int a;&#125;;// flags/_flags类型enum &#123; /* See function implementation for a more complete description of these fields and combinations */ // 是一个对象 BLOCK_FIELD_IS_OBJECT = 3, /* id, NSObject, __attribute__((NSObject)), block, ... */ // 是一个block BLOCK_FIELD_IS_BLOCK = 7, /* a block variable */ // 被__block修饰的变量 BLOCK_FIELD_IS_BYREF = 8, /* the on stack structure holding the __block variable */ // 被__weak修饰的变量，只能被辅助copy函数使用 BLOCK_FIELD_IS_WEAK = 16, /* declared __weak, only used in byref copy helpers */ // block辅助函数调用（告诉内部实现不要进行retain或者copy） BLOCK_BYREF_CALLER = 128 /* called from __block (byref) copy/dispose support routines. */ &#125;; 可以看出，__block将原来的基本类型包装成了对象。因为以上两个结构体的前4个成员的类型都是一样的，内存空间排列一致，所以可以进行以下操作： 123456789101112131415161718192021222324252627282930313233343536// 转换成C++代码static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;// _Block_object_assign源码void _Block_object_assign(void *destAddr, const void *object, const int flags) &#123;... else if ((flags &amp; BLOCK_FIELD_IS_BYREF) == BLOCK_FIELD_IS_BYREF) &#123; // copying a __block reference from the stack Block to the heap // flags will indicate if it holds a __weak reference and needs a special isa _Block_byref_assign_copy(destAddr, object, flags); &#125;...&#125;// _Block_byref_assign_copy源码static void _Block_byref_assign_copy(void *dest, const void *arg, const int flags) &#123; // 这里因为前面4个成员的内存分布一样，所以直接转换后，使用Block_byref的成员变量名，能访问到__Block_byref_a_0的前面4个成员 struct Block_byref **destp = (struct Block_byref **)dest; struct Block_byref *src = (struct Block_byref *)arg;... else if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_REFCOUNT_MASK) == 0) &#123; // 从main函数对__Block_byref_a_0的初始化，可以看到初始化时将flags赋值为0 // 这里表示第一次拷贝，会进行复制操作，并修改原来flags的值 // static int _Byref_flag_initial_value = BLOCK_NEEDS_FREE | 2; // 可以看出，复制后，会并入BLOCK_NEEDS_FREE，后面的2是block的初始引用计数 ... copy-&gt;flags = src-&gt;flags | _Byref_flag_initial_value; ... &#125; // 已经拷贝到堆了，只增加引用计数 else if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_NEEDS_FREE) == BLOCK_NEEDS_FREE) &#123; latching_incr_int(&amp;src-&gt;forwarding-&gt;flags); &#125; // 普通的赋值，里面最底层就*destptr = value;这句表达式 _Block_assign(src-&gt;forwarding, (void **)destp);&#125; 主要操作都在代码注释中了，总体来说，__block修饰的基本类型会被包装为对象，并且只在最初block拷贝时复制一次，后面的拷贝只会增加这个捕获变量的引用计数。 对象的辅助函数 没有__block修饰 12345678910typedef void(^Block)();int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; NSObject *a = [[NSObject alloc] init]; Block block = ^ &#123; a; &#125;; &#125; return 0;&#125; 首先，在没有__block修饰时，对象编译转换的结果如下，删除了一些变化不大的代码： 1234567891011121314static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123; NSObject *a = __cself-&gt;a; // bound by copy a; &#125;static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;a, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;static struct __main_block_desc_0 &#123; size_t reserved; size_t Block_size; void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*); void (*dispose)(struct __main_block_impl_0*);&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), 对象在没有__block修饰时，并没有产生__Block_byref_a_0结构体，只是将标志位修改为BLOCK_FIELD_IS_OBJECT。而在_Block_object_assign中对应的判断分支代码如下： 123456...else if ((flags &amp; BLOCK_FIELD_IS_OBJECT) == BLOCK_FIELD_IS_OBJECT) &#123; _Block_retain_object(object); _Block_assign((void *)object, destAddr);&#125;... 可以看到，block复制时，会retain捕捉对象，以增加其引用计数。 有__block修饰 12345678910typedef void(^Block)();int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; __block NSObject *a = [[NSObject alloc] init]; Block block = ^ &#123; a; &#125;; &#125; return 0;&#125; 在这种情况下，编译转换的部分结果如下： 12345678910111213141516171819202122struct __Block_byref_a_0 &#123; void *__isa;__Block_byref_a_0 *__forwarding; int __flags; int __size; void (*__Block_byref_id_object_copy)(void*, void*); void (*__Block_byref_id_object_dispose)(void*); NSObject *a;&#125;;int main(int argc, const char * argv[]) &#123; /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool;attribute__((__blocks__(byref))) __Block_byref_a_0 a = &#123;(void*)0,(__Block_byref_a_0 *)&amp;a, 33554432, sizeof(__Block_byref_a_0), __Block_byref_id_object_copy_131, __Block_byref_id_object_dispose_131,....&#125;;Block block = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, 570425344);&#125;// 以下的40表示__Block_byref_a_0对象a的位移（4个指针(32字节)＋2个int变量(8字节)＝40字节）static void __Block_byref_id_object_copy_131(void *dst, void *src) &#123; _Block_object_assign((char*)dst + 40, *(void * *) ((char*)src + 40), 131);&#125;static void __Block_byref_id_object_dispose_131(void *src) &#123; _Block_object_dispose(*(void * *) ((char*)src + 40), 131);&#125; 可以看到，对于对象，__Block_byref_a_0另外增加了两个辅助函数__Block_byref_id_object_copy、__Block_byref_id_object_dispose,以实现对对象内存的管理。其中两者的最后一个参数131表示BLOCK_BYREF_CALLER|BLOCK_FIELD_IS_OBJECT，BLOCK_BYREF_CALLER表示在内部实现中不对a对象进行retain或copy；以下为相关源码： 1234567if ((flags &amp; BLOCK_BYREF_CALLER) == BLOCK_BYREF_CALLER) &#123; ... else &#123; // do *not* retain or *copy* __block variables whatever they are _Block_assign((void *)object, destAddr); &#125;&#125; _Block_byref_assign_copy函数的以下代码会对上面的辅助函数（__Block_byref_id_object_copy_131）进行调用；570425344表示BLOCK_HAS_COPY_DISPOSE|BLOCK_HAS_DESCRIPTOR，所以会执行以下相关源码： 1234567if (src-&gt;flags &amp; BLOCK_HAS_COPY_DISPOSE) &#123; // Trust copy helper to copy everything of interest // If more than one field shows up in a byref block this is wrong XXX copy-&gt;byref_keep = src-&gt;byref_keep; copy-&gt;byref_destroy = src-&gt;byref_destroy; (*src-&gt;byref_keep)(copy, src);&#125; ARC中block的工作 苹果说明 1_NSConcreteStackBlock 1_NSConcreteMallocBlock block试验下面对block做点实验： 1234567891011121314151617181920212223242526272829303132333435int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; int i = 10; void (^block)() = ^&#123;i;&#125;; __weak void (^weakBlock)() = ^&#123;i;&#125;; void (^stackBlock)() = ^&#123;&#125;; // ARC情况下 // 创建时，都会在栈中 // &lt;__NSStackBlock__: 0x7fff5fbff730&gt; NSLog(@&quot;%@&quot;, ^&#123;i;&#125;); // 因为block为strong类型，且捕获了外部变量，所以赋值时，自动进行了copy // &lt;__NSMallocBlock__: 0x100206920&gt; NSLog(@&quot;%@&quot;, block); // 如果是weak类型的block，依然不会自动进行copy // &lt;__NSStackBlock__: 0x7fff5fbff728&gt; NSLog(@&quot;%@&quot;, weakBlock); // 如果block是strong类型，并且没有捕获外部变量，那么就会转换成__NSGlobalBlock__ // &lt;__NSGlobalBlock__: 0x100001110&gt; NSLog(@&quot;%@&quot;, stackBlock); // 在非ARC情况下，产生以下输出 // &lt;__NSStackBlock__: 0x7fff5fbff6d0&gt; // &lt;__NSStackBlock__: 0x7fff5fbff730&gt; // &lt;__NSStackBlock__: 0x7fff5fbff700&gt; // &lt;__NSGlobalBlock__: 0x1000010d0&gt; &#125; return 0;&#125; 可以看出，ARC对类型为strong且捕获了外部变量的block进行了copy。并且当block类型为strong，但是创建时没有捕获外部变量，block最终会变成__NSGlobalBlock__类型（这里可能因为block中的代码没有捕获外部变量，所以不需要在栈中开辟变量，也就是说，在编译时，这个block的所有内容已经在代码段中生成了，所以就把block的类型转换为全局类型） block作为参数传递再来看下使用在栈中的block需要注意的情况： 1234567891011121314151617181920212223242526272829NSMutableArray *arrayM;void myBlock()&#123; int a = 5; Block block = ^ &#123; NSLog(@&quot;%d&quot;, a); &#125;; [arrayM addObject:block]; NSLog(@&quot;%@&quot;, block);&#125;int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; arrayM = @[].mutableCopy; myBlock(); Block block = [arrayM firstObject]; // 非ARC这里崩溃 block(); &#125;// ARC情况下输出// &lt;__NSMallocBlock__: 0x100214480&gt;// 非ARC情况下输出// &lt;__NSStackBlock__: 0x7fff5fbff738&gt;// 崩溃，野指针错误 可以看到，ARC情况下因为自动执行了copy，所以返回类型为__NSMallocBlock__，在函数结束后依然可以访问；而非ARC情况下，需要我们手动调用[block copy]来将block拷贝到堆中，否则因为栈中的block生命周期和函数中的栈生命周期关联，当函数退出后，相应的堆被销毁，block也就不存在了。如果把block的以下代码删除： 1NSLog(@&quot;%d&quot;, a); 那么block就会变成全局类型，在main中访问也不会出崩溃。 block作为返回值在非ARC情况下，如果返回值是block，则一般这样操作： 1return [[block copy] autorelease]; 对于外部要使用的block，更趋向于把它拷贝到堆中，使其脱离栈生命周期的约束。 block属性这里还有一点关于block类型的ARC属性。上文也说明了，ARC会自动帮strong类型且捕获外部变量的block进行copy，所以在定义block类型的属性时也可以使用strong，不一定使用copy。也就是以下代码： 12345678910/** 假如有栈block赋给以下两个属性 **/// 这里因为ARC，当栈block中会捕获外部变量时，这个block会被copy进堆中// 如果没有捕获外部变量，这个block会变为全局类型// 不管怎么样，它都脱离了栈生命周期的约束@property (strong, nonatomic) Block *strongBlock;// 这里都会被copy进堆中@property (copy, nonatomic) Block *copyBlock; 参考博文谈Objective-C Block的实现iOS中block实现的探究A look inside blocks: Episode 3runtime.cBlock_private.h 新增llvm对于Block的编译规则ESBlockRuntime 转自 [tripleCC]]]></content>
      <categories>
        <category>Block</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[NSString的内存问题]]></title>
    <url>%2F2018%2F09%2F14%2FNSString%E7%9A%84%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[NSString 在 OC 的内存管理策略中是一个特殊的存在，因为其在编译和运行中做了一些优化处理，不同于普通对象的存在，看看下面代码打印情况（此代码测试环境为MRC，可以在ARC工程下，设置当前测试代码文件为手动内存管理，找到路径Build Phases—-&gt;Compile Sources—-&gt;XXX.m，将XXX.m的Compiler Flags设置为”-fno-objc-arc”.）： //宏定义 #define XWLog(_var) ({ NSString *name = @#_var; NSLog(@”变量名=%@，类型=%@， 地址=%p，值=%@，引用计数=%d”, name, [_var class], _var, _var, (int)[_var retainCount]); })//测试代码 123456789101112131415NSString *a = @&quot;string&quot;;NSString *b = [[NSString alloc]init];NSString *c = [[NSString alloc]initWithString:@&quot;string&quot;];NSString *d = [[NSString alloc]initWithFormat:@&quot;string&quot;];NSString *e = [NSString stringWithFormat:@&quot;string&quot;];NSString *f = [NSString stringWithFormat:@&quot;123456789&quot;];NSString *g = [NSString stringWithFormat:@&quot;1234567890&quot;];XWLog(a); XWLog(b); XWLog(c); XWLog(d); XWLog(e); XWLog(f); XWLog(g); //打印结果 12345678910111213变量名=a，类型=__NSCFConstantString， 地址=0x1015f3120，值=string，引用计数=-1变量名=b，类型=__NSCFConstantString， 地址=0x1019808d0，值=，引用计数=-1变量名=c，类型=__NSCFConstantString， 地址=0x1015f3120，值=string，引用计数=-1变量名=d，类型=NSTaggedPointerString， 地址=0xa00676e697274736，值=string，引用计数=-1变量名=e，类型=NSTaggedPointerString， 地址=0xa00676e697274736，值=string，引用计数=-1变量名=f，类型=NSTaggedPointerString， 地址=0xa1ea1f72bb30ab19，值=123456789，引用计数=-1变量名=g，类型=__NSCFString， 地址=0x60800002b580，值=1234567890，引用计数=1 从打印结果看出，变量 b 到 f 的引用计数为-1，若是无符号格式输出，应该是一个很大的数字，与我们理解的对象初始化后引用计数为 1 所不同，不同的创建方式，字符串的类型不同，引用计数也有区别，创建的字符串有三种类型： NSCFConstantString NSCFStringNSTaggedPointerString造成这种情况是由于 OC 对 NSString 的内存优化产生的。 NSCFConstantString从字面就可以看出，这是一个常量字符串，该类型的字符串是以字面量创建的，是在编译期创建的，保存在常量区。通过 a 与 c 的打印结果看出，当创建的字符串变量值在常量区存在时，变量会指向那个字符串，这是编译期做的优化，c 指向同一字符串 @”string”，地址与a相同。文字常量区存放常量字符串，程序结束后由系统释放，也就是说指向常量表的指针不受引用计数管理。所以对于NSCFConstantString类型的变量，OC 的内存管理策略对其无效。 NSCFString表示这是一个对象类型的字符串，在运行时创建，存储在堆区，服从OC 的对象内存管理策略。该类型的字符串由 Format 创建，无论是实例方法还是类方法且其长度不能太小（内容若包含中文字符，不论长度大小，都是NSCFString），否则创建的是NSTaggedPointerString类型，例如上例的变量 f 与 g。 NSTaggedPointerString对于64位程序，为了节省内存和提高运行速度，苹果引入了 Tagged Point 技术。NSTaggedPointerString是对NSCFString优化后的存在，在运行时创建时对字符串的内容和长度做出判断，若字符串内容是由ASCII字符构成且长度较小（大概十个字符以内），这时候创建的字符串就是NSTaggedPointerString类型，字符串直接存储在指针里，引用计数同样为-1，不适用对象的内存管理策略。 Tagged Pointer指针的值不再是地址了，而是真正的值。所以，实际上它不再是一个对象了，它只是一个披着对象皮的普通变量而已。所以，它的内存并不存储在堆中，OC 对象的内存管理方式对其无效。现在，我们在看看这道题： 在MRC下，会不会造成内存泄漏？会不会奔溃？ 1234567NSString *str = [[NSString alloc] initWithString:@&quot;ABC&quot;];str = @&quot;123&quot;;[str release];NSLog(@&quot;%@&quot;.str); 一目了然，str指向字符串常量，对象的内存管理方式对其无效，程序结束时，系统才会销毁常量区的值。所以不会造成内存泄漏更不会奔溃。 接下来我们再看看NSArray的平时注意不到的问题： 123456789101112131415NSArray *a1 = @[@&quot;1&quot;,@&quot;2&quot;];NSArray *a2 = [[NSArray alloc]init];NSArray *a3 = [[NSArray alloc]initWithObjects:@&quot;1&quot;, nil];NSArray *a4 = [[NSArray alloc]initWithArray:@[@&quot;a&quot;,@&quot;b&quot;]];NSArray *a5 = [NSArray arrayWithObjects:@&quot;m&quot;,@&quot;n&quot;, nil];NSArray *a6 = [[NSArray alloc]init];NSArray *a7 = @[];XWLog(a1); XWLog(a2); XWLog(a3); XWLog(a4); XWLog(a5); XWLog(a6);XWLog(a7); 打印结果： 12345678910111213变量名=a1，类型=__NSArrayI， 地址=0x608000029400，值=(1,2)，引用计数=1变量名=a2，类型=__NSArray0， 地址=0x618000012490，值=()，引用计数=-1变量名=a3，类型=__NSSingleObjectArrayI， 地址=0x608000012890，值=(1)，引用计数=1变量名=a4，类型=__NSArrayI， 地址=0x608000029440，值=(a,b)，引用计数=1变量名=a5，类型=__NSArrayI， 地址=0x608000029460，值=(m,n)，引用计数=1变量名=a6，类型=__NSArray0， 地址=0x618000012490，值=()，引用计数=-1变量名=a7，类型=__NSArray0， 地址=0x618000012490，值=()，引用计数=-1 从结果看出，只有a2 a6 a7这三个的引用计数为-1，其他变量的引用计数为1，显示正常。我们仔细发现，这三个的地址相同，这就是说三个变量指向了同一块内存，说明a2 a6 a7三个创建方式创建的空实例是一个特殊值的存在，其应该存储在常量静态区。我们可以猜测，OC为了优化内存，在常量静态区创建一个空值的特殊存在，应该是静态常量对象，无论什么方式创建的空实例，其都指向静态区这个空值的。 不仅是NSArray，Foundation中如NSString, NSDictionary, NSSet等区分可变和不可变版本的类，空实例都是静态对象（NSString的空实例对象是常量区的@””）,对象的内存管理策略对其无效。参考 深入理解Tagged PointerNSString内存管理从NSArray看类簇 转自 简书懒癌重症者]]></content>
      <categories>
        <category>内存管理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[自动释放池]]></title>
    <url>%2F2018%2F09%2F14%2F%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[我是前言Autorelease机制是iOS开发者管理对象内存的好伙伴，MRC中，调用[obj autorelease]来延迟内存的释放是一件简单自然的事，ARC下，我们甚至可以完全不知道Autorelease就能管理好内存。而在这背后，objc和编译器都帮我们做了哪些事呢，它们是如何协作来正确管理内存的呢？刨根问底，一起来探究下黑幕背后的Autorelease机制。 Autorelease对象什么时候释放？这个问题拿来做面试题，问过很多人，没有几个能答对的。很多答案都是“当前作用域大括号结束时释放”，显然木有正确理解Autorelease机制。在没有手加Autorelease Pool的情况下，Autorelease对象是在当前的runloop迭代结束时释放的，而它能够释放的原因是系统在每个runloop迭代中都加入了自动释放池Push和Pop 小实验123456789101112131415__weak id reference = nil;- (void)viewDidLoad &#123; [super viewDidLoad]; NSString *str = [NSString stringWithFormat:@&quot;sunnyxx&quot;]; // str是一个autorelease对象，设置一个weak的引用来观察它 reference = str;&#125;- (void)viewWillAppear:(BOOL)animated &#123; [super viewWillAppear:animated]; NSLog(@&quot;%@&quot;, reference); // Console: sunnyxx&#125;- (void)viewDidAppear:(BOOL)animated &#123; [super viewDidAppear:animated]; NSLog(@&quot;%@&quot;, reference); // Console: (null)&#125; 这个实验同时也证明了viewDidLoad和viewWillAppear是在同一个runloop调用的，而viewDidAppear是在之后的某个runloop调用的。由于这个vc在loadView之后便add到了window层级上，所以viewDidLoad和viewWillAppear是在同一个runloop调用的，因此在viewWillAppear中，这个autorelease的变量依然有值。 当然，我们也可以手动干预Autorelease对象的释放时机： 1234567- (void)viewDidLoad &#123; [super viewDidLoad]; @autoreleasepool &#123; NSString *str = [NSString stringWithFormat:@&quot;sunnyxx&quot;]; &#125; NSLog(@&quot;%@&quot;, str); // Console: (null)&#125; Autorelease原理AutoreleasePoolPageARC下，我们使用@autoreleasepool{}来使用一个AutoreleasePool，随后编译器将其改写成下面的样子： 123void *context = objc_autoreleasePoolPush();// &#123;&#125;中的代码objc_autoreleasePoolPop(context); 而这两个函数都是对AutoreleasePoolPage的简单封装，所以自动释放机制的核心就在于这个类。 AutoreleasePoolPage是一个C++实现的类 AutoreleasePool并没有单独的结构，而是由若干个AutoreleasePoolPage以双向链表的形式组合而成（分别对应结构中的parent指针和child指针） AutoreleasePool是按线程一一对应的（结构中的thread指针指向当前线程） AutoreleasePoolPage每个对象会开辟4096字节内存（也就是虚拟内存一页的大小），除了上面的实例变量所占空间，剩下的空间全部用来储存autorelease对象的地址 上面的id *next指针作为游标指向栈顶最新add进来的autorelease对象的下一个位置 一个AutoreleasePoolPage的空间被占满时，会新建一个AutoreleasePoolPage对象，连接链表，后来的autorelease对象在新的page加入 所以，若当前线程中只有一个AutoreleasePoolPage对象，并记录了很多autorelease对象地址时内存如下图： 图中的情况，这一页再加入一个autorelease对象就要满了（也就是next指针马上指向栈顶），这时就要执行上面说的操作，建立下一页page对象，与这一页链表连接完成后，新page的next指针被初始化在栈底（begin的位置），然后继续向栈顶添加新对象。 所以，向一个对象发送- autorelease消息，就是将这个对象加入到当前AutoreleasePoolPage的栈顶next指针指向的位置 释放时刻每当进行一次objc_autoreleasePoolPush调用时，runtime向当前的AutoreleasePoolPage中add进一个哨兵对象，值为0（也就是个nil），那么这一个page就变成了下面的样子： objc_autoreleasePoolPush的返回值正是这个哨兵对象的地址，被objc_autoreleasePoolPop(哨兵对象)作为入参，于是： 根据传入的哨兵对象地址找到哨兵对象所处的page 在当前page中，将晚于哨兵对象插入的所有autorelease对象都发送一次- release消息，并向回移动next指针到正确位置 补充2：从最新加入的对象一直向前清理，可以向前跨越若干个page，直到哨兵所在的page 刚才的objc_autoreleasePoolPop执行后，最终变成了下面的样子： 嵌套的AutoreleasePool知道了上面的原理，嵌套的AutoreleasePool就非常简单了，pop的时候总会释放到上次push的位置为止，多层的pool就是多个哨兵对象而已，就像剥洋葱一样，每次一层，互不影响。 【附加内容】 Autorelease返回值的快速释放机制值得一提的是，ARC下，runtime有一套对autorelease返回值的优化策略。比如一个工厂方法： 12345+ (instancetype)createSark &#123; return [self new];&#125;// callerSark *sark = [Sark createSark]; 秉着谁创建谁释放的原则，返回值需要是一个autorelease对象才能配合调用方正确管理内存，于是乎编译器改写成了形如下面的代码： 12345678+ (instancetype)createSark &#123; id tmp = [self new]; return objc_autoreleaseReturnValue(tmp); // 代替我们调用autorelease&#125;// callerid tmp = objc_retainAutoreleasedReturnValue([Sark createSark]) // 代替我们调用retainSark *sark = tmp;objc_storeStrong(&amp;sark, nil); // 相当于代替我们调用了release 一切看上去都很好，不过既然编译器知道了这么多信息，干嘛还要劳烦autorelease这个开销不小的机制呢？于是乎，runtime使用了一些黑魔法将这个问题解决了。 黑魔法之Thread Local StorageThread Local Storage（TLS）线程局部存储，目的很简单，将一块内存作为某个线程专有的存储，以key-value的形式进行读写，比如在非arm架构下，使用pthread提供的方法实现： 12void* pthread_getspecific(pthread_key_t);int pthread_setspecific(pthread_key_t , const void *); 说它是黑魔法可能被懂pthread的笑话- - 在返回值身上调用objc_autoreleaseReturnValue方法时，runtime将这个返回值object储存在TLS中，然后直接返回这个object（不调用autorelease）；同时，在外部接收这个返回值的objc_retainAutoreleasedReturnValue里，发现TLS中正好存了这个对象，那么直接返回这个object（不调用retain）。于是乎，调用方和被调方利用TLS做中转，很有默契的免去了对返回值的内存管理。 于是问题又来了，假如被调方和主调方只有一边是ARC环境编译的该咋办？（比如我们在ARC环境下用了非ARC编译的第三方库，或者反之）只能动用更高级的黑魔法。 黑魔法之__builtin_return_address这个内建函数原型是char *__builtin_return_address(int level)，作用是得到函数的返回地址，参数表示层数，如__builtin_return_address(0)表示当前函数体返回地址，传1是调用这个函数的外层函数的返回值地址，以此类推。 123456- (int)foo &#123; NSLog(@&quot;%p&quot;, __builtin_return_address(0)); // 根据这个地址能找到下面ret的地址 return 1;&#125;// callerint ret = [sark foo]; 看上去也没啥厉害的，不过要知道，函数的返回值地址，也就对应着调用者结束这次调用的地址（或者相差某个固定的偏移量，根据编译器决定）也就是说，被调用的函数也有翻身做地主的机会了，可以反过来对主调方干点坏事。回到上面的问题，如果一个函数返回前知道调用方是ARC还是非ARC，就有机会对于不同情况做不同的处理 黑魔法之反查汇编指令通过上面的__builtin_return_address加某些偏移量，被调方可以定位到主调方在返回值后面的汇编指令： 12345// callerint ret = [sark foo];// 内存中接下来的汇编指令（x86，我不懂汇编，瞎写的）movq ??? ???callq ??? 而这些汇编指令在内存中的值是固定的，比如movq对应着0x48。于是乎，就有了下面的这个函数，入参是调用方__builtin_return_address传入值 123456789101112131415161718192021222324static bool callerAcceptsFastAutorelease(const void * const ra0) &#123; const uint8_t *ra1 = (const uint8_t *)ra0; const uint16_t *ra2; const uint32_t *ra4 = (const uint32_t *)ra1; const void **sym; // 48 89 c7 movq %rax,%rdi // e8 callq symbol if (*ra4 != 0xe8c78948) &#123; return false; &#125; ra1 += (long)*(const int32_t *)(ra1 + 4) + 8l; ra2 = (const uint16_t *)ra1; // ff 25 jmpq *symbol@DYLDMAGIC(%rip) if (*ra2 != 0x25ff) &#123; return false; &#125; ra1 += 6l + (long)*(const int32_t *)(ra1 + 2); sym = (const void **)ra1; if (*sym != objc_retainAutoreleasedReturnValue) &#123; return false; &#125; return true;&#125; 它检验了主调方在返回值之后是否紧接着调用了objc_retainAutoreleasedReturnValue，如果是，就知道了外部是ARC环境，反之就走没被优化的老逻辑。 其他Autorelease相关知识点使用容器的block版本的枚举器时，内部会自动添加一个AutoreleasePool： 123[array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) &#123; // 这里被一个局部@autoreleasepool包围着&#125;]; 当然，在普通for循环和for in循环中没有，所以，还是新版的block版本枚举器更加方便。for循环中遍历产生大量autorelease变量时，就需要手加局部AutoreleasePool咯。 转自]]></content>
      <categories>
        <category>内存管理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS底层解析weak的实现原理]]></title>
    <url>%2F2018%2F09%2F14%2FiOS%E5%BA%95%E5%B1%82%E8%A7%A3%E6%9E%90weak%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[很少有人知道weak表其实是一个hash（哈希）表，Key是所指对象的地址，Value是weak指针的地址数组。更多人的人只是知道weak是弱引用，所引用对象的计数器不会加一，并在引用对象被释放的时候自动被设置为nil。通常用于解决循环引用问题。但现在单知道这些已经不足以应对面试了，好多公司会问weak的原理。weak的原理是什么呢？下面就分析一下weak的工作原理（只是自己对这个问题好奇，学习过程中的笔记，希望对读者也有所帮助）。 weak 实现原理的概括Runtime维护了一个weak表，用于存储指向某个对象的所有weak指针。weak表其实是一个hash（哈希）表，Key是所指对象的地址，Value是weak指针的地址（这个地址的值是所指对象指针的地址）数组。 weak 的实现原理可以概括一下三步：1、初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址。2、添加引用时：objc_initWeak函数会调用 objc_storeWeak() 函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。3、释放时，调用clearDeallocating函数。clearDeallocating函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录。 下面将开始详细介绍每一步：初始化时：runtime会调用objc_initWeak函数，objc_initWeak函数会初始化一个新的weak指针指向对象的地址。示例代码： 1234&#123; NSObject *obj = [[NSObject alloc] init]; id __weak obj1 = obj;&#125; 当我们初始化一个weak变量时，runtime会调用 NSObject.mm 中的objc_initWeak函数。这个函数在Clang中的声明如下： 1id objc_initWeak(id *object, id value); 而对于 objc_initWeak() 方法的实现 123456789101112id objc_initWeak(id *location, id newObj) &#123;// 查看对象实例是否有效// 无效对象直接导致指针释放 if (!newObj) &#123; *location = nil; return nil; &#125; // 这里传递了三个 bool 数值 // 使用 template 进行常量参数传递是为了优化性能 return storeWeakfalse/*old*/, true/*new*/, true/*crash*/&gt; (location, (objc_object*)newObj);&#125; 可以看出，这个函数仅仅是一个深层函数的调用入口，而一般的入口函数中，都会做一些简单的判断（例如 objc_msgSend 中的缓存判断），这里判断了其指针指向的类对象是否有效，无效直接释放，不再往深层调用函数。否则，object将被注册为一个指向value的__weak对象。而这事应该是objc_storeWeak函数干的。 注意：objc_initWeak函数有一个前提条件：就是object必须是一个没有被注册为__weak对象的有效指针。而value则可以是null，或者指向一个有效的对象。 添加引用时：objc_initWeak函数会调用 objc_storeWeak() 函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。objc_storeWeak的函数声明如下： 1id objc_storeWeak(id *location, id value); objc_storeWeak() 的具体实现如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// HaveOld: true - 变量有值// false - 需要被及时清理，当前值可能为 nil// HaveNew: true - 需要被分配的新值，当前值可能为 nil// false - 不需要分配新值// CrashIfDeallocating: true - 说明 newObj 已经释放或者 newObj 不支持弱引用，该过程需要暂停// false - 用 nil 替代存储template bool HaveOld, bool HaveNew, bool CrashIfDeallocating&gt;static id storeWeak(id *location, objc_object *newObj) &#123; // 该过程用来更新弱引用指针的指向 // 初始化 previouslyInitializedClass 指针 Class previouslyInitializedClass = nil; id oldObj; // 声明两个 SideTable // ① 新旧散列创建 SideTable *oldTable; SideTable *newTable; // 获得新值和旧值的锁存位置（用地址作为唯一标示） // 通过地址来建立索引标志，防止桶重复 // 下面指向的操作会改变旧值retry: if (HaveOld) &#123; // 更改指针，获得以 oldObj 为索引所存储的值地址 oldObj = *location; oldTable = &amp;SideTables()[oldObj]; &#125; else &#123; oldTable = nil; &#125; if (HaveNew) &#123; // 更改新值指针，获得以 newObj 为索引所存储的值地址 newTable = &amp;SideTables()[newObj]; &#125; else &#123; newTable = nil; &#125; // 加锁操作，防止多线程中竞争冲突 SideTable::lockTwoHaveOld, HaveNew&gt;(oldTable, newTable); // 避免线程冲突重处理 // location 应该与 oldObj 保持一致，如果不同，说明当前的 location 已经处理过 oldObj 可是又被其他线程所修改 if (HaveOld &amp;&amp; *location != oldObj) &#123; SideTable::unlockTwoHaveOld, HaveNew&gt;(oldTable, newTable); goto retry; &#125; // 防止弱引用间死锁 // 并且通过 +initialize 初始化构造器保证所有弱引用的 isa 非空指向 if (HaveNew &amp;&amp; newObj) &#123; // 获得新对象的 isa 指针 Class cls = newObj-&gt;getIsa(); // 判断 isa 非空且已经初始化 if (cls != previouslyInitializedClass &amp;&amp; !((objc_class *)cls)-&gt;isInitialized()) &#123; // 解锁 SideTable::unlockTwoHaveOld, HaveNew&gt;(oldTable, newTable); // 对其 isa 指针进行初始化 _class_initialize(_class_getNonMetaClass(cls, (id)newObj)); // 如果该类已经完成执行 +initialize 方法是最理想情况 // 如果该类 +initialize 在线程中 // 例如 +initialize 正在调用 storeWeak 方法 // 需要手动对其增加保护策略，并设置 previouslyInitializedClass 指针进行标记 previouslyInitializedClass = cls; // 重新尝试 goto retry; &#125; &#125; // ② 清除旧值 if (HaveOld) &#123; weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location); &#125; // ③ 分配新值 if (HaveNew) &#123; newObj = (objc_object *)weak_register_no_lock(&amp;newTable-&gt;weak_table, (id)newObj, location, CrashIfDeallocating); // 如果弱引用被释放 weak_register_no_lock 方法返回 nil // 在引用计数表中设置若引用标记位 if (newObj &amp;&amp; !newObj-&gt;isTaggedPointer()) &#123; // 弱引用位初始化操作 // 引用计数那张散列表的weak引用对象的引用计数中标识为weak引用 newObj-&gt;setWeaklyReferenced_nolock(); &#125; // 之前不要设置 location 对象，这里需要更改指针指向 *location = (id)newObj; &#125; else &#123; // 没有新值，则无需更改 &#125; SideTable::unlockTwoHaveOld, HaveNew&gt;(oldTable, newTable); return (id)newObj;&#125; 撇开源码中各种锁操作，来看看这段代码都做了些什么。 SideTableSideTable 这个结构体，我给他起名引用计数和弱引用依赖表，因为它主要用于管理对象的引用计数和 weak 表。在 NSObject.mm 中声明其数据结构： 1234567struct SideTable &#123;// 保证原子操作的自旋锁 spinlock_t slock; // 引用计数的 hash 表 RefcountMap refcnts; // weak 引用全局 hash 表 weak_table_t weak_table; }对于 slock 和 refcnts 两个成员不用多说，第一个是为了防止竞争选择的自旋锁，第二个是协助对象的 isa 指针的 extra_rc 共同引用计数的变量（对于对象结果，在今后的文中提到）。这里主要看 weak 全局 hash 表的结构与作用。 weak表weak表是一个弱引用表，实现为一个weak_table_t结构体，存储了某个对象相关的的所有的弱引用信息。其定义如下(具体定义在objc-weak.h中)： 12345678910 struct weak_table_t &#123; // 保存了所有指向指定对象的 weak 指针 weak_entry_t *weak_entries; // 存储空间 size_t num_entries; // 参与判断引用计数辅助量 uintptr_t mask; // hash key 最大偏移值 uintptr_t max_hash_displacement;&#125;; 这是一个全局弱引用hash表。使用不定类型对象的地址作为 key ，用 weak_entry_t 类型结构体对象作为 value 。其中的 weak_entries 成员，从字面意思上看，即为弱引用表入口。其实现也是这样的。 其中weak_entry_t是存储在弱引用表中的一个内部结构体，它负责维护和存储指向一个对象的所有弱引用hash表。其定义如下： 1234567891011121314151617typedef objc_object ** weak_referrer_t;struct weak_entry_t &#123; DisguisedPtrobjc_object&gt; referent; union &#123; struct &#123; weak_referrer_t *referrers; uintptr_t out_of_line : 1; uintptr_t num_refs : PTR_MINUS_1; uintptr_t mask; uintptr_t max_hash_displacement; &#125;; struct &#123; // out_of_line=0 is LSB of one of these (don&apos;t care which) weak_referrer_t inline_referrers[WEAK_INLINE_COUNT]; &#125;; &#125;&#125; 在 weak_entry_t 的结构中，DisguisedPtr referent 是对泛型对象的指针做了一个封装，通过这个泛型类来解决内存泄漏的问题。从注释中写 out_of_line 成员为最低有效位，当其为0的时候， weak_referrer_t 成员将扩展为多行静态 hash table。其实其中的 weak_referrer_t 是二维 objc_object 的别名，通过一个二维指针地址偏移，用下标作为 hash 的 key，做成了一个弱引用散列。那么在有效位未生效的时候，out_of_line 、 num_refs、 mask 、 max_hash_displacement 有什么作用？以下是笔者自身的猜测： out_of_line：最低有效位，也是标志位。当标志位 0 时，增加引用表指针纬度。num_refs：引用数值。这里记录弱引用表中引用有效数字，因为弱引用表使用的是静态 hash 结构，所以需要使用变量来记录数目。mask：计数辅助量。max_hash_displacement：hash 元素上限阀值。其实 out_of_line 的值通常情况下是等于零的，所以弱引用表总是一个 objc_objective 指针二维数组。一维 objc_objective 指针可构成一张弱引用散列表，通过第三纬度实现了多张散列表，并且表数量为 WEAK_INLINE_COUNT 。 总结一下 StripedMap[] ： StripedMap 是一个模板类，在这个类中有一个 array 成员，用来存储 PaddedT 对象，并且其中对于 [] 符的重载定义中，会返回这个 PaddedT 的 value 成员，这个 value 就是我们传入的 T 泛型成员，也就是 SideTable 对象。在 array 的下标中，这里使用了 indexForPointer 方法通过位运算计算下标，实现了静态的 Hash Table。而在 weak_table 中，其成员 weak_entry 会将传入对象的地址加以封装起来，并且其中也有访问全局弱引用表的入口。 31B622B5-77ED-4D50-8CF9-0803785117BC.png 旧对象解除注册操作 weak_unregister_no_lock该方法主要作用是将旧对象在 weak_table 中接触 weak 指针的对应绑定。根据函数名，称之为解除注册操作。从源码中，可以知道其功能就是从 weak_table 中接触 weak 指针的绑定。而其中的遍历查询，就是针对于 weak_entry 中的多张弱引用散列表。 新对象添加注册操作 weak_register_no_lock这一步与上一步相反，通过 weak_register_no_lock 函数把心的对象进行注册操作，完成与对应的弱引用表进行绑定操作。 初始化弱引用对象流程一览弱引用的初始化，从上文的分析中可以看出，主要的操作部分就在弱引用表的取键、查询散列、创建弱引用表等操作，可以总结出如下的流程图： C6029C92-5145-4334-9C25-3CDBA50F142B.png 这个图中省略了很多情况的判断，但是当声明一个 weak 会调用上图中的这些方法。当然， storeWeak 方法不仅仅用在 weak 的声明中，在 class 内部的操作中也会常常通过该方法来对 weak 对象进行操作。 # 释放时，调用clearDeallocating函数。clearDeallocating函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录。当weak引用指向的对象被释放时，又是如何去处理weak指针的呢？当释放对象时，其基本流程如下：1、调用objc_release2、因为对象的引用计数为0，所以执行dealloc3、在dealloc中，调用了_objc_rootDealloc函数4、在_objc_rootDealloc中，调用了object_dispose函数5、调用objc_destructInstance6、最后调用objc_clear_deallocating 重点看对象被释放时调用的objc_clear_deallocating函数。该函数实现如下： 1234567void objc_clear_deallocating(id obj) &#123; assert(obj); assert(!UseGC); if (obj-&gt;isTaggedPointer()) return; obj-&gt;clearDeallocating();&#125; 也就是调用了clearDeallocating，继续追踪可以发现，它最终是使用了迭代器来取weak表的value，然后调用weak_clear_no_lock,然后查找对应的value，将该weak指针置空，weak_clear_no_lock函数的实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * Called by dealloc; nils out all weak pointers that point to the * provided object so that they can no longer be used. * * @param weak_table * @param referent The object being deallocated. */void weak_clear_no_lock(weak_table_t *weak_table, id referent_id)&#123; objc_object *referent = (objc_object *)referent_id; weak_entry_t *entry = weak_entry_for_referent(weak_table, referent); if (entry == nil) &#123; /// XXX shouldn&apos;t happen, but does with mismatched CF/objc //printf(&quot;XXX no entry for clear deallocating %p\n&quot;, referent); return; &#125; // zero out references weak_referrer_t *referrers; size_t count; if (entry-&gt;out_of_line) &#123; referrers = entry-&gt;referrers; count = TABLE_SIZE(entry); &#125; else &#123; referrers = entry-&gt;inline_referrers; count = WEAK_INLINE_COUNT; &#125; for (size_t i = 0; i &lt; count; ++i) &#123; objc_object **referrer = referrers[i]; if (referrer) &#123; if (*referrer == referent) &#123; *referrer = nil; &#125; else if (*referrer) &#123; _objc_inform(&quot;__weak variable at %p holds %p instead of %p. &quot; &quot;This is probably incorrect use of &quot; &quot;objc_storeWeak() and objc_loadWeak(). &quot; &quot;Break on objc_weak_error to debug.\n&quot;, referrer, (void*)*referrer, (void*)referent); objc_weak_error(); &#125; &#125; &#125; weak_entry_remove(weak_table, entry);&#125; objc_clear_deallocating该函数的动作如下： 1、从weak表中获取废弃对象的地址为键值的记录2、将包含在记录中的所有附有 weak修饰符变量的地址，赋值为nil3、将weak表中该记录删除4、从引用计数表中删除废弃对象的地址为键值的记录 看了objc-weak.mm的源码就明白了：其实Weak表是一个hash（哈希）表，然后里面的key是指向对象的地址，Value是Weak指针的地址的数组。 补充：.m和.mm的区别.m：源代码文件，这个典型的源代码文件扩展名，可以包含OC和C代码。.mm：源代码文件，带有这种扩展名的源代码文件，除了可以包含OC和C代码之外，还可以包含C++代码。仅在你的OC代码中确实需要使用C++类或者特性的时候才用这种扩展名。 参考资料：weak 弱引用的实现方式weak的生命周期：具体实现方法]]></content>
      <categories>
        <category>内存管理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[从NSObject的初始化了解isa]]></title>
    <url>%2F2018%2F09%2F14%2F%E4%BB%8ENSObject%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BA%86%E8%A7%A3isa%2F</url>
    <content type="text"><![CDATA[因为 ObjC 的 runtime 只能在 Mac OS 下才能编译，所以文章中的代码都是在 Mac OS，也就是 x86_64 架构下运行的，对于在 arm64 中运行的代码会特别说明。 如果你曾经对 ObjC 底层的实现有一定的了解，你应该会知道 Objective-C 对象都是 C 语言结构体，所有的对象都包含一个类型为 isa 的指针，那么你可能确实对 ObjC 的底层有所知，不过现在的 ObjC 对象的结构已经不是这样了。代替 isa 指针的是结构体 isa_t, 这个结构体中”包含”了当前对象指向的类的信息，这篇文章中会介绍一些关于这个变化的知识。 123struct objc_object &#123; isa_t isa;&#125;; 当 ObjC 为一个对象分配内存，初始化实例变量后，在这些对象的实例变量的结构体中的第一个就是 isa。 所有继承自 NSObject 的类实例化后的对象都会包含一个类型为 isa_t 的结构体。 从上图中可以看出，不只是实例会包含一个 isa 结构体，所有的类也有这么一个 isa。在 ObjC 中 Class 的定义也是一个名为 objc_class 的结构体，如下： 123456struct objc_class : objc_object &#123; isa_t isa; Class superclass; cache_t cache; class_data_bits_t bits;&#125;; 由于 objc_class 结构体是继承自 objc_object 的，所以在这里显式地写出了 isa_t isa 这个成员变量。 isa 指针的作用与元类到这里，我们就明白了：Objective-C 中类也是一个对象。 这个 isa 包含了什么呢？回答这个问题之前，要引入了另一个概念 元类(meta class)，我们先了解一些关于元类的信息。 因为在 Objective-C 中，对象的方法并没有存储于对象的结构体中（如果每一个对象都保存了自己能执行的方法，那么对内存的占用有极大的影响）。 当实例方法被调用时，它要通过自己持有的 isa 来查找对应的类，然后在这里的 class_data_bits_t 结构体中查找对应方法的实现。同时，每一个 objc_class 也有一个指向自己的父类的指针 super_class 用来查找继承的方法。 关于如何在 class_data_bits_t 中查找对应方法会在之后的文章中讲到。这里只需要知道，它会在这个结构体中查找到对应方法的实现就可以了。深入解析 ObjC 中方法的结构 但是，这样就有一个问题，类方法的实现又是如何查找并且调用的呢？这时，就需要引入元类来保证无论是类还是对象都能通过相同的机制查找方法的实现。 让每一个类的 isa 指向对应的元类，这样就达到了使类方法和实例方法的调用机制相同的目的： 实例方法调用时，通过对象的 isa 在类中获取方法的实现 类方法调用时，通过类的 isa 在元类中获取方法的实现 下面这张图介绍了对象，类与元类之间的关系，笔者认为已经觉得足够清晰了，所以不在赘述。 图片来自 objc_explain_Classes_and_metaclasses 有关与介绍类与元类之间的关系的文章实在是太多了，因为这篇文章主要介绍 isa，在这一小节只是对其作用以及元类的概念进行介绍。如果想要了解更多关于类与元类的信息，可以看 What is a meta-class in Objective-C? 结构体 isa_t其实 isa_t 是一个定义得非常”奇怪”的结构体，在 ObjC 源代码中可以看到这样的定义： 12345678910111213141516171819202122232425#define ISA_MASK 0x00007ffffffffff8ULL#define ISA_MAGIC_MASK 0x001f800000000001ULL#define ISA_MAGIC_VALUE 0x001d800000000001ULL#define RC_ONE (1ULL&lt;&lt;56)#define RC_HALF (1ULL&lt;&lt;7)union isa_t &#123; isa_t() &#123; &#125; isa_t(uintptr_t value) : bits(value) &#123; &#125; Class cls; uintptr_t bits; struct &#123; uintptr_t indexed : 1; uintptr_t has_assoc : 1; uintptr_t has_cxx_dtor : 1; uintptr_t shiftcls : 44; uintptr_t magic : 6; uintptr_t weakly_referenced : 1; uintptr_t deallocating : 1; uintptr_t has_sidetable_rc : 1; uintptr_t extra_rc : 8; &#125;;&#125;; 这是在 __x86_64__ 上的实现，对于 iPhone5s 等架构为 __arm64__ 的设备上，具体结构体的实现和位数可能有些差别，不过这些字段都是存在的，可以看这里的 arm64 上结构体的实现 在本篇文章中, 我们会以 x86_64 为例进行分析，而不会对两种架构下由于不同的内存布局方式导致的差异进行分析。在我看来，这个细节不会影响对 isa 指针的理解，不过还是要知道的。 笔者对这个 isa_t 的实现声明顺序有一些更改，更方便分析和理解。 123union isa_t &#123; ...&#125;; isa_t 是一个 union 类型的结构体，对 union 不熟悉的读者可以看这个 stackoverflow 上的回答. 也就是说其中的 isa_t、cls、 bits 还有结构体共用同一块地址空间。而 isa 总共会占据 64 位的内存空间（决定于其中的结构体） 1234567891011struct &#123; uintptr_t indexed : 1; uintptr_t has_assoc : 1; uintptr_t has_cxx_dtor : 1; uintptr_t shiftcls : 44; uintptr_t magic : 6; uintptr_t weakly_referenced : 1; uintptr_t deallocating : 1; uintptr_t has_sidetable_rc : 1; uintptr_t extra_rc : 8;&#125;; isa 的初始化我们可以通过 isa 初始化的方法 initIsa 来初步了解这 64 位的 bits 的作用： 1234567891011121314151617inline void objc_object::initInstanceIsa(Class cls, bool hasCxxDtor)&#123; initIsa(cls, true, hasCxxDtor);&#125;inline void objc_object::initIsa(Class cls, bool indexed, bool hasCxxDtor) &#123; if (!indexed) &#123; isa.cls = cls; &#125; else &#123; isa.bits = ISA_MAGIC_VALUE; isa.has_cxx_dtor = hasCxxDtor; isa.shiftcls = (uintptr_t)cls &gt;&gt; 3; &#125;&#125; indexed 和 magic当我们对一个 ObjC 对象分配内存时，其方法调用栈中包含了上述的两个方法，这里关注的重点是 initIsa 方法，由于在 initInstanceIsa 方法中传入了 indexed = true，所以，我们简化一下这个方法的实现： 123456inline void objc_object::initIsa(Class cls, bool indexed, bool hasCxxDtor) &#123; isa.bits = ISA_MAGIC_VALUE; isa.has_cxx_dtor = hasCxxDtor; isa.shiftcls = (uintptr_t)cls &gt;&gt; 3;&#125; 对整个 isa 的值 bits 进行设置，传入 ISA_MAGIC_VALUE： 1#define ISA_MAGIC_VALUE 0x001d800000000001ULL 我们可以把它转换成二进制的数据，然后看一下哪些属性对应的位被这行代码初始化了（标记为红色）： 从图中了解到，在使用 ISA_MAGIC_VALUE 设置 isa_t 结构体之后，实际上只是设置了 indexed 以及 magic 这两部分的值。 其中 indexed 表示 isa_t 的类型 0 表示 raw isa，也就是没有结构体的部分，访问对象的 isa 会直接返回一个指向 cls 的指针，也就是在 iPhone 迁移到 64 位系统之前时 isa 的类型。 1234567union isa_t &#123; isa_t() &#123; &#125; isa_t(uintptr_t value) : bits(value) &#123; &#125; Class cls; uintptr_t bits;&#125;; 1 表示当前 isa 不是指针，但是其中也有 cls 的信息，只是其中关于类的指针都是保存在 shiftcls 中。 12345678910111213141516171819union isa_t &#123; isa_t() &#123; &#125; isa_t(uintptr_t value) : bits(value) &#123; &#125; Class cls; uintptr_t bits; struct &#123; uintptr_t indexed : 1; uintptr_t has_assoc : 1; uintptr_t has_cxx_dtor : 1; uintptr_t shiftcls : 44; uintptr_t magic : 6; uintptr_t weakly_referenced : 1; uintptr_t deallocating : 1; uintptr_t has_sidetable_rc : 1; uintptr_t extra_rc : 8; &#125;;&#125;; magic 的值为 0x3b 用于调试器判断当前对象是真的对象还是没有初始化的空间 has_cxx_dtor在设置 indexed 和 magic 值之后，会设置 isa 的 has_cxx_dtor，这一位表示当前对象有 C++ 或者 ObjC 的析构器(destructor)，如果没有析构器就会快速释放内存。 1isa.has_cxx_dtor = hasCxxDtor; shiftcls在为 indexed、 magic 和 has_cxx_dtor 设置之后，我们就要将当前对象对应的类指针存入 isa 结构体中了。 1isa.shiftcls = (uintptr_t)cls &gt;&gt; 3; 将当前地址右移三位的主要原因是用于将 Class 指针中无用的后三位清除减小内存的消耗，因为类的指针要按照字节（8 bits）对齐内存，其指针后三位都是没有意义的 0。 绝大多数机器的架构都是 byte-addressable 的，但是对象的内存地址必须对齐到字节的倍数，这样可以提高代码运行的性能，在 iPhone5s 中虚拟地址为 33 位，所以用于对齐的最后三位比特为 000，我们只会用其中的 30 位来表示对象的地址。 而 ObjC 中的类指针的地址后三位也为 0，在 _class_createInstanceFromZone 方法中打印了调用这个方法传入的类指针： 可以看到，这里打印出来的所有类指针十六进制地址的最后一位都为 8 或者 0。也就是说，类指针的后三位都为 0，所以，我们在上面存储 Class 指针时右移三位是没有问题的。 1isa.shiftcls = (uintptr_t)cls &gt;&gt; 3; 如果再尝试打印对象指针的话，会发现所有对象内存地址的后四位都是 0，说明 ObjC 在初始化内存时是以 16 个字节对齐的, 分配的内存地址后四位都是 0。 使用整个指针大小的内存来存储 isa 指针有些浪费，尤其在 64 位的 CPU 上。在 ARM64 运行的 iOS 只使用了 33 位作为指针(与结构体中的 33 位无关，Mac OS 上为 47 位)，而剩下的 31 位用于其它目的。类的指针也同样根据字节对齐了，每一个类指针的地址都能够被 8 整除，也就是使最后 3 bits 为 0，为 isa 留下 34 位用于性能的优化。 Using an entire pointer-sized piece of memory for the isa pointer is a bit wasteful, especially on 64-bit CPUs which don’t use all 64 bits of a pointer. ARM64 running iOS currently uses only 33 bits of a pointer, leaving 31 bits for other purposes. Class pointers are also aligned, meaning that a class pointer is guaranteed to be divisible by 8, which frees up another three bits, leaving 34 bits of the isa available for other uses. Apple’s ARM64 runtime takes advantage of this for some great performance improvements. from ARM64 and You 我尝试运行了下面的代码将 NSObject 的类指针和对象的 isa 打印出来，具体分析一下 12object_pointer: 0000000001011101100000000000000100000000001110101110000011111001 // 补全至 64 位class_pointer: 100000000001110101110000011111000 编译器对直接访问 isa 的操作会有警告，因为直接访问 isa 已经不会返回类指针了，这种行为已经被弃用了，取而代之的是使用 ISA()) 方法来获取类指针。 代码中的 object 对象的 isa 结构体中的内容是这样的： 其中红色的为类指针，与上面打印出的 [NSObject class] 指针右移三位的结果完全相同。这也就验证了我们之前对于初始化 isa 时对 initIsa 方法的分析是正确的。它设置了 indexed、magic 以及 shiftcls。 ISA() 方法因为我们使用结构体取代了原有的 isa 指针，所以要提供一个方法 ISA() 来返回类指针。 其中 ISA_MASK 是宏定义，这里通过掩码的方式获取类指针： 123456#define ISA_MASK 0x00007ffffffffff8ULLinline Class objc_object::ISA() &#123; return (Class)(isa.bits &amp; ISA_MASK);&#125; 其它 bits在 isa_t 中，我们还有一些没有介绍的其它 bits，在这个小结就简单介绍下这些 bits 的作用 1has_assoc 对象含有或者曾经含有关联引用，没有关联引用的可以更快地释放内存 1weakly_referenced 对象被指向或者曾经指向一个 ARC 的弱变量，没有弱引用的对象可以更快释放 1deallocating 对象正在释放内存 1has_sidetable_rc 对象的引用计数太大了，存不下 1extra_rc 对象的引用计数超过 1，会存在这个这个里面，如果引用计数为 10，extra_rc 的值就为 9 1234567891011struct &#123; uintptr_t indexed : 1; uintptr_t has_assoc : 1; uintptr_t has_cxx_dtor : 1; uintptr_t shiftcls : 44; uintptr_t magic : 6; uintptr_t weakly_referenced : 1; uintptr_t deallocating : 1; uintptr_t has_sidetable_rc : 1; uintptr_t extra_rc : 8;&#125;; arm64 架构中的 isa_t 结构体123456789101112131415161718192021222324#define ISA_MASK 0x0000000ffffffff8ULL#define ISA_MAGIC_MASK 0x000003f000000001ULL#define ISA_MAGIC_VALUE 0x000001a000000001ULL#define RC_ONE (1ULL&lt;&lt;45)#define RC_HALF (1ULL&lt;&lt;18)union isa_t &#123; isa_t() &#123; &#125; isa_t(uintptr_t value) : bits(value) &#123; &#125; Class cls; uintptr_t bits; struct &#123; uintptr_t indexed : 1; uintptr_t has_assoc : 1; uintptr_t has_cxx_dtor : 1; uintptr_t shiftcls : 33; uintptr_t magic : 6; uintptr_t weakly_referenced : 1; uintptr_t deallocating : 1; uintptr_t has_sidetable_rc : 1; uintptr_t extra_rc : 19; &#125;;&#125;; 转自]]></content>
      <categories>
        <category>内存管理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[内存布局]]></title>
    <url>%2F2018%2F09%2F14%2F%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[在计算机系统中，运行的应用程序的数据都是保存在内存中的，不同类型的数据，保存的内存区域不同。一、内存分区 栈区(stack) 由编译器自动分配并释放，存放函数的参数值，局部变量等。栈是系统数据结构，对应线程/进程是唯一的。优点是快速高效，缺点时有限制，数据不灵活。［先进后出］ 栈空间分静态分配 和动态分配两种。静态分配是编译器完成的，比如自动变量(auto)的分配。动态分配由alloca函数完成。栈的动态分配无需释放(是自动的)，也就没有释放函数。为可移植的程序起见，栈的动态分配操作是不被鼓励的！ 堆区(heap) 由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收 ，比如在ios 中 alloc 都是存放在堆中。优点是灵活方便，数据适应面广泛，但是效率有一定降低。［顺序随意］堆是函数库内部数据结构，不一定唯一。不同堆分配的内存无法互相操作。堆空间的分配总是动态的虽然程序结束时所有的数据空间都会被释放回系统，但是精确的申请内存，释放内存匹配是良好程序的基本要素。 全局区(静态区) (static) 全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后有系统释放。注意：全局区又可分为未初始化全局区：.bss段和初始化全局区：data段。举例：int a;未初始化的。int a = 10;已初始化的。例子代码：int a = 10; 全局初始化区char *p; 全局未初始化区 1234567891011main&#123; int b; 栈区 char s[] = &quot;abc&quot; 栈 char *p1; 栈 char *p2 = &quot;123456&quot;; 123456\\\\0在常量区，p2在栈上。 static int c =0； 全局（静态）初始化区 w1 = (char *)malloc(10); w2 = (char *)malloc(20); 分配得来得10和20字节的区域就在堆区。 &#125; 文字常量区 存放常量字符串，程序结束后由系统释放 程序代码区 存放函数的二进制代码 二、申请后的系统响应 栈：存储每一个函数在执行的时候都会向操作系统索要资源，栈区就是函数运行时的内存，栈区中的变量由编译器负责分配和释放，内存随着函数的运行分配，随着函数的结束而释放，由系统自动完成。 注意：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。 堆：1.首先应该知道操作系统有一个记录空闲内存地址的链表。2.当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。3 .由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中 三、 申请大小的限制 栈：栈是向低地址扩展的数据结构，是一块连续的内存的区域。是栈顶的地址和栈的最大容量是系统预先规定好的，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数 ) ,如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。 堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。 ​ ​ 内存分配.png 栈：由系统自动分配，速度较快，不会产生内存碎片堆：是由alloc分配的内存，速度比较慢，而且容易产生内存碎片，不过用起来最方便 打个比喻来说： 使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。 使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。 [转自 iOS程序中的内存分配 栈区堆区全局区]]]></content>
      <categories>
        <category>内存管理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS中copy,strong,retain,weak和assign的区别]]></title>
    <url>%2F2018%2F09%2F14%2FiOS%E4%B8%ADcopy-strong-retain-weak%E5%92%8Cassign%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[本文逻辑图： 文章逻辑图 在知道他们区别之前，我们首先要知道NSObject对象的赋值操作做了哪些操作。 A=C其实是在内存中创建了一个A，然后又开辟了一个内存C，C里面存放的着值B。 NSObject赋值示意图1 如下： 1234NSMutableString*tempMStr = [[NSMutableString alloc]initWithString:@&quot;strValue&quot;];NSLog(@&quot;tempMStr值地址:%p，tempMStr值%@,tempMStr值引用计数%@\\n&quot;, tempMStr,tempMStr,[tempMStr valueForKey:@&quot;retainCount&quot;]);//输出tempMStr值地址:0x7a05f650，tempMStr值strValue,tempMStr值引用计数1 此处tempMStr就是A，值地址就是C，“strValue”就是B，而引用计数这个概念是针对C的，赋值给其他变量或者指针设置为nil，如tempStr = nil，都会使得引用计数有所增减。当内存区域引用计数为0时就会将数据抹除。而我们使用copy,strong,retain,weak,assign区别就在： 1.是否开辟新的内存2.是否对地址C有引用计数增加 需要注意的是property修饰符是在被赋值时起作用。 1.以典型的NSMutableString为例 123456789101112131415161718192021222324@property(copy,nonatomic)NSMutableString*aCopyMStr;@property(strong,nonatomic)NSMutableString*strongMStr;@property(weak,nonatomic)NSMutableString*weakMStr;@property(assign,nonatomic)NSMutableString*assignMStr;NSMutableString*mstrOrigin = [[NSMutableStringalloc]initWithString:@&quot;mstrOriginValue&quot;];self.aCopyMStr= mstrOrigin;self.strongMStr= mstrOrigin;self.strongMStr= mstrOrigin;self.weakMStr= mstrOrigin;NSLog(@&quot;mstrOrigin输出:%p,%@\\n&quot;, mstrOrigin,mstrOrigin);NSLog(@&quot;aCopyMStr输出:%p,%@\\n&quot;,_aCopyMStr,_aCopyMStr);NSLog(@&quot;strongMStr输出:%p,%@\\n&quot;,_strongMStr,_strongMStr);NSLog(@&quot;weakMStr输出:%p,%@\\n&quot;,_weakMStr,_weakMStr);NSLog(@&quot;引用计数%@&quot;,[mstrOriginvalueForKey:@&quot;retainCount&quot;]);//输出结果//2016-09-01 15:19:13.134 lbCopy[1205:87583] mstrOrigin输出:0x7892a5e0,mstrOriginValue//2016-09-01 15:19:13.135 lbCopy[1205:87583] aCopyMStr输出:0x7893deb0,mstrOriginValue//2016-09-01 15:19:13.135 lbCopy[1205:87583] strongMStr输出:0x7892a5e0,mstrOriginValue//2016-09-01 15:19:13.135 lbCopy[1205:87583] weakMStr输出:0x7892a5e0,mstrOriginValue//2016-09-01 15:19:13.135 lbCopy[1205:87583] 引用计数2 strongMStr和weakMStr指针指向的内存地址都和mstrOrigin相同,但mstrOrigin内存引用计数为2，不为3，因为weakMStr虽然指向了数据内存地址（之后用C简称，见示意图1），但不会增加C计数。copy修饰的的aCopyMStr，赋值后则是自己单独开辟了一块内存，内存上保存“mstrOrigin”字符串，并指向。 拷贝示意图如下 NSMutableString拷贝示意图2 可见当我修改mstrOrigin的值的时候，必然不会影响aCopyMStr,只会影响strongMStr和weakMStr。我们来验证下 12345678910111213NSLog(@&quot;------------------修改原值后------------------------&quot;);[mstrOriginappendString:@&quot;1&quot;];NSLog(@&quot;mstrOrigin输出:%p,%@\\n&quot;, mstrOrigin,mstrOrigin);NSLog(@&quot;aCopyMStr输出:%p,%@\\n&quot;,_aCopyMStr,_aCopyMStr);NSLog(@&quot;strongMStr输出:%p,%@\\n&quot;,_strongMStr,_strongMStr);NSLog(@&quot;weakMStr输出:%p,%@\\n&quot;,_weakMStr,_weakMStr);//输出结果//2016-09-01 15:33:02.839 lbCopy[1205:87583] mstrOrigin输出:0x7892a5e0,mstrOrigin1//2016-09-01 15:33:02.839 lbCopy[1205:87583] aCopyMStr输出:0x7893deb0,mstrOrigin//2016-09-01 15:33:02.839 lbCopy[1205:87583] strongMStr输出:0x7892a5e0,mstrOrigin1//2016-09-01 15:33:02.839 lbCopy[1205:87583] weakMStr输出:0x7892a5e0,mstrOrigin1 copy会重新开辟新的内存来保存一份相同的数据。被赋值对象和原值修改互不影响。strong和weak赋值都指向原来数据地址，区别是前者会对数据地址进行引用计数+1，后者不会 引用计数是否+1有什么实质区别呢？ 如果知道“值地址的引用计数为0时，地址上保存的值就会被释放”。那么区别就不难理解，weak修饰的指针A指向的值地址C，那么地址上当其他指向他的指针被释放的时候，这个值地址引用计数也就变为0了，这个A的值也就为nil了。换句话说当值地址C上没有其他强引用指针修饰的时候C就会被立即释放，A的值就变为nil了。 这里我们来初始化mstrOrigin和并将strongMStr设置为nil让C的引用计数为0，然后输出weakMStr，看是否为nil.注：初始化和设为nil都可以将指针所指向的数据地址引用计数减少1 12345678910mstrOrigin = [[NSMutableStringalloc]initWithString:@&quot;mstrOriginChange2&quot;];self.strongMStr=nil;NSLog(@&quot;mstrOrigin输出:%p,%@\\n&quot;, mstrOrigin,mstrOrigin);NSLog(@&quot;strongMStr输出:%p,%@\\n&quot;,_strongMStr,_strongMStr);NSLog(@&quot;weakMStr输出:%p,%@\\n&quot;,_weakMStr,_weakMStr);输出结果//2016-09-01 15:41:33.793 lbCopy[1247:100742] mstrOrigin输出:0x7874d140,mstrOriginChange2//2016-09-01 15:41:33.793 lbCopy[1247:100742] strongMStr输出:0x0,(null)//2016-09-01 15:41:33.794 lbCopy[1247:100742] weakMStr输出:0x0,(null) 可见之前引用计数2是mstrOrigin和strongMStr添加的。结论：copy会重新开辟新的内存来保存一份相同的数据。被赋值对象和原值修改互不影响。strong和weak虽然都指向原来数据地址，原值修改的时候storng和weak会随之变化。区别是前者会对数据地址进行引用计数+1防止原地址值被释放，但后者不会，当其他值都不在指向值地址时，值地址被释放，weak的值也就是为nil了。我们称会对数据地址增加引用计数的为强引用，不改变引用计数的为弱引用 1.2 assign和weak的区别对assign和weak修饰的值进行赋值，并输出指针结构地址和值 12345self.assignMStr= mstrOrigin;self.weakMStr= mstrOrigin;mstrOrigin = [[NSMutableStringalloc]initWithString:@&quot;mstrOriginChange3&quot;];NSLog(@&quot;weakMStr输出:%p,%@\\n&quot;,_weakMStr,_weakMStr);NSLog(@&quot;assignMStr输出:%p,%@\\n&quot;,self.assignMStr,self.assignMStr); 可以发现在输出assignMStr时会偶尔出现奔溃的情况。原因是发送了野指针的情况。assign同weak，指向C并且计数不+1，但当C地址引用计数为0时，assign不会对C地址进行B数据的抹除操作，只是进行值释放。这就导致野指针存在，即当这块地址还没写上其他值前，能输出正常值，但一旦重新写上数据，该指针随时可能没有值，造成奔溃。 1.3那retain是什么ARC之前属性构造器的关键字是retain,copy,assign，strong和weak是ARC带出来的关键字。retain现在同strong，就是指针指向值地址，同时进行引用计数加1。 2.非NSMutableString的情况上面我们讨论了典型的例子NSMutableString，即非容器可变变量。也就是说还存在其他三种类型需要讨论… 1.非容器不可变变量NSSting2.容器可变变量NSMutableArray3.容器不可变变量NSArray 更重要的是不同类型会有不同结果…，好吧，不要奔溃，上面一大段我们讨论了1/4，接下来我们要讨论其他的3/4情况。但好消息是，其他几种情况基本与上面非容器可变变量情况基本类似。 2.1容器可变变量容器可变变量的典型例子就是NSMutableArray下面代码可以忽略，只做参考用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113@property(copy,nonatomic)NSMutableArray*aCopyMArr;@property(strong,nonatomic)NSMutableArray*strongMArr;@property(weak,nonatomic)NSMutableArray*weakMArr;NSMutableArray*mArrOrigin = [[NSMutableArrayalloc]init];NSMutableString*mstr1 = [[NSMutableStringalloc]initWithString:@&quot;value1&quot;];NSMutableString*mstr2 = [[NSMutableStringalloc]initWithString:@&quot;value2&quot;];NSMutableString*mstr3 = [[NSMutableStringalloc]initWithString:@&quot;value3&quot;];[mArrOriginaddObject:mstr1];[mArrOriginaddObject:mstr2];//将mArrOrigin拷贝给aCopyMArr，strongMArr，weakMArrself.aCopyMArr= mArrOrigin;self.strongMArr= mArrOrigin;self.weakMArr= mArrOrigin;NSLog(@&quot;mArrOrigin输出:%p,%@\\n&quot;, mArrOrigin,mArrOrigin);NSLog(@&quot;aCopyMArr输出:%p,%@\\n&quot;,_aCopyMArr,_aCopyMArr);NSLog(@&quot;strongMArr输出:%p,%@\\n&quot;,_strongMArr,_strongMArr);NSLog(@&quot;weakMArr输出:%p,%@\\n&quot;,_weakMArr,_weakMArr);NSLog(@&quot;weakMArr输出:%p,%@\\n&quot;,_weakMArr[0],_weakMArr[0]);NSLog(@&quot;mArrOrigin中的数据引用计数%@&quot;, [mArrOriginvalueForKey:@&quot;retainCount&quot;]);NSLog(@&quot;%p %p %p %p&quot;,&amp;mArrOrigin,mArrOrigin,mArrOrigin[0],mArrOrigin[1]);//以下是输出2016-09-02 20:42:30.777 lbCopy[4207:475091] mArrOrigin输出:0x78f81680,(value1,value2)2016-09-02 20:42:30.777 lbCopy[4207:475091] aCopyMArr输出:0x7a041340,(value1,value2)2016-09-02 20:42:30.777 lbCopy[4207:475091] strongMArr输出:0x78f81680,(value1,value2)2016-09-02 20:42:30.777 lbCopy[4207:475091] weakMArr输出:0x78f81680,(value1,value2)2016-09-02 20:42:30.777 lbCopy[4207:475091] weakMArr输出:0x78f816a0,value12016-09-02 20:42:30.778 lbCopy[4207:475091] mArrOrigin中的数据引用计数(3,3)2016-09-02 20:42:30.778 lbCopy[4207:475091] 0xbffb4098 0x78f81680 0x78f816a0 0x78f81710//以上是输出//给原数组添加一个元素[mArrOriginaddObject:mstr3];NSLog(@&quot;mArrOrigin输出:%p,%@\\n&quot;, mArrOrigin,mArrOrigin);NSLog(@&quot;aCopyMArr输出:%p,%@\\n&quot;,_aCopyMArr,_aCopyMArr);NSLog(@&quot;strongMArr输出:%p,%@\\n&quot;,_strongMArr,_strongMArr);NSLog(@&quot;weakMArr输出:%p,%@\\n&quot;,_weakMArr,_weakMArr);NSLog(@&quot;mArrOrigin中的数据引用计数%@&quot;, [mArrOriginvalueForKey:@&quot;retainCount&quot;]);//修改原数组中的元素，看是否有随之变化[mstr1appendFormat:@&quot;aaa&quot;];NSLog(@&quot;mArrOrigin输出:%p,%@\\n&quot;, mArrOrigin,mArrOrigin);NSLog(@&quot;aCopyMArr输出:%p,%@\\n&quot;,_aCopyMArr,_aCopyMArr);NSLog(@&quot;strongMArr输出:%p,%@\\n&quot;,_strongMArr,_strongMArr);NSLog(@&quot;weakMArr输出:%p,%@\\n&quot;,_weakMArr,_weakMArr);//以下是输出2016-09-02 20:42:30.778 lbCopy[4207:475091] mArrOrigin输出:0x78f81680,(value1,value2,value3)2016-09-02 20:42:30.778 lbCopy[4207:475091] aCopyMArr输出:0x7a041340,(value1,value2)2016-09-02 20:42:30.778 lbCopy[4207:475091] strongMArr输出:0x78f81680,(value1,value2,value3)2016-09-02 20:42:30.778 lbCopy[4207:475091] weakMArr输出:0x78f81680,(value1,value2,value3)2016-09-02 20:42:30.779 lbCopy[4207:475091] mArrOrigin中的数据引用计数(3,3,2)2016-09-02 20:42:30.779 lbCopy[4207:475091] mArrOrigin输出:0x78f81680,(value1aaa,value2,value3)2016-09-02 20:42:30.779 lbCopy[4207:475091] aCopyMArr输出:0x7a041340,(value1aaa,value2)2016-09-02 20:42:30.779 lbCopy[4207:475091] strongMArr输出:0x78f81680,(value1aaa,value2,value3)2016-09-02 20:42:30.779 lbCopy[4207:475091] weakMArr输/出:0x78f81680,(value1aaa,value2,value3)//以上是输出 上面代码有点多，所做的操作是mArrOrigin（value1,value2）赋值给copy,strong,weak修饰的aCopyMArr,strongMArr,weakMArr。通过给原数组增加元素，修改原数组元素值，然后输出mArrOrigin的引用计数，和数组地址，查看变化。发现其中数组本身指向的内存地址除了aCopyMArr重新开辟了一块地址，strongMArr,weakMArr和mArrOrigin指针指向的地址是一样的。也就是说 容器可变变量中容器本身和非容器可变变量是一样的，copy深拷贝，strongMArr,weakMArr和assign都是浅拷贝 另外我们发现被拷贝对象mArrOrigin中的数据引用计数居然不是1而是3。也就是说容器内的数据拷贝都是进行了浅拷贝。同时当我们修改数组中的一个数据时strongMArr,weakMArr，aCopyMArr中的数据都改变了，说明 容器可变变量中的数据在拷贝的时候都是浅拷贝 容器可变变量的拷贝结构如下图 NSMutableArray拷贝示意图3 2.2非容器不变变量 典型例子是NSString 我们还是以代码引出结果 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596@property(copy,nonatomic)NSString*aCopyStr;@property(strong,nonatomic)NSString*strongStr;@property(weak,nonatomic)NSString*weakStr;@property(assign,nonatomic)NSString*assignStr;NSLog(@&quot;\\n\\n\\n\\n------------------不可变量实验------------------------&quot;);NSString*strOrigin = [[NSStringalloc]initWithUTF8String:&quot;strOrigin0123456&quot;];self.aCopyStr= strOrigin;self.strongStr= strOrigin;self.weakStr= strOrigin;NSLog(@&quot;strOrigin输出:%p,%@\\n&quot;, strOrigin,strOrigin);NSLog(@&quot;aCopyStr输出:%p,%@\\n&quot;,_aCopyStr,_aCopyStr);NSLog(@&quot;strongStr输出:%p,%@\\n&quot;,_strongStr,_strongStr);NSLog(@&quot;weakStr输出:%p,%@\\n&quot;,_weakStr,_weakStr);NSLog(@&quot;------------------修改原值后------------------------&quot;);strOrigin =@&quot;aaa&quot;;NSLog(@&quot;strOrigin输出:%p,%@\\n&quot;, strOrigin,strOrigin);NSLog(@&quot;aCopyStr输出:%p,%@\\n&quot;,_aCopyStr,_aCopyStr);NSLog(@&quot;strongStr输出:%p,%@\\n&quot;,_strongStr,_strongStr);NSLog(@&quot;weakStr输出:%p,%@\\n&quot;,_weakStr,_weakStr);NSLog(@&quot;------------------结论------------------------&quot;);NSLog(@&quot;strOrigin值值为改变，但strOrigin和aCopyStr指针地址和指向都已经改变，说明不可变类型值不可被修改，重新初始化&quot;);self.aCopyStr=nil;self.strongStr=nil;NSLog(@&quot;strOrigin输出:%p,%@\\n&quot;, strOrigin,strOrigin);NSLog(@&quot;aCopyStr输出:%p,%@\\n&quot;,_aCopyStr,_aCopyStr);NSLog(@&quot;strongStr输出:%p,%@\\n&quot;,_strongStr,_strongStr);NSLog(@&quot;weakStr输出:%p,%@\\n&quot;,_weakStr,_weakStr);NSLog(@&quot;------------------结论------------------------&quot;);NSLog(@&quot;当只有weakStr拥有C时，值依旧会被释放，同非容器可变变量&quot;);//以下是输出------------------不可变量实验------------------------2016-09-02 21:08:44.053 lbCopy[4297:488549] strOrigin输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.053 lbCopy[4297:488549] aCopyStr输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.054 lbCopy[4297:488549] strongStr输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.054 lbCopy[4297:488549] weakStr输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.054 lbCopy[4297:488549] strOrigin值内存引用计数32016-09-02 21:08:44.054 lbCopy[4297:488549] ------------------修改原值后------------------------2016-09-02 21:08:44.054 lbCopy[4297:488549] strOrigin输出:0x8c1f8,aaa2016-09-02 21:08:44.054 lbCopy[4297:488549] aCopyStr输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.054 lbCopy[4297:488549] strongStr输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.055 lbCopy[4297:488549] weakStr输出:0x7a2550d0,strOrigin01234562016-09-02 21:08:44.055 lbCopy[4297:488549] ------------------结论------------------------2016-09-02 21:08:44.055 lbCopy[4297:488549] strOrigin值值为改变，但strOrigin和aCopyStr指针地址和指向都已经改变，说明不可变类型值不可被修改，重新初始化2016-09-02 21:08:44.059 lbCopy[4297:488549] strOrigin输出:0x8c1f8,aaa2016-09-02 21:08:44.059 lbCopy[4297:488549] aCopyStr输出:0x0,(null)2016-09-02 21:08:44.060 lbCopy[4297:488549] strongStr输出:0x0,(null)2016-09-02 21:08:44.060 lbCopy[4297:488549] weakStr输出:0x0,(null)2016-09-02 21:08:44.060 lbCopy[4297:488549] ------------------结论------------------------2016-09-02 21:08:44.061 lbCopy[4297:488549]当只有weakStr拥有C时，值依旧会被释放，同非容器可变变量//以上是输出 此处我们将strOrigin拷贝给aCopyStr，strongStr，weakStr，然后输出他们的值地址，发现他们四个的值地址一样，且strOrigin值的引用计数为3。修改strOrigin和发现strOrigin值地址改变，其他三个值地址不变，将aCopyStr，strongStr设为nil后，发现weakStr随之nil。 综合上面现象NSString和NSMutableString（非容器可变变量）基本相同，除了copy，NSString为浅拷贝，NSMutableString是深拷贝。那么为什么NSString的copy是浅拷贝呢，也就是说为什么aCopyStr不自己开辟一个独立的内存出来呢。答案很简单，因为不可变量的值不会改变，既然都不会改变，所以没必要重新开辟一个内存出来让aCopyStr指向他，直接指向原来值位置就可以了。示意图如下 NSString拷贝示意图4 所以非容器不可变量除了copy其他特性同非容器可变变量，copy是浅拷贝 2.3不可变容器变量典型对象NSArray。该对象实验自行实验。但结论在这里给出，其实不实验也可以大概知道概率在不可变容器变量中，容器本身都是浅拷贝包括copy，同NSString，容器里面的数据都是浅拷贝，同NSMutableArray。 3.总结copy，strong，weak，assign的区别。 可变变量中，copy是重新开辟一个内存，strong，weak，assgin后三者不开辟内存，只是指针指向原来保存值的内存的位置，storng指向后会对该内存引用计数+1，而weak，assgin不会。weak，assgin会在引用保存值的内存引用计数为0的时候值为空，并且weak会将内存值设为nil，assign不会，assign在内存没有被重写前依旧可以输出，但一旦被重写将出现奔溃 不可变变量中，因为值本身不可被改变，copy没必要开辟出一块内存存放和原来内存一模一样的值，所以内存管理系统默认都是浅拷贝。其他和可变变量一样，如weak修饰的变量同样会在内存引用计数为0时变为nil。 容器本身遵守上面准则，但容器内部的每个值都是浅拷贝。 综上所述，当创建property构造器创建变量value1的时候，使用copy，strong，weak，assign根据具体使用情况来决定。value1 = value2，如果你希望value1和value2的修改不会互相影响的就用用copy，反之用strong,weak,assign。如果你还希望原来值C(C是什么见示意图1)为nil的时候，你的变量不为nil就用strong,反之用weak和assign。weak和assign保证了不强引用某一块内存，如delegate我们就用weak表示，就是为了防止循环引用的产生。另外，我们上面讨论的是类变量，直接创建局部变量默认是Strong修饰 补充：delegate为什么要用weak或者assign而不用stronga创建对象b,b中有C类对象c，所以a对b有一个引用,b对c有一个引用，a.b引用计数分别为1，1。当c.delegate = b的时候，实则是对b有了一个引用，如果此时c的delegate用strong修饰则会对b的值内存引用计数+1，b引用计数为2。当a的生命周期结束，随之释放对b的引用，b的引用计数变为1，导致b不能释放，b不能释放又导致b对c的引用不能释放，c引用计数还是为1，这样就造成了b和c一直留在了内存中。 而要解决这个问题就是使用weak或者assign修饰delegate，这样虽然会有c仍然会对b有一个引用，但是引用是弱引用，当a生命周期结束的时候，b的引用计数变为0，b释放后随之c的引用消失，c引用计数变为0，释放。 不可变常量的特殊性在2.2的讨论中如果你1.字符串改成小于10长度的字符串2.NSString*strOrigin = @”strOrigin0123456”;初始化NSString，你都会发现strOrigin值内存引用计数将发生异常，通常表现为引用计数特别大，具体可以看下iOS中NSString的特别之处这篇文章 项目地址https://github.com/ai966669/copy转自]]></content>
      <categories>
        <category>Objective-C语言特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[深拷贝与浅拷贝]]></title>
    <url>%2F2018%2F09%2F14%2F%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[概念对象拷贝有两种方式：浅复制和深复制。顾名思义，浅复制，并不拷贝对象本身，仅仅是拷贝指向对象的指针；深复制是直接拷贝整个对象内存到另一块内存中。 一图以蔽之 再简单些说：浅复制就是指针拷贝；深复制就是内容拷贝。 集合的浅复制 (shallow copy)集合的浅复制有非常多种方法。当你进行浅复制时，会向原始的集合发送retain消息，引用计数加1，同时指针被拷贝到新的集合。 现在让我们看一些浅复制的例子： 1NSArray *shallowCopyArray = [someArray copyWithZone:nil];NSSet *shallowCopySet = [NSSet mutableCopyWithZone:nil];NSDictionary *shallowCopyDict = [[NSDictionary alloc] initWithDictionary:someDictionary copyItems:NO]; 集合的深复制 (deep copy)集合的深复制有两种方法。可以用 initWithArray:copyItems: 将第二个参数设置为YES即可深复制，如 1NSDictionary shallowCopyDict = [[NSDictionary alloc] initWithDictionary:someDictionary copyItems:YES]; 如果你用这种方法深复制，集合里的每个对象都会收到 copyWithZone: 消息。如果集合里的对象遵循 NSCopying 协议，那么对象就会被深复制到新的集合。如果对象没有遵循 NSCopying 协议，而尝试用这种方法进行深复制，会在运行时出错。copyWithZone: 这种拷贝方式只能够提供一层内存拷贝(one-level-deep copy)，而非真正的深复制。 第二个方法是将集合进行归档(archive)，然后解档(unarchive)，如： 1NSArray *trueDeepCopyArray = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:oldArray]]; 集合的单层深复制 (one-level-deep copy)看到这里，有同学会问：如果在多层数组中，对第一层进行内容拷贝，其它层进行指针拷贝，这种情况是属于深复制，还是浅复制？对此，苹果官网文档有这样一句话描述 This kind of copy is only capable of producing a one-level-deep copy. If you only need a one-level-deep copy… If you need a true deep copy, such as when you have an array of arrays… 从文中可以看出，苹果认为这种复制不是真正的深复制，而是将其称为单层深复制(one-level-deep copy)。因此，网上有人对浅复制、深复制、单层深复制做了概念区分。 浅复制(shallow copy)：在浅复制操作时，对于被复制对象的每一层都是指针复制。 深复制(one-level-deep copy)：在深复制操作时，对于被复制对象，至少有一层是深复制。 完全复制(real-deep copy)：在完全复制操作时，对于被复制对象的每一层都是对象复制。 当然，这些都是概念性的东西，没有必要纠结于此。只要知道进行拷贝操作时，被拷贝的是指针还是内容即可。 系统对象的copy与mutableCopy方法不管是集合类对象，还是非集合类对象，接收到copy和mutableCopy消息时，都遵循以下准则： copy返回imutable对象；所以，如果对copy返回值使用mutable对象接口就会crash； mutableCopy返回mutable对象； 下面将针对非集合类对象和集合类对象的copy和mutableCopy方法进行具体的阐述 1、非集合类对象的copy与mutableCopy系统非集合类对象指的是 NSString, NSNumber … 之类的对象。下面先看个非集合类immutable对象拷贝的例子 1NSString *string = @&quot;origin&quot;;NSString *stringCopy = [string copy];NSMutableString *stringMCopy = [string mutableCopy]; 通过查看内存，可以看到 stringCopy 和 string 的地址是一样，进行了指针拷贝；而 stringMCopy 的地址和 string 不一样，进行了内容拷贝； 再看mutable对象拷贝例子 1NSMutableString *string = [NSMutableString stringWithString: @&quot;origin&quot;];//copyNSString *stringCopy = [string copy];NSMutableString *mStringCopy = [string copy];NSMutableString *stringMCopy = [string mutableCopy];//change value[mStringCopy appendString:@&quot;mm&quot;]; //crash[string appendString:@&quot; origion!&quot;];[stringMCopy appendString:@&quot;!!&quot;]; 运行以上代码，会在第7行crash，原因就是 copy 返回的对象是 immutable 对象。注释第7行后再运行，查看内存，发现 string、stringCopy、mStringCopy、stringMCopy 四个对象的内存地址都不一样，说明此时都是做内容拷贝。 综上两个例子，我们可以得出结论： 在非集合类对象中：对immutable对象进行copy操作，是指针复制，mutableCopy操作时内容复制；对mutable对象进行copy和mutableCopy都是内容复制。用代码简单表示如下： [immutableObject copy] // 浅复制 [immutableObject mutableCopy] //深复制 [mutableObject copy] //深复制 [mutableObject mutableCopy] //深复制 2、集合类对象的copy与mutableCopy集合类对象是指NSArray、NSDictionary、NSSet … 之类的对象。下面先看集合类immutable对象使用copy和mutableCopy的一个例子： 1NSArray *array = @[@[@&quot;a&quot;, @&quot;b&quot;], @[@&quot;c&quot;, @&quot;d&quot;];NSArray *copyArray = [array copy];NSMutableArray *mCopyArray = [array mutableCopy]; 查看内容，可以看到copyArray和array的地址是一样的，而mCopyArray和array的地址是不同的。说明copy操作进行了指针拷贝，mutableCopy进行了内容拷贝。但需要强调的是：此处的内容拷贝，仅仅是拷贝array这个对象，array集合内部的元素仍然是指针拷贝。这和上面的非集合immutable对象的拷贝还是挺相似的，那么mutable对象的拷贝会不会类似呢？我们继续往下，看mutable对象拷贝的例子： 1NSMutableArray *array = [NSMutableArray arrayWithObjects:[NSMutableString stringWithString:@&quot;a&quot;],@&quot;b&quot;,@&quot;c&quot;,nil];NSArray *copyArray = [array copy];NSMutableArray *mCopyArray = [array mutableCopy]; 查看内存，如我们所料，copyArray、mCopyArray和array的内存地址都不一样，说明copyArray、mCopyArray都对array进行了内容拷贝。同样，我们可以得出结论： 在集合类对象中，对immutable对象进行copy，是指针复制，mutableCopy是内容复制；对mutable对象进行copy和mutableCopy都是内容复制。但是：集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制。用代码简单表示如下： [immutableObject copy] // 浅复制 [immutableObject mutableCopy] //单层深复制 [mutableObject copy] //单层深复制 [mutableObject mutableCopy] //单层深复制 这个代码结论和非集合类的非常相似。 这时候，是不是有人要问了，如果要对集合对象复制元素怎么办？有这疑问的同学不妨回头看看集合的深复制。 好了，深复制与浅复制就讲到这里。 最后说个题外的东西，在搜集资料的过程中，发现一个有可能犯错的点 1NSString *str = @&quot;string&quot;;str = @&quot;newString&quot;; 上面这段代码，在执行第二行代码后，内存地址发生了变化。乍一看，有点意外。按照 C 语言的经验，初始化一个字符串之后，字符串的首地址就被确定下来，不管之后如何修改字符串内容，这个地址都不会改变。但此处第二行并不是对 str 指向的内存地址重新赋值，因为赋值操作符左边的 str 是一个指针，也就是说此处修改的是内存地址。 所以第二行应该这样理解：将@”newStirng”当做一个新的对象，将这段对象的内存地址赋值给str。 我有如下的两个方法查看内存地址 p str 会打印对象本身的内存地址和对象内容 1(lldb) p str(NSString *) $0 = 0x000000010c913680 @&quot;a&quot; po &amp;str 则打印的是引用对象的指针所在的地址 1(lldb) po &amp;str0x00007fff532fb6c0 转自]]></content>
      <categories>
        <category>Objective-C语言特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[KVO的底层实现原理]]></title>
    <url>%2F2018%2F09%2F13%2FKVO%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[addObserver:forKeyPath:options:context:各个参数的作用分别是什么, observer中需要实现哪个方法才能获得KVO回调？12345678910111213141516171819202122/** 1. self.person：要监听的对象 2. 参数说明： * @param addObserver 观察者，负责处理监听事件的对象 * @param forKeyPath 要监听的属性 * @param options 观察的选项（观察新、旧值，也可以都观察） * @param context 上下文，用于传递数据，可以利用上下文区分不同的监听 */[self.person addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:@&quot;Person Name&quot;];/** * 当监控的某个属性的值改变了就会调用 * * @param keyPath 监听的属性名 * @param object 属性所属的对象 * @param change 属性的修改情况（属性原来的值`oldValue`、属性最新的值`newValue`） * @param context 传递的上下文数据，与监听的时候传递的一致，可以利用上下文区分不同的监听 */- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; NSLog(@&quot;%@对象的%@属性改变了：%@&quot;, object, keyPath, change);&#125; KVO (Key-Value Observing)KVO 是 Objective-C 对观察者模式（Observer Pattern）的实现。也是 Cocoa Binding 的基础。当被观察对象的某个属性发生更改时，观察者对象会获得通知。 有意思的是，你不需要给被观察的对象添加任何额外代码，就能使用 KVO 。这是怎么做到的？ KVO内部实现原理 KVO是基于runtime机制实现的 当某个类的属性对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的setter 方法。派生类在被重写的setter方法内实现真正的通知机制 如果原类为Person，那么生成的派生类名为NSKVONotifying_Person 每个类对象中都有一个isa指针指向当前类，当一个类对象的第一次被观察，那么系统会偷偷将isa指针指向动态生成的派生类，从而在给被监控属性赋值时执行的是派生类的setter方法 键值观察通知依赖于NSObject 的两个方法: willChangeValueForKey:和 didChangevlueForKey:；在一个被观察属性发生改变之前， willChangeValueForKey:一定会被调用，这就 会记录旧的值。而当改变发生后，didChangeValueForKey:会被调用，继而 observeValueForKey:ofObject:change:context:也会被调用。 补充：KVO的这套实现机制中苹果还偷偷重写了class方法，让我们误认为还是使用的当前类，从而达到隐藏生成的派生类 ​ ​ KVO内部实现原理.png 如何手动触发一个value的KVO 自动触发的场景：在注册KVO之前设置一个初始值，注册之后，设置一个不一样的值，就可以触发了 想知道如何手动触发，必须知道自动触发 KVO 的原理，见上面的描述 手动触发演示 123456789101112@property (nonatomic, strong) NSDate *now;- (void)viewDidLoad&#123; [super viewDidLoad]; // “手动触发self.now的KVO”，必写。 [self willChangeValueForKey:@&quot;now&quot;]; // “手动触发self.now的KVO”，必写。 [self didChangeValueForKey:@&quot;now&quot;];&#125; 手动触发一个value的KVO.png 补充： 如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？（看链接） 如何自己动手实现 KVO 附注: KVC底层实现原理(如下)KVC运用了一个isa-swizzling技术. isa-swizzling就是类型混合指针机制, 将2个对象的isa指针互相调换, 就是俗称的黑魔法.KVC主要通过isa-swizzling, 来实现其内部查找定位的. 默认的实现方法�由NSOject提供isa指针, 如其名称所指,(就是is a kind of的意思), 指向分发表对象的类. 该分发表实际上包含了指向实现类中的方法的指针, 和其它数据。 具体主要分为三大步 第一步：寻找该属性有没有setsetter方法？有，就直接赋值 第二步：寻找有没有该属性带下划线的成员属性？有，就直接赋值 第三步：寻找有没有该属性的成员属性？有，就直接赋值 或者这么说 1、首先搜索setKey:方法.(key指成员变量名, 首字母大写) 2、上面的setter方法没找到, 如果类方法accessInstanceVariablesDirectly返回YES. 那么按 _key, _isKey，key, iskey的顺序搜索成员名.(NSKeyValueCodingCatogery中实现的类方法, 默认实现为返回YES) 3、如果没有找到成员变量, 调用setValue:forUnderfinedKey: 比如说如下的一行KVC的代码： 举个🌰e.g:123456789[object setValue:@&quot;13123&quot; forKey:@&quot;uuid&quot;];就会被编译器处理成:// 首先找到对应selSEL sel = sel_get_ uuid(&quot;setValue:forKey:&quot;);// 根据object-&gt;isa找到sel对应的IMP实现指针IMP method = objc_msg_lookup (object-&gt;isa,sel);// 调用指针完成KVC赋值method(object, sel, @&quot;13123&quot;, @&quot;uuid&quot;); 可供参考文章 下面这篇也不错 KVO的实现原理与具体应用 [转自 探究KVO的底层实现原理]]]></content>
      <categories>
        <category>Objective-C语言特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[通知]]></title>
    <url>%2F2018%2F09%2F13%2F%E9%80%9A%E7%9F%A5%2F</url>
    <content type="text"><![CDATA[123456789目录 一、通知的基本使用 1、基本概念 2、什么情况下使用通知 3、如何使用通知 4、使用通知需要注意哪些细节 二、通知的实现原理 1、概述 2、实现 通知的基本使用基本概念NSNotification 是iOS中一个调度消息通知的类,采用单例模式设计,在程序中实现传值、回调等地方应用很广。在iOS中，NSNotification &amp; NSNotificationCenter是使用观察者模式来实现的用于跨层传递消息。 什么情况下使用通知观察者模式 ： 定义对象间的一种一对多的依赖关系。当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。 应用场景 : 1&gt; 对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变。 2&gt; 一个对象必须通知其他对象，而它又不需要知道其他对象是什么 3、如何使用通知 1&gt; 向观察者中心添加观察者(2种方式) 12345//观察者接收到通知后执行任务的代码在发送通知的线程中执行addObserver:selector:name:object://观察者接收到通知后执行任务的代码在指定的操作队列中执行addObserverForName:object:queue:usingBlock: 2&gt; 通知中心向观察者发送消息 123postNotification:postNotificationName:object:postNotificationName:object:userInfo: 3&gt; 观察者接收到消息执行相应的行为 4&gt; 在通知中心移除观察者 12removeObserver:removeObserver:name:object: 4、使用通知需要注意哪些细节 1&gt; 通知一定要移除，在dealloc方法里面移除2&gt; 通知有同步通知和异步通知，只不过我们同步通知用得比较多。3&gt; 不能用- (instancetype)init 初始化一个通知 通知的实现原理1、概述 ： 首先，信息的传递就依靠通知(NSNotification),也就是说，通知就是信息(执行的方法，观察者本身(self),参数)的包装。通知中心(NSNotificationCenter)是个单例，向通知中心注册观察者，也就是说，这个通知中心有个集合，这个集合存放着观察者。那么这个集合是什么样的数据类型 ？ 可以这么思考： 发送通知需要name参数，添加观察者也有个name参数，这两个name一样的时候，当发送通知时候，观察者对象就能接受到信息，执行对应的操作。那么这个集合很容易想到就是NSDictionary!key就是name，value就是NSArray(存放数据模型)，里面存放观察者对象。如下图当发送通知时，在通知通知的字典，根据name找到value，这个value就是一数组，数组里面存放数据模型(observer、SEL)。即可执行对应的行为。 实现根据NSNotification&amp;NSNotificationCenter接口给出实现代码,创建两个新类YFLNotification,YFLNotificationCenter，这两个类的接口和苹果提供的接口完全一样，我将根据接口提供的功能给出实现代码。要点是通知中心是单例类，并且通知中心维护了一个包含所有注册的观察者的集合，这里我选择了动态数组来存储所有的观察者，源码如下： 123456789101112131415161718192021222324252627+(YFLNotificationCenter*)defaultCenter&#123; static YFLNotificationCenter *singleton; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; singleton = [[self alloc] initSingleton]; &#125;); return singleton;&#125;- (instancetype)initSingleton&#123; if ([super init]) &#123; _obsetvers = [[NSMutableDictionary alloc]init]; &#125; return self;&#125; 还定义了一个观察者模型用于保存观察者，通知消息名，观察者收到通知后执行代码所在的操作队列和执行代码的回调，模型源码如下： 123456789@interface YFLObserverModel : NSObject@property (nonatomic, strong) id observer; //观察者对象@property (nonatomic, assign) SEL selector; //执行的方法@property (nonatomic, copy) NSString *notificationName; //通知名字@property (nonatomic, strong) id object; //携带参数@property (nonatomic, strong) NSOperationQueue *operationQueue;//队列@property (nonatomic, copy) OperationBlock block; //回调@end12345678910 向通知中心注册观察者，源码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778- (void)addObserver:(id)observer selector:(SEL)aSelector name:(nullable NSString*)aName object:(nullable id)anObject&#123; //如果不存在，那么即创建 if (![self.obsetvers objectForKey:aName]) &#123; NSMutableArray *arrays = [[NSMutableArray alloc]init]; // 创建数组模型 YFLObserverModel *observerModel = [[YFLObserverModel alloc]init]; observerModel.observer = observer; observerModel.selector = aSelector; observerModel.notificationName = aName; observerModel.object = anObject; [arrays addObject:observerModel]; //填充进入数组 [self.obsetvers setObject:arrays forKey:aName]; &#125;else&#123; //如果存在，取出来，继续添加减去即可 NSMutableArray *arrays = (NSMutableArray*)[self.obsetvers objectForKey:aName]; // 创建数组模型 YFLObserverModel *observerModel = [[YFLObserverModel alloc]init]; observerModel.observer = observer; observerModel.selector = aSelector; observerModel.notificationName = aName; observerModel.object = anObject; [arrays addObject:observerModel]; &#125;&#125;- (id &lt;NSObject&gt;)addObserverForName:(nullable NSString *)name object:(nullable id)obj queue:(nullable NSOperationQueue *)queue usingBlock:(void (^)(YFLNotification *note))block&#123; //如果不存在，那么即创建 if (![self.obsetvers objectForKey:name]) &#123; NSMutableArray *arrays = [[NSMutableArray alloc]init]; // 创建数组模型 YFLObserverModel *observerModel = [[YFLObserverModel alloc]init]; observerModel.block = block; observerModel.notificationName = name; observerModel.object = obj; observerModel.operationQueue = queue; [arrays addObject:observerModel]; //填充进入数组 [self.obsetvers setObject:arrays forKey:name]; &#125;else&#123; //如果存在，取出来，继续添加即可 NSMutableArray *arrays = (NSMutableArray*)[self.obsetvers objectForKey:name]; // 创建数组模型 YFLObserverModel *observerModel = [[YFLObserverModel alloc]init]; observerModel.block = block; observerModel.notificationName = name; observerModel.object = obj; observerModel.operationQueue = queue; [arrays addObject:observerModel]; &#125; return nil;&#125; 发送通知有三种方式，最终都是调用- (void)postNotification:(YFLNotification *)notification，源码如下： 123456789101112131415161718192021222324252627282930313233343536- (void)postNotification:(YFLNotification *)notification&#123; //name 取出来对应观察者数组，执行任务 NSMutableArray *arrays = (NSMutableArray*)[self.obsetvers objectForKey:notification.name]; [arrays enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; //取出数据模型 YFLObserverModel *observerModel = obj; id observer = observerModel.observer; SEL secector = observerModel.selector; if (!observerModel.operationQueue) &#123; #pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot; [observer performSelector:secector withObject:notification];#pragma clang diagnostic pop &#125;else&#123; //创建任务 NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123; //这里用block回调出去 observerModel.block(notification); &#125;]; // 如果添加观察者 传入 队列，那么就任务放在队列中执行(子线程异步执行) NSOperationQueue *operationQueue = observerModel.operationQueue; [operationQueue addOperation:operation]; &#125; &#125;];&#125; 移除观察者的代码我就不贴了，一样的思路。 要看源码点击这里[转自 YFL_iOS]]]></content>
      <categories>
        <category>Objective-C语言特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS分类]]></title>
    <url>%2F2018%2F09%2F13%2FiOS%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[概述Category是Objective-C 2.0之后添加的语言特性，Category又叫分类、类别、类目，能够在不改变原来类内容的基础上，为类增加一些方法。除此之外，Category还有以下功能： （1）将类的实现分开写在几个分类里面。这样做的好处: 可以减少单个文件的体积 可以把不同的功能组织到不同的Category里 可以由多个开发者共同完成一个类 可以按需加载想要的category （2）声明私有的方法。 （3）模拟多继承。 Category的定义与使用为了便于理解，这里直接通过一个小例子去讲解其用法。 例如，我们创建一个Person类，并为其创建一个Category命名为MyCategory。创建Category很简单，如下图： 为Person创建一个名为MyCategory的Category后，会自动生成Person+MyCategory.h和Person+MyCategory.m文件。我们在MyCategory中声明和实现一个read方法，如下： 12345678// Person+MyCategory.h#import &quot;Person.h&quot;@interface Person (MyCategory)-(void)read;@end 12345678910// Person+MyCategory.m#import &quot;Person+MyCategory.h&quot;@implementation Person (MyCategory)-(void)read&#123; NSLog(@&quot;调用了MyCategory的read方法！&quot;);&#125;@end 之后我们可以在ViewController或其他地方使用分类中添加的方法，如下： 1234567891011121314151617181920// ViewController.m#import &quot;ViewController.h&quot;#import &quot;Person+MyCategory.h&quot;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; Person *p = [[Person alloc] init]; [p read];&#125;@end 打印结果： 12017-01-09 16:27:39.089 Test[5347:483009] 调用了MyCategory的read方法！ 1 2017-01-09 16:27:39.089 Test [5347:483009] 调用了MyCategory的 read方法！ 使用注意 分类只能增加方法，不能增加成员变量。 分类方法实现中可以访问原来类中声明的成员变量。 分类可以重新实现原来类中的方法，但是会覆盖掉原来的方法，会导致原来的方法没法再使用（实际上并没有真的替换，而是Category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的Category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休，殊不知后面可能还有一样名字的方法）。 当分类、原来类、原来类的父类中有相同方法时，方法调用的优先级：分类(最后参与编译的分类优先) –&gt; 原来类 –&gt; 父类，即先去调用分类中的方法，分类中没这个方法再去原来类中找，原来类中没有再去父类中找。 Category是在runtime时候加载，而不是在编译的时候。 Category与成员变量、属性如果你在你Category的.h文件中写如下代码： 123&#123; NSString *str1;&#125; Xcode会报如下错误: 1Instance variable may not be placed in categories 通过这句话我们知道Xcode是不允许我们在Category中添加成员变量的。 为什么不能添加成员变量呢？ Objective-C类是由Class类型来表示的，它实际上是一个指向objc_class结构体的指针。它的定义如下： 1typedef struct objc_class *Class; objc_class结构体的定义如下： 1234567891011121314struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY;#if !__OBJC2__ Class super_class OBJC2_UNAVAILABLE; // 父类 const char *name OBJC2_UNAVAILABLE; // 类名 long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0 long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识 long instance_size OBJC2_UNAVAILABLE; // 该类的实例变量大小 struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 该类的成员变量链表 struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表 struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存 struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表#endif&#125; OBJC2_UNAVAILABLE; 在上面的objc_class结构体中，ivars是objc_ivar_list（成员变量列表）指针；methodLists是指向objc_method_list指针的指针。在Runtime中，objc_class结构体大小是固定的，不可能往这个结构体中添加数据，只能修改。所以ivars指向的是一个固定区域，只能修改成员变量值，不能增加成员变量个数。methodList是一个二维数组，所以可以修改*methodLists的值来增加成员方法，虽没办法扩展methodLists指向的内存区域，却可以改变这个内存区域的值（存储的是指针）。因此，可以动态添加方法，不能添加成员变量。 Category不能添加成员变量（instance variables），那到底能不能添加属性（property）呢？ 这个我们要从Category的结构体开始分析： 12345678typedef struct category_t &#123; const char *name; //类的名字 classref_t cls; //类 struct method_list_t *instanceMethods; //category中所有给类添加的实例方法的列表 struct method_list_t *classMethods; //category中所有添加的类方法的列表 struct protocol_list_t *protocols; //category实现的所有协议的列表 struct property_list_t *instanceProperties; //category中添加的所有属性&#125; category_t; 从Category的定义也可以看出Category的可为（可以添加实例方法，类方法，甚至可以实现协议，添加属性）和不可为（无法添加实例变量）。 但是为什么网上很多人都说Category不能添加属性呢？ 实际上，Category实际上允许添加属性的，同样可以使用@property，但是不会生成_变量（带下划线的成员变量），也不会生成添加属性的getter和setter方法，所以，尽管添加了属性，也无法使用点语法调用getter和setter方法。但实际上可以使用runtime去实现Category为已有的类添加新的属性并生成getter和setter方法。详细内容可以看峰哥之前的文章：《iOS Runtime之四：关联对象》 四、Category与Extension 1、Extension的基本用法 Extension的创建方法与Category一样，只要在原来选择Category选择Extension即可，比如我们为Person创建一个名为MyExtension的Extension，则最终会生成一个Person_MyExtension.h文件： 1234567// Person_MyExtension.h#import &quot;Person.h&quot;@interface Person ()@end 但要注意的是和Category不同的是它不会生成Person_MyExtension.m文件。之后我们可以在Person_MyExtension.h中直接添加成员变量、属性和方法，如下： 12345678910111213// Person_MyExtension.h#import &quot;Person.h&quot;@interface Person ()&#123; NSString * _address;&#125;@property (nonatomic) NSInteger age;-(NSString*)WhereAmI;@end 他常用的形式不是创建一个单独的文件，而是在实现文件中添加私有的成员变量、属性和方法。例如： 12345678910111213141516171819202122232425// Person.m#import &quot;Person.h&quot;/////////Extension start///////////@interface Person ()&#123; NSString * _address;&#125;@property (nonatomic) NSInteger age;-(NSString*)WhereAmI;@end/////////Extension end///////////@implementation Person-(NSString*)WhereAmI&#123; return @&quot;谁知道你在哪里&quot;;&#125;@end 2、Extension与Category区别 Extension 在编译器决议，是类的一部分，在编译器和头文件的@interface和实现文件里的@implement一起形成了一个完整的类。 伴随着类的产生而产生，也随着类的消失而消失。 Extension一般用来隐藏类的私有消息，你必须有一个类的源码才能添加一个类的Extension，所以对于系统一些类，如NSString，就无法添加类扩展 Category 是运行期决议的 类扩展可以添加实例变量，分类不能添加实例变量 原因：因为在运行期，对象的内存布局已经确定，如果添加实例变量会破坏类的内部布局，这对编译性语言是灾难性的。 原创文章，转载请注明： 转载自李峰峰博客]]></content>
      <categories>
        <category>Objective-C语言特性</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Runtime全方位装逼指南]]></title>
    <url>%2F2018%2F09%2F13%2FRuntime%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A3%85%E9%80%BC%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[�楔子Runtime是什么？见名知意，其概念无非就是“因为 Objective-C 是一门动态语言，所以它需要一个运行时系统……这就是 Runtime 系统”云云。对博主这种菜鸟而言，Runtime 在实际开发中，其实就是一组C语言的函数。胡适说：“多研究些问题，少谈些主义”，云山雾罩的概念听多了总是容易头晕，接下来我们直接从代码入手学习 Runtime。� 1、由objc_msgSend说开去：Objective-C 中的方法调用，不是简单的方法调用，而是发送消息，也就是说，其实 [receiver message] 会被编译器转化为: objc_msgSend(receiver, selector)，何以证明？新建一个类 MyClass，其.m文件如下： 12345678910111213#import &quot;MyClass.h&quot;@implementation MyClass-(instancetype)init&#123; if (self = [super init]) &#123; [self showUserName]; &#125; return self;&#125;-(void)showUserName&#123; NSLog(@&quot;Dave Ping&quot;);&#125; 使用 clang 重写命令: 1$ clang -rewrite-objc MyClass.m 然后在同一目录下会多出一个 MyClass.cpp 文件，双击打开，可以看到 init 方法已经被编译器转化为下面这样： 123456static instancetype _I_MyClass_init(MyClass * self, SEL _cmd) &#123; if (self = ((MyClass *(*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;MyClass&quot;))&#125;, sel_registerName(&quot;init&quot;))) &#123; ((void (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;showUserName&quot;)); &#125; return self;&#125; 我们要找的就是它： 1((void (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;showUserName&quot;)) objc_msgSend 函数被定义在 objc/message.h 目录下，其函数原型是酱紫滴： 1OBJC_EXPORT void objc_msgSend(void /* id self, SEL op, ... */ ) �该函数有两个参数，一个 id 类型，一个 SEL 类型。 2、SELSEL 被定义在 �objc/objc.h 目录下： 1typedef struct objc_selector *SEL; 其实它就是个映射到方法的C字符串，你可以用 Objective-C 编译器命令 @selector() 或者 Runtime 系统的 sel_registerName 函数来获得一个 SEL 类型的方法选择器。 3、id与 SEL 一样，id 也被定义在 �objc/objc.h 目录下： 1typedef struct objc_object *id; id 是一个结构体指针类型，它可以指向 Objective-C 中的任何对象。objc_object 结构体定义如下： 1struct objc_object &#123; Class isa OBJC_ISA_AVAILABILITY;&#125;; 我们通常所说的对象，就长这个样子，这个结构体只有一个成员变量� isa，�对象可以通过 �isa 指针找到其所属的类。isa 是一个 �Class 类型的成员变量，那么 Class 又是什么呢？ 4、ClassClass 也是一个结构体指针类型： 1typedef struct objc_class *Class; objc_class 结构体是酱紫滴： 12345678910111213141516struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY;#if !__OBJC2__ Class super_class OBJC2_UNAVAILABLE; const char *name OBJC2_UNAVAILABLE; long version OBJC2_UNAVAILABLE; long info OBJC2_UNAVAILABLE; long instance_size OBJC2_UNAVAILABLE; struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; struct objc_method_list **methodLists OBJC2_UNAVAILABLE; struct objc_cache *cache OBJC2_UNAVAILABLE; struct objc_protocol_list *protocols OBJC2_UNAVAILABLE;#endif&#125; OBJC2_UNAVAILABLE; 我们通常说的�类就长这样子：·Class 也有一个 isa 指针，指向其所属的元类（meta）.·super_class：指向其超类.·name：是类名.·version：是类的版本信息.·info：是类的详情.·instance_size：是该类的实例对象的大小.·ivars：指向该类的成员变量列表.·methodLists：指向该类的实例方法列表，它将方法选择器和方法实现地址联系起来。methodLists 是指向 ·objc_method_list 指针的指针，也就是说可以动态修改 *methodLists 的值来添加成员方法，这也是 Category 实现的原理，同样解释了 Category 不能添加属性的原因.·cache：Runtime 系统会把被调用的方法存到 �cache 中（理论上讲一个方法如果被调用�，那么它有可能今后还会被调用），下次查找的时候效率更高.·protocols：指向该类的协议列表. 说到这里有点乱了，我们来捋一下，当我们调用一个方法时，其运行过程大致如下： 首先，Runtime 系统会把方法调用转化为消息发送，即 objc_msgSend，并且把方法的调用者，和方法选择器，当做参数传递过去. 此时，方法的调用者会通过 isa 指针来找到其所属的类，然后在 cache 或者 methodLists 中查找该方法，找得到就跳到对应的方法去执行. 如果在类中没有找到该方法，则通过 super_class 往上一级超类查找（如果一直找到 NSObject 都没有找到该方法的话，这种情况，我们放到后面消息转发的时候再说）. 前面我们说 methodLists 指向该类的实例方法列表，实例方法即-方法，那么类方法（+方法）存储在哪儿呢？类方法被存储在元类中，Class 通过 isa 指针即可找到其所属的元类. 上图实线是 super_class 指针，虚线是 isa 指针。根元类的超类是NSObject，而 isa 指向了自己。NSObject 的超类为 nil，也就是它没有超类。 5、使用objc_msgSend前面我们使用 clang 重写命令，看到 Runtime 是如何将方法调用转化为消息发送的。我们也可以依样画葫芦，来学习使用一下 objc_msgSend。新建一个类 TestClass，添加如下方法： 12345678910111213141516171819-(void)showAge&#123; NSLog(@&quot;24&quot;);&#125;-(void)showName:(NSString *)aName&#123; NSLog(@&quot;name is %@&quot;,aName);&#125;-(void)showSizeWithWidth:(float)aWidth andHeight:(float)aHeight&#123; NSLog(@&quot;size is %.2f * %.2f&quot;,aWidth, aHeight);&#125;-(float)getHeight&#123; return 187.5f;&#125;-(NSString *)getInfo&#123; return @&quot;Hi, my name is Dave Ping, I&apos;m twenty-four years old in the year, I like apple, nice to meet you.&quot;;&#125; 我们可以像下面这样，使用 objc_msgSend 依次调用这些方法： 12345678910111213TestClass *objct = [[TestClass alloc] init];((void (*) (id, SEL)) objc_msgSend) (objct, sel_registerName(&quot;showAge&quot;));((void (*) (id, SEL, NSString *)) objc_msgSend) (objct, sel_registerName(&quot;showName:&quot;), @&quot;Dave Ping&quot;);((void (*) (id, SEL, float, float)) objc_msgSend) (objct, sel_registerName(&quot;showSizeWithWidth:andHeight:&quot;), 110.5f, 200.0f);float f = ((float (*) (id, SEL)) objc_msgSend_fpret) (objct, sel_registerName(&quot;getHeight&quot;));NSLog(@&quot;height is %.2f&quot;,f);NSString *info = ((NSString* (*) (id, SEL)) objc_msgSend) (objct, sel_registerName(&quot;getInfo&quot;));NSLog(@&quot;%@&quot;,info); 也许你已经注意到，objc_msgSend 在使用时都被强制转换了一下，这是因为 objc_msgSend 这个函数至少要有两个参数，一个id消息接受者，一个SEL消息名称。后面三个点代表参数，是变参。也就是说方法携带的参数，可以没有，可以有多个。如果我们把调用 showAge 方法改成这样： 1objc_msgSend(objct, sel_registerName(&quot;showAge&quot;)); Xcode 就会报错： 1Too many arguments to function call, expected 0, have 2. 完整的 objc_msgSend 使用代码在�这里。 6、objc_msgSendSuper编译器会根据情况在 objc_msgSend，objc_msgSend_stret，objc_msgSendSuper，objc_msgSendSuper_stret 或 objc_msgSend_fpret 五个方法中选择一个来调用。如果消息是传递给超类，那么会调用 objc_msgSendSuper 方法，如果消息返回值是数据结构，就会调用 objc_msgSendSuper_stret 方法，如果返回值是浮点数，则调用 objc_msgSend_fpret 方法。 这里我们重点说一下 objc_msgSendSuper，objc_msgSendSuper 函数原型如下： 1OBJC_EXPORT void objc_msgSendSuper(void /* struct objc_super *super, SEL op, ... */ ) �当我们调用 [super selector] 时，Runtime 会调用 objc_msgSendSuper 方法，objc_msgSendSuper 方法有两个参数，super 和 op，Runtime 会把 selector 方法选择器赋值给 op。而 super 是一个 objc_super 结构体指针，objc_super 结构体定义如下： 12345678910111213struct objc_super &#123; /// Specifies an instance of a class. __unsafe_unretained id receiver; /// Specifies the particular superclass of the instance to message. #if !defined(__cplusplus) &amp;&amp; !__OBJC2__ /* For compatibility with old objc-runtime.h header */ __unsafe_unretained Class class;#else __unsafe_unretained Class super_class;#endif /* super_class is the first class to search */&#125;; Runtime 会创建一个 objc_spuer 结构体变量，将其地址作为参数（super）传递给 objc_msgSendSuper，并且将 self 赋值给 receiver：super—&gt;receiver=self.举个栗子，问下面的代码输出什么： 123456789101112@implementation Son : Father- (id)init&#123; self = [super init]; if (self) &#123; NSLog(@&quot;%@&quot;, NSStringFromClass([self class])); NSLog(@&quot;%@&quot;, NSStringFromClass([super class])); &#125; return self;&#125;@end 答案是全部输出 Son.使用 clang 重写命令，发现上述代码被转化为: 12NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_0, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;class&quot;))));NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_gm_0jk35cwn1d3326x0061qym280000gn_T_main_a5cecc_mi_1, NSStringFromClass(((Class (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123; (id)self, (id)class_getSuperclass(objc_getClass(&quot;Son&quot;)) &#125;, sel_registerName(&quot;class&quot;)))); 当调用 [super class] 时，会转换成 objc_msgSendSuper 函数： 第一步先构造 objc_super 结构体，结构体第一个成员就是 self。第二个成员是 (id)class_getSuperclass(objc_getClass(“Son”)). 第二步是去 Father 这个类里去找 - (Class)class，没有，然后去 NSObject 类去找，找到了。最后内部是使用 objc_msgSend(objc_super-&gt;receiver, @selector(class)) 去调用，此时已经和 [self class] 调用相同了，所以两个输出结果都是 Son。 7、�对象关联对象关联允许开发者对已经存在的类在 Category 中添加自定义的属性： 1OBJC_EXPORT void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy) __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1); ·object 是源对象.·value 是被关联的对象.·key 是关联的键，objc_getAssociatedObject 方法通过不同的 key 即可取出对应的被关联对象.·policy 是一个枚举值，表示关联对象的行为，从命名就能看出各个枚举值的含义： 1234567891011typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123; OBJC_ASSOCIATION_ASSIGN = 0, /**&lt; Specifies a weak reference to the associated object. */ OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. * The association is not made atomically. */ OBJC_ASSOCIATION_COPY_NONATOMIC = 3, /**&lt; Specifies that the associated object is copied. * The association is not made atomically. */ OBJC_ASSOCIATION_RETAIN = 01401, /**&lt; Specifies a strong reference to the associated object. * The association is made atomically. */ OBJC_ASSOCIATION_COPY = 01403 /**&lt; Specifies that the associated object is copied. * The association is made atomically. */&#125;; 要取出被关联的对象使用 objc_getAssociatedObject 方法即可，要删除一个被关联的对象，使用 objc_setAssociatedObject 方法将对应的 key 设置成 nil 即可： 1objc_setAssociatedObject(self, associatedKey, nil, OBJC_ASSOCIATION_COPY_NONATOMIC); objc_removeAssociatedObjects 方法将会移除源对象中所有的关联对象.举个栗子，假如我们要给 UIButton 添加一个监听单击事件的 block 属性，新建 UIButton 的 Category，其.m文件如下： 12345678910111213141516171819202122232425262728#import &quot;UIButton+ClickBlock.h&quot;#import &lt;objc/runtime.h&gt;static const void *associatedKey = &quot;associatedKey&quot;;@implementation UIButton (ClickBlock)//Category中的属性，只会生成setter和getter方法，不会生成成员变量-(void)setClick:(clickBlock)click&#123; objc_setAssociatedObject(self, associatedKey, click, OBJC_ASSOCIATION_COPY_NONATOMIC); [self removeTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside]; if (click) &#123; [self addTarget:self action:@selector(buttonClick) forControlEvents:UIControlEventTouchUpInside]; &#125;&#125;-(clickBlock)click&#123; return objc_getAssociatedObject(self, associatedKey);&#125;-(void)buttonClick&#123; if (self.click) &#123; self.click(); &#125;&#125;@end 然后在代码中，就可以使用 UIButton 的属性来监听单击事件了： 123456UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];button.frame = self.view.bounds;[self.view addSubview:button];button.click = ^&#123; NSLog(@&quot;buttonClicked&quot;);&#125;; 完整的对象关联代码点这里 8、�自动归档博主在学习 Runtime 之前，归档的时候是酱紫写的： 123456789101112- (void)encodeWithCoder:(NSCoder *)aCoder&#123; [aCoder encodeObject:self.name forKey:@&quot;name&quot;]; [aCoder encodeObject:self.ID forKey:@&quot;ID&quot;];&#125;- (id)initWithCoder:(NSCoder *)aDecoder&#123; if (self = [super init]) &#123; self.ID = [aDecoder decodeObjectForKey:@&quot;ID&quot;]; self.name = [aDecoder decodeObjectForKey:@&quot;name&quot;]; &#125; return self;&#125; 那么问题来了，如果当前 Model 有100个属性的话，就需要写100行这种代码： 1[aCoder encodeObject:self.name forKey:@&quot;name&quot;]; 想想都头疼，通过 Runtime 我们就可以轻松解决这个问题：�1.使用 class_copyIvarList 方法获取当前 Model 的所有成员变量.2.使用 ivar_getName 方法获取成员变量的名称.3.通过 KVC 来读取 Model 的属性值（encodeWithCoder:），以及给 Model 的属性赋值（initWithCoder:）. 举个栗子，新建一个 Model 类，其.m文件如下： 123456789101112131415161718192021222324252627282930313233343536#import &quot;TestModel.h&quot;#import &lt;objc/runtime.h&gt;#import &lt;objc/message.h&gt;@implementation TestModel- (void)encodeWithCoder:(NSCoder *)aCoder&#123; unsigned int outCount = 0; Ivar *vars = class_copyIvarList([self class], &amp;outCount); for (int i = 0; i &lt; outCount; i ++) &#123; Ivar var = vars[i]; const char *name = ivar_getName(var); NSString *key = [NSString stringWithUTF8String:name]; // 注意kvc的特性是，如果能找到key这个属性的setter方法，则调用setter方法 // 如果找不到setter方法，则查找成员变量key或者成员变量_key，并且为其赋值 // 所以这里不需要再另外处理成员变量名称的“_”前缀 id value = [self valueForKey:key]; [aCoder encodeObject:value forKey:key]; &#125;&#125;- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder&#123; if (self = [super init]) &#123; unsigned int outCount = 0; Ivar *vars = class_copyIvarList([self class], &amp;outCount); for (int i = 0; i &lt; outCount; i ++) &#123; Ivar var = vars[i]; const char *name = ivar_getName(var); NSString *key = [NSString stringWithUTF8String:name]; id value = [aDecoder decodeObjectForKey:key]; [self setValue:value forKey:key]; &#125; &#125; return self;&#125;@end 完整的自动归档代码在这里 9、字典与模型互转最开始博主是这样用字典给 Model 赋值的： 1234567-(instancetype)initWithDictionary:(NSDictionary *)dict&#123; if (self = [super init]) &#123; self.age = dict[@&quot;age&quot;]; self.name = dict[@&quot;name&quot;]; &#125; return self;&#125; 可想而知，遇到的问题跟归档时候一样（后来使用MJExtension），这里我们稍微来学习一下其中原理，字典转模型的时候：1.�根据字典的 key 生成 setter 方法.2.使用 objc_msgSend 调用 setter 方法为 Model 的属性赋值（或者 KVC）. 模型转字典的时候：�1.调用 class_copyPropertyList 方法获取当前 Model 的所有属性.2.调用 property_getName 获取属性名称.3.根据属性名称生成 getter 方法.4.使用 objc_msgSend 调用 getter 方法获取属性值（或者 KVC）. 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#import &quot;NSObject+KeyValues.h&quot;#import &lt;objc/runtime.h&gt;#import &lt;objc/message.h&gt;@implementation NSObject (KeyValues)//字典转模型+(id)objectWithKeyValues:(NSDictionary *)aDictionary&#123; id objc = [[self alloc] init]; for (NSString *key in aDictionary.allKeys) &#123; id value = aDictionary[key]; /*判断当前属性是不是Model*/ objc_property_t property = class_getProperty(self, key.UTF8String); unsigned int outCount = 0; objc_property_attribute_t *attributeList = property_copyAttributeList(property, &amp;outCount); objc_property_attribute_t attribute = attributeList[0]; NSString *typeString = [NSString stringWithUTF8String:attribute.value]; if ([typeString isEqualToString:@&quot;@\&quot;TestModel\&quot;&quot;]) &#123; value = [self objectWithKeyValues:value]; &#125; /**********************/ //生成setter方法，并用objc_msgSend调用 NSString *methodName = [NSString stringWithFormat:@&quot;set%@%@:&quot;,[key substringToIndex:1].uppercaseString,[key substringFromIndex:1]]; SEL setter = sel_registerName(methodName.UTF8String); if ([objc respondsToSelector:setter]) &#123; ((void (*) (id,SEL,id)) objc_msgSend) (objc,setter,value); &#125; &#125; return objc;&#125;//模型转字典-(NSDictionary *)keyValuesWithObject&#123; unsigned int outCount = 0; objc_property_t *propertyList = class_copyPropertyList([self class], &amp;outCount); NSMutableDictionary *dict = [NSMutableDictionary dictionary]; for (int i = 0; i &lt; outCount; i ++) &#123; objc_property_t property = propertyList[i]; //生成getter方法，并用objc_msgSend调用 const char *propertyName = property_getName(property); SEL getter = sel_registerName(propertyName); if ([self respondsToSelector:getter]) &#123; id value = ((id (*) (id,SEL)) objc_msgSend) (self,getter); /*判断当前属性是不是Model*/ if ([value isKindOfClass:[self class]] &amp;&amp; value) &#123; value = [value keyValuesWithObject]; &#125; /**********************/ if (value) &#123; NSString *key = [NSString stringWithUTF8String:propertyName]; [dict setObject:value forKey:key]; &#125; &#125; &#125; return dict;&#125;@end 完整代码在这里 10、�动态方法解析前面我们留下了一点东西没说，那就是如果某个对象调用了不存在的方法时会怎么样，一般情况下程序会crash，错误信息类似下面这样： 1unrecognized selector sent to instance 0x7fd0a141afd0 但是在程序crash之前，Runtime 会给我们动态方法解析的机会，消息发送的步骤大致如下： 1.检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain，release 这些函数了. 2.检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉. 3.如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了找得到就跳到对应的函数去执行.如果 cache 找不到就找一下方法分发表. 4.如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止. 这里写图片描述 1.进入 resolveInstanceMethod: 方法，指定是否动态添加方法。若返回NO，则进入下一步，若返回YES，则通过 class_addMethod 函数动态地添加方法，消息得到处理，此流程完毕. 2.resolveInstanceMethod: 方法返回 NO 时，就会进入 forwardingTargetForSelector: 方法，这是 Runtime 给我们的第二次机会，用于指定哪个对象响应这个 selector。返回nil，进入下一步，返回某个对象，则会调用该对象的方法. 3.若 forwardingTargetForSelector: 返回的是nil，则我们首先要通过 methodSignatureForSelector: 来指定方法签名，返回nil，表示不处理，若返回方法签名，则会进入下一步. 4当第 methodSignatureForSelector: 方法返回方法签名后，就会调用 forwardInvocation: 方法，我们可以通过 anInvocation 对象做很多处理，比如修改实现方法，修改响应对象等. 如果到最后，消息还是没有得到响应，程序就会crash，详细代码在这里。 Objective-C Runtime [转自 戴尼玛]（https://www.jianshu.com/p/efeb33712445）]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RunTime应用实例--关于埋点的思考]]></title>
    <url>%2F2018%2F09%2F13%2FRunTime%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B-%E5%85%B3%E4%BA%8E%E5%9F%8B%E7%82%B9%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[埋点是现在很多App中都需要用到的，这个问题可能每个人都能处理，但是怎样来减少埋点所带来的侵入性，怎样用更加简洁的方式来处理埋点问题，怎样减少误埋，如果上线了发现少埋了怎么办？下面是本文讨论的重点（本文Demo已上传GitHub，可以下载讨论）: 什么是埋点？埋点的作用是什么？其实埋点也叫日志上报，其实就是根据需求上报一系列关于用户行为的数据，比如：用户点击了哪个按钮，用户浏览了哪个网站，用户在某个页面停留了多久等数据。这些数据对于运营来说很有用，他们可以用来分析某个功能开发的是不是合理，是不是因为某个地方的不合理而到导致了转化率的下降，从而对我们的App进行相应的改进，我们来看下某个第三方平台提供的埋点实例。 埋点统计字段定义 上图中说明了，某个时间对应的事件ID,以及针对这个事件需要关联的字段。下面是后台系统对某个埋点所做的数据统计:[图片上传失败…(image-5a9faa-1512050850766)] 后台系统对埋点的数据分析 这样我们就可以详细的分析出用户对于App的反馈，从而及时的修改我们的产品。 常规的埋点的处理方式是怎样的?其实很简单，我们就在相应的事件里面加入相关的代码，给服务器上报数据不就得了。如下所示: 123456789101112// 这个一个按钮的响应事件 - (void)someButtonAction:(UIButton *)someButton&#123;// 该按钮需要处理的业务[self upDateSomthing]// 开始埋点// eid:事件id，sa:用户id, cI:当前时间NSDictionary *upLoadDic = @&#123;@&quot;eid&quot;:@&quot;311&quot;,@&quot;sa&quot;:@&quot;706976487532177&quot;,@&quot;cI&quot;:@&quot;2016-6-4 12:11:34&quot;&#125;;[ZHUpLoadManager upLoadWithDic:upLoadDic];&#125; 这样一个埋点问题就解决了，单同时却隐藏着很多问题:1.这样每点击一个一下按钮就请求一次网络会不会出现性能问题？2.如果这样频繁的数据上报会不会消耗更多的用户流量？3.这样的代码能经受住需求的变更吗？比如字段变了，或者你把cI看错了，应该是cl。4.这样的代码会不会造成难以测试？5.这样的频繁上报会不会增加服务器端的压力？6.代码整洁吗？……(程序员的一个好习惯是:这个代码能否经受住需求的变更。) 我们可以怎样优化？ 首先我们可以用一个类，来专门处理这些需要上报的埋点的字段，将这些字段作为常量,例如: 123456789// LogManager.hextern NSString * const kLogEventKey; //事件idextern NSString * const kLogUserIdKey; //用户idextern NSString * const kLogOperationInterval; //操作时间// LogManager.mNSString * const kLogEventKey = @&quot;co&quot;; //事件idNSString * const kLogUserIdKey = @&quot;sa&quot;; //用户idNSString * const kLogOperationInterval = @&quot;cq&quot;; //操作时间 对于用户id，当前时间，用户手机型号，手机品牌，等等与用户所在页面无关的内容，可以用统一的一个类进行处理，将其作为这个类的一个属性，使用getter方法将其相应的数值返回即可(对于恒定不变的可以使用懒加载)。 这样的数据传输策略是有问题的，每次点击都上报，可能一个面需要上报的地方很多，这就会造成很大的性能问题，我们可以先将需要上传的数据缓存起来，然后缓存够50条数据上报一次，或者每隔5分钟上报一次; 为了节省流量我们可以，1）将数据压缩之后再上报,可以参考我的另一篇文章；2）和服务端商量，用尽可能短的字段，如:cityName = @&quot;北京&quot;;变为cn = @&quot;北京&quot;;3)尽量不要上传的频率过高，如第三点。 如何解决代码的整洁，易于测试的问题？请看下面。 怎样使用RunTime来进行优化？我么能不能利用RunTime来给每一个Button的响应事件中添加一段代码，利用这段代码来进行埋点上报呢？或者进一步来说我们能不能给所有继承自UIControl的对象都添加这样一段代码呢？这样我们不是可以捕获所有的用户事件了吗？(其实答案是否定的，看第五条);这时我们可以利用Mehod Swizzle,或者叫方法注入,或者叫hook住了某个方法，听着挺玄乎，其实就是RunTime的一个API,这个API能够交换两个方法的实现。通过这个API,我们可以这样实现方法注入。如下图所示: 方法注入的实现过程 1- (void)sendAction:(SEL)action to:(nullable id)target forEvent:(nullable UIEvent *)event; 这个方法里面嵌入相应的代码片段。我们可以这样:1.将互换方法实现的的这个方法放到一个工具类中，因为我们可能不止一处要用到这种方法。2.我们给UIControl添加一个Category,然后在里面调用这个工具类然后实现所插入的代码片段。这里我们既然可以得到target还有action,那么很多情况下我们就可以唯一确定这个埋点了，那么我们怎样从这么多的埋点中选出这个这个埋点呢？我们其实可以用字典和数组结合的方式将这些方法的target和方法的参数一一存起来，然后在嵌入的方法内部获取其对应的方法，以及其相应的，这个事先配置好的字典和数组的结合放在哪里比较合适呢？plist。下面就以最简单的形式展示这种思路: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586 // 工具类 @interface ZHSwizzleTool : NSObject + (void)zhSwizzleWithClass:(Class)processedClass originalSelector:(SEL)originSelector swizzleSelector:(SEL)swizzlSelector; @end @implementation ZHSwizzleTool +(void)zhSwizzleWithClass:(Class)processedClass originalSelector:(SEL)originSelector swizzleSelector:(SEL)swizzlSelector&#123;Method originMethod = class_getInstanceMethod(processedClass, originSelector);Method swizzleMethod = class_getInstanceMethod(processedClass, swizzlSelector);BOOL didAddMethod = class_addMethod(processedClass, originSelector, method_getImplementation(swizzleMethod), method_getTypeEncoding(swizzleMethod));if (didAddMethod) &#123; class_replaceMethod(processedClass, swizzlSelector, method_getImplementation(originMethod), method_getTypeEncoding(originMethod)); &#125;else&#123; method_exchangeImplementations(originMethod, swizzleMethod); &#125;&#125;@end // 分类@implementation UIControl (ZHSwizzle)+(void)load&#123;static dispatch_once_t onceToken;dispatch_once(&amp;onceToken, ^&#123; SEL originSEL = @selector(sendAction:to:forEvent:); SEL swizzleSEL = @selector(sendSwizzleAction:to:forEvent:); [ZHSwizzleTool zhSwizzleWithClass:[self class]originalSelector:originSEL swizzleSelector:swizzleSEL]; &#125;);&#125; - (void)sendSwizzleAction:(SEL)action to:(id)target forEvent:(UIEvent *)event&#123;// 注意这里调用的是原来的系统方法[self sendSwizzleAction:action to:target forEvent:event];NSString *selectorName = NSStringFromSelector(action);// 这个plist中存储的数据格式是这样的:@&#123;@&quot;someViewController&quot;:@&quot;selector0&quot;:@[para0,para1,para2],@&quot;selector1&quot;:@[para0,para1]]&#125;;NSString *pathString = [[NSBundle mainBundle]pathForResource:@&quot;ZHLogInfo&quot; ofType:@&quot;plist&quot;];NSDictionary *plistDic = [NSDictionary dictionaryWithContentsOfFile:pathString];//1. 获取Target的名字NSDictionary *controllerDic = plistDic[NSStringFromClass([target class])];//2. 获取这个方法对应的参数列表NSArray *parameterArray = controllerDic[selectorName];//3. 实例化数据中心ZHLogDataCenter *logCenter = [[ZHLogDataCenter alloc]init];NSMutableDictionary *logInfoDic = [NSMutableDictionary dictionary];for (NSString *parameter in parameterArray) &#123; NSString *getSelector = [NSString stringWithFormat:@&quot;%@&quot;,parameter]; SEL getSeletor = NSSelectorFromString(getSelector); //4. 从数据中心中获取相应的数据 id value = [logCenter performSelector:getSeletor withObject:nil]; //5.获取成功则将其存入需要上传的字典 if (value) [logInfoDic setObject:value forKey:parameter]; &#125; //6.将这个字典存入埋点管理类，其会将其存入缓存并等待上传[ZHLogCenter zhLogWithInforDictionary:logInfoDic];&#125;@end 下面是这个代码中用到的Plist中的配置: 埋点相关字段的plist配置 在实践中遇到了什么问题以及解决方案？ 并不是所有的事件都是有继承自UIControl的控件来发出的，比如：手势，点击Cell。 并不是所有的按钮点击了之后就立马需要埋点上传？可能在按钮的响应方法中经过了层层的if(){ } else{ }最后才需要埋点。 和事件所在类无关的埋点数据可以同意从ZHLogDataCenter这个类中中取，那么如果这个数据是和所在类有关呢？ 对于代理方法该怎样处理？ 如果很多个按钮对应着一个事件该怎样处理？ 项目中事件的处理方法不尽相同，方法的参数个数不一样，并且方法的返回值也不一样，如何对他们进行统一的处理?下面我们来一一解决这些问题。 问题1：对于不是来自UIControl的子类发出的事件，我们一样是可以进行hooK，只不过方法有所不同。我们在UIControl的分类中写了一段嵌入的代码，确实hook住了系统UIButton的点击事件，是因为UIButton自身会调用UIControl的这个方法。但是对于点击事件，这个是我们自己写的一个方法，它的父类UIViewController中是没有的，所以在执行我们自己点击事件的方法时UIViewController分类中要嵌入的方法是不会被调用的，这时候怎么办，我们可以动态的给我们自己要hook的ViewController动态的添加一个方法，然后就可以hook了（这一点不太好理解）。具体的添加方法，可以参考本文的实例代码。 问题2：对于是否上传和具体的业务逻辑相关的情况，我们可以用方法所在类的一个属性值进行标记，这个属性写在.m文件中即可(KVC可以获取.m文件中的属性值。)，我们先执行要hook那个类的方法，然后根据plist中配置的相关标记进行相应的处理（这里的属性值其实也是不必要的，我么可以根据类名和方法名字符串的哈希生成唯一的key，然后利用runtime自动关联到这个类的mf_condition属性上，这个属性是一个字典其key就是刚才生成的，value就是运行完这个方法之后得到的值，然后这个值再跟plist中的配置做以比较）。 问题3：对于和事件所在类有紧密关联的埋点数据，比如某个页面对应的产品ID,比如某个页面点击了cell，之后这个cell对应的model的ID。这个时候我们可以参考方法2，添加一个属性，用一个属性值来存储这些这些需要上传的具体数据。 问题4：代理方法和手势的处理也是一样的，既然一个类实现了某个代理方法，那么其[someInstance respondsToSelector:someSelector]所返回的BOOL值应该是YES的，然后其它的就和手势的处理是一样的了。 问题5：对于很多按钮对应一个响应事件的情况，我们可以利用RunTime动态的给按钮添加一个属性，比如:buttonIdentifier,这样我们就可以在plist中进行相应的配置，以进行相应的埋点处理。 问题6：这个问题其实就是hook住所有的方法，然后给他们添加同一个代码段的问题，这时候我们可以使用Aspects这个第三方框架： 123456+ (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector withOptions:(AspectOptions)options usingBlock:(id)block error:(NSError **)error &#123;return aspect_add((id)self, selector, options, block, error); &#125; 调用这个接口，因为在UIViewController的分类中调用这个接口的对象不一样，并且我们根据plist中的配置hook的selector不一样，然而最后执行的block却是一样的，这就很好的解决了问题。 最理想的埋点是什么样的？最理想的埋点是动态的，就是PM给我们说需要哪些埋点，然后服务器给我们发一个类似与上文中提到的plist一样的文件，或者一个json,我们存到本地，如果这些埋点没有更新，我们就从本地中读取相应的文件，做相应的埋点，如果有更新，我们重新从服务器获取最新的需要埋的点，然后进行相应埋点。这样就解决了少埋，或者埋点不恰当，需要添加埋点的问题。 其中可能存在的问题是什么？当然这里面也有其难以处理的问题，比如我们使用了一个第三方控件，这个第三方控件的事件回调不是用delegate实现的，而是用block实现的，并且这个埋点和具体的业务逻辑有关系，那么这种方法就难以处理了。 如果很多事件的逻辑处理放到了block中进行，那么也将造难以处理。 [转自 击水湘江]]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Objective-C isa 指针 与 runtime 机制]]></title>
    <url>%2F2018%2F09%2F13%2FObjective-C-isa-%E6%8C%87%E9%92%88-%E4%B8%8E-runtime-%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[一.isa指针要认识什么是isa指针，我们得先明确一点： 在Objective-C中，任何类的定义都是对象。类和类的实例（对象）没有任何本质上的区别。任何对象都有isa指针。 那么什么是类呢？在xcode中用快捷键Shift＋Cmd＋O 打开文件objc.h 能看到类的定义： 可以看出: Class 是一个 objc_class 结构类型的指针, id是一个 objc_object 结构类型的指针. 我们再来看看 objc_class 的定义： 稍微解释一下各个参数的意思： isa：是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。 super_class：父类，如果该类已经是最顶层的根类,那么它为NULL。 version：类的版本信息,默认为0 info：供运行期使用的一些位标识。 instance_size：该类的实例变量大小 ivars：成员变量的数组 再来看看各个类实例变量的继承关系： 每一个对象本质上都是一个类的实例。其中类定义了成员变量和成员方法的列表。对象通过对象的isa指针指向类。 每一个类本质上都是一个对象，类其实是元类（meteClass）的实例。元类定义了类方法的列表。类通过类的isa指针指向元类。 所有的元类最终继承一个根元类，根元类isa指针指向本身，形成一个封闭的内循环。 二.runtime 机制runtime：指一个程序在运行（或者在被执行）的状态。也就是说，当你打开一个程序使它在电脑上运行的时候，那个程序就是处于运行时刻。在一些编程语言中，把某些可以重用的程序或者实例打包或者重建成为“运行库”。这些实例可以在它们运行的时候被连接或者被任何程序调用。 objective-c中runtime：是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。 在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码。 runtime的应用： 1.动态创建一个类(比如KVO的底层实现) 2.动态地为某个类添加属性\方法, 修改属性值\方法 3.遍历一个类的所有成员变量(属性)\所有方法 实质上，以上的是通过相关方法来获取对象或者类的isa指针来实现的。 相关函数 增加 增加函数:class_addMethod 增加实例变量:class_addIvar 增加属性:@dynamic标签，或者class_addMethod，因为属性其实就是由getter和setter函数组成 增加Protocol:classaddProtocol (说实话我真不知道动态增加一个protocol有什么用,--!!) 获取 获取函数列表及每个函数的信息(函数指针、函数名等等):class_getClassMethod method_getName … 获取属性列表及每个属性的信息:class_copyPropertyList property_getName 获取类本身的信息,如类名等：class_getName class_getInstanceSize 获取变量列表及变量信息：class_copyIvarList 获取变量的值 替换 将实例替换成另一个类：object_setClass 替换类方法的定义：class_replaceMethod 4.其他常用方法： 交换两个方法的实现：method_exchangeImplementations. 设置一个方法的实现：method_setImplementation. [转自 曲年]]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Objective-C-消息发送与转发机制原理]]></title>
    <url>%2F2018%2F09%2F13%2FObjective-C-%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E4%B8%8E%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[消息发送和转发流程可以概括为：消息发送（Messaging）是 Runtime 通过 selector 快速查找 IMP 的过程，有了函数指针就可以执行对应的方法实现；消息转发（Message Forwarding）是在查找 IMP 失败后执行一系列转发流程的慢速通道，如果不作转发处理，则会打日志和抛出异常。 本文不讲述开发者在消息发送和转发流程中需要做的事，而是讲述原理。能够很好地阅读本文的前提是你对 Objective-C Runtime 已经有一定的了解，关于什么是消息，Class 的结构，selector、IMP、元类等概念将不再赘述。本文用到的源码为 objc4-680 和 CF-1153.18，逆向 CoreFoundation.framework 的系统版本为 macOS 10.11.5，汇编语言架构为 x86_64。 八面玲珑的 objc_msgSend此函数是消息发送必经之路，但只要一提 objc_msgSend，都会说它的伪代码如下或类似的逻辑，反正就是获取 IMP 并调用： 12345id objc_msgSend(id self, SEL _cmd, ...) &#123; Class class = object_getClass(self); IMP imp = class_getMethodImplementation(class, _cmd); return imp ? imp(self, _cmd, ...) : 0;&#125; 源码解析为啥老用伪代码？因为 objc_msgSend 是用汇编语言写的，针对不同架构有不同的实现。如下为 x86_64 架构下的源码，可以在 objc-msg-x86_64.s 文件中找到，关键代码如下： 1234567891011121314151617181920 ENTRY _objc_msgSend MESSENGER_START NilTest NORMAL GetIsaFast NORMAL // r11 = self-&gt;isa CacheLookup NORMAL // calls IMP on success NilTestSupport NORMAL GetIsaSupport NORMAL// cache miss: go search the method listsLCacheMiss: // isa still in r11 MethodTableLookup %a1, %a2 // r11 = IMP cmp %r11, %r11 // set eq (nonstret) for forwarding jmp *%r11 // goto *imp END_ENTRY _objc_msgSend 这里面包含一些有意义的宏： NilTest 宏，判断被发送消息的对象是否为 nil 的。如果为 nil，那就直接返回 nil。这就是为啥也可以对 nil发消息。 GetIsaFast 宏可以『快速地』获取到对象的 isa 指针地址（放到 r11 寄存器，r10 会被重写；在 arm 架构上是直接赋值到 r9） CacheLookup 这个宏是在类的缓存中查找 selector 对应的 IMP（放到 r10）并执行。如果缓存没中，那就得到 Class 的方法表中查找了。 MethodTableLookup 宏是重点，负责在缓存没命中时在方法表中负责查找 IMP： 12345678910111213141516171819.macro MethodTableLookup MESSENGER_END_SLOW SaveRegisters // _class_lookupMethodAndLoadCache3(receiver, selector, class) movq $0, %a1 movq $1, %a2 movq %r11, %a3 call __class_lookupMethodAndLoadCache3 // IMP is now in %rax movq %rax, %r11 RestoreRegisters.endmacro 从上面的代码可以看出方法查找 IMP 的工作交给了 OC 中的 _class_lookupMethodAndLoadCache3 函数，并将 IMP 返回（从 r11 挪到 rax）。最后在 objc_msgSend 中调用 IMP。 为什么使用汇编语言其实在 objc-msg-x86_64.s 中包含了多个版本的 objc_msgSend 方法，它们是根据返回值的类型和调用者的类型分别处理的： objc_msgSendSuper:向父类发消息，返回值类型为 id objc_msgSend_fpret:返回值类型为 floating-point，其中包含 objc_msgSend_fp2ret 入口处理返回值类型为 long double 的情况 objc_msgSend_stret:返回值为结构体 objc_msgSendSuper_stret:向父类发消息，返回值类型为结构体 当需要发送消息时，编译器会生成中间代码，根据情况分别调用 objc_msgSend, objc_msgSend_stret, objc_msgSendSuper, 或 objc_msgSendSuper_stret 其中之一。 这也是为什么 objc_msgSend 要用汇编语言而不是 OC、C 或 C++ 语言来实现，因为单独一个方法定义满足不了多种类型返回值，有的方法返回 id，有的返回 int。考虑到不同类型参数返回值排列组合映射不同方法签名（method signature）的问题，那 switch 语句得老长了。。。这些原因可以总结为 Calling Convention，也就是说函数调用者与被调用者必须约定好参数与返回值在不同架构处理器上的存取规则，比如参数是以何种顺序存储在栈上，或是存储在哪些寄存器上。除此之外还有其他原因，比如其可变参数用汇编处理起来最方便，因为找到 IMP 地址后参数都在栈上。要是用 C++ 传递可变参数那就悲剧了，prologue 机制会弄乱地址（比如 i386 上为了存储 ebp 向后移位 4byte），最后还要用 epilogue 打扫战场。而且汇编程序执行效率高，在 Objective-C Runtime 中调用频率较高的函数好多都用汇编写的。 使用 lookUpImpOrForward 快速查找 IMP上一节中说到的 _class_lookupMethodAndLoadCache3 函数其实只是简单的调用了 lookUpImpOrForward 函数： 12345IMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)&#123; return lookUpImpOrForward(cls, sel, obj, YES/*initialize*/, NO/*cache*/, YES/*resolver*/);&#125; 注意 lookUpImpOrForward 调用时使用缓存参数传入为 NO，因为之前已经尝试过查找缓存了。IMP lookUpImpOrForward(Class cls, SEL sel, id inst, bool initialize, bool cache, bool resolver)实现了一套查找 IMP 的标准路径，也就是在消息转发（Forward）之前的逻辑。 优化缓存查找&amp;类的初始化先对 debug 模式下的 assert 进行 unlock： 1runtimeLock.assertUnlocked(); runtimeLock 本质上是对 Darwin 提供的线程读写锁 pthread_rwlock_t 的一层封装，提供了一些便捷的方法。 lookUpImpOrForward 接着做了如下两件事： 如果使用缓存（cache 参数为 YES），那就调用 cache_getImp 方法从缓存查找 IMP。cache_getImp 是用汇编语言写的，也可以在 objc-msg-x86_64.s 找到，其依然用了之前说过的 CacheLookup 宏。因为 _class_lookupMethodAndLoadCache3 调用 lookUpImpOrForward 时 cache 参数为 NO，这步直接略过。 如果是第一次用到这个类且 initialize 参数为 YES（initialize &amp;&amp; !cls-&gt;isInitialized()），需要进行初始化工作，也就是开辟一个用于读写数据的空间。先对 runtimeLock 写操作加锁，然后调用 cls 的 initialize方法。如果 sel == initialize 也没关系，虽然 initialize 还会被调用一次，但不会起作用啦，因为 cls-&gt;isInitialized() 已经是 YES 啦。 继续在类的继承体系中查找考虑到运行时类中的方法可能会增加，需要先做读操作加锁，使得方法查找和缓存填充成为原子操作。添加 category 会刷新缓存，之后如果旧数据又被重填到缓存中，category 添加操作就会被忽略掉。 1runtimeLock.read(); 之后的逻辑整理如下： 如果 selector 是需要被忽略的垃圾回收用到的方法，则将 IMP 结果设为 _objc_ignored_method，这是个汇编程序入口，可以理解为一个标记。对此种情况进行缓存填充操作后，跳到第 7 步；否则执行下一步。 查找当前类中的缓存，跟之前一样，使用 cache_getImp 汇编程序入口。如果命中缓存获取到了 IMP，则直接跳到第 7 步；否则执行下一步。 在当前类中的方法列表（method list）中进行查找，也就是根据 selector 查找到 Method 后，获取 Method 中的 IMP（也就是 method_imp 属性），并填充到缓存中。查找过程比较复杂，会针对已经排序的列表使用二分法查找，未排序的列表则是线性遍历。如果成功查找到 Method 对象，就直接跳到第 7 步；否则执行下一步。 在继承层级中递归向父类中查找，情况跟上一步类似，也是先查找缓存，缓存没中就查找方法列表。这里跟上一步不同的地方在于缓存策略，有个 _objc_msgForward_impcache 汇编程序入口作为缓存中消息转发的标记。也就是说如果在缓存中找到了 IMP，但如果发现其内容是 _objc_msgForward_impcache，那就终止在类的继承层级中递归查找，进入下一步；否则跳到第 7 步。 当传入 lookUpImpOrForward 的参数 resolver 为 YES 并且是第一次进入第 5 步时，时进入动态方法解析；否则进入下一步。这步消息转发前的最后一次机会。此时释放读入锁（runtimeLock.unlockRead()），接着间接地发送 +resolveInstanceMethod 或 +resolveClassMethod 消息。这相当于告诉程序员『赶紧用 Runtime 给类里这个 selector 弄个对应的 IMP 吧』，因为此时锁已经 unlock 了所以不会缓存结果，甚至还需要软性地处理缓存过期问题可能带来的错误。这里的业务逻辑稍微复杂些，后面会总结。因为这些工作都是在非线程安全下进行的，完成后需要回到第 1 步再次查找 IMP。 此时不仅没查找到 IMP，动态方法解析也不奏效，只能将 _objc_msgForward_impcache 当做 IMP 并写入缓存。这也就是之前第 4 步中为何查找到 _objc_msgForward_impcache 就表明了要进入消息转发了。 读操作解锁，并将之前找到的 IMP 返回。（无论是正经 IMP 还是不正经的 _objc_msgForward_impcache）这步还偏执地做了一些脑洞略大的 assert，很有趣。 对于第 5 步，其实是直接调用 _class_resolveMethod 函数，在这个函数中实现了复杂的方法解析逻辑。如果 cls 是元类则会发送 +resolveClassMethod，然后根据 lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/) 函数的结果来判断是否发送 +resolveInstanceMethod；如果不是元类，则只需要发送 +resolveInstanceMethod 消息。这里调用 +resolveInstanceMethod 或 +resolveClassMethod 时再次用到了 objc_msgSend，而且第三个参数正是传入 lookUpImpOrForward 的那个 sel。在发送方法解析消息之后还会调用 lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/) 来判断是否已经添加上 sel 对应的 IMP 了，打印出结果。 最后 lookUpImpOrForward 方法也会把真正的 IMP 或者需要消息转发的 _objc_msgForward_impcache 返回，并最终专递到 objc_msgSend 中。而 _objc_msgForward_impcache 会在转化成 _objc_msgForward 或 _objc_msgForward_stret。这个后面会讲解原理。 回顾 objc_msgSend 伪代码回过头来会发现 objc_msgSend 的伪代码描述得很传神啊，因为class_getMethodImplementation 的实现如下： 1234567891011IMP class_getMethodImplementation(Class cls, SEL sel)&#123; IMP imp; if (!cls || !sel) return nil; imp = lookUpImpOrNil(cls, sel, nil, YES/*initialize*/, YES/*cache*/, YES/*resolver*/); // Translate forwarding function to C-callable external version if (!imp) &#123; return _objc_msgForward; &#125; return imp;&#125; lookUpImpOrNil 函数获取不到 IMP 时就返回 _objc_msgForward，后面会讲到它。lookUpImpOrNil 跟 lookUpImpOrForward 的功能很相似，只是将 lookUpImpOrForward 实现中的 _objc_msgForward_impcache 替换成了 nil: 1234567IMP lookUpImpOrNil(Class cls, SEL sel, id inst, bool initialize, bool cache, bool resolver)&#123; IMP imp = lookUpImpOrForward(cls, sel, inst, initialize, cache, resolver); if (imp == _objc_msgForward_impcache) return nil; else return imp;&#125; lookUpImpOrNil 方法可以查找到 selector 对应的 IMP 或是 nil，所以如果不考虑返回值类型为结构体的情况，用那几行伪代码来表示复杂的汇编实现还是挺恰当的。 forwarding 中路漫漫的消息转发objc_msgForward_impcache 的转换_objc_msgForward_impcache 只是个内部的函数指针，只存储于上节提到的类的方法缓存中，需要被转化为 _objc_msgForward 和 _objc_msgForward_stret 才能被外部调用。但在 Mac OS X macOS 10.6 及更早版本的 libobjc.A.dylib 中是不能直接调用的，况且我们根本不会直接用到它。带 stret 后缀的函数依旧是返回值为结构体的版本。 上一节最后讲到如果没找到 IMP，就会将 _objc_msgForward_impcache 返回到 objc_msgSend 函数，而正是因为它是用汇编语言写的，所以将内部使用的 _objc_msgForward_impcache 转化成外部可调用的 _objc_msgForward 或 _objc_msgForward_stret 也是由汇编代码来完成。实现原理很简单，就是增加个静态入口 __objc_msgForward_impcache，然后根据此时 CPU 的状态寄存器的内容来决定转换成哪个。如果是 NE(Not Equal) 则转换成 _objc_msgForward_stret，反之是 EQ(Equal) 则转换成 _objc_msgForward: 12jne __objc_msgForward_stretjmp __objc_msgForward 为何根据状态寄存器的值来判断转换成哪个函数指针呢？回过头来看看 objc_msgSend 中调用完 MethodTableLookup之后干了什么： 123MethodTableLookup %a1, %a2 // r11 = IMPcmp %r11, %r11 // set eq (nonstret) for forwardingjmp *%r11 // goto *imp 再看看返回值为结构体的 objc_msgSend_stret 这里的逻辑： 123MethodTableLookup %a2, %a3 // r11 = IMPtest %r11, %r11 // set ne (stret) for forward; r11!=0jmp *%r11 // goto *imp 稍微懂汇编的人一眼就看明白了，不懂的看注释也懂了，我就不墨迹了。现在总算是把消息转发前的逻辑绕回来构成闭环了。 上一节中提到 class_getMethodImplementation 函数的实现，在查找不到 IMP 时返回 _objc_msgForward，而 _objc_msgForward_stret 正好对应着 class_getMethodImplementation_stret: 123456789IMP class_getMethodImplementation_stret(Class cls, SEL sel)&#123; IMP imp = class_getMethodImplementation(cls, sel); // Translate forwarding function to struct-returning version if (imp == (IMP)&amp;_objc_msgForward /* not _internal! */) &#123; return (IMP)&amp;_objc_msgForward_stret; &#125; return imp;&#125; 也就是说 _objc_msgForward* 系列本质都是函数指针，都用汇编语言实现，都可以与 IMP 类型的值作比较。_objc_msgForward 和 _objc_msgForward_stret 声明在 message.h 文件中。_objc_msgForward_impcache 在早期版本的 Runtime 中叫做 _objc_msgForward_internal。 objc_msgForward 也只是个入口从汇编源码可以很容易看出 _objc_msgForward 和 _objc_msgForward_stret 会分别调用 _objc_forward_handler 和 _objc_forward_handler_stret： 12345678910111213141516ENTRY __objc_msgForward// Non-stret versionmovq __objc_forward_handler(%rip), %r11jmp *%r11END_ENTRY __objc_msgForwardENTRY __objc_msgForward_stret// Struct-return versionmovq __objc_forward_stret_handler(%rip), %r11jmp *%r11END_ENTRY __objc_msgForward_stret 这两个 handler 函数的区别从字面上就能看出来，不再赘述。 也就是说，消息转发过程是现将 _objc_msgForward_impcache 强转成 _objc_msgForward 或 _objc_msgForward_stret，再分别调用 _objc_forward_handler 或 _objc_forward_handler_stret。 objc_setForwardHandler 设置了消息转发的回调在 Objective-C 2.0 之前，默认的 _objc_forward_handler 或 _objc_forward_handler_stret 都是 nil，而新版本的默认实现是这样的： 1234567891011121314151617181920// Default forward handler halts the process.__attribute__((noreturn)) void objc_defaultForwardHandler(id self, SEL sel)&#123; _objc_fatal(&quot;%c[%s %s]: unrecognized selector sent to instance %p &quot; &quot;(no message forward handler is installed)&quot;, class_isMetaClass(object_getClass(self)) ? &apos;+&apos; : &apos;-&apos;, object_getClassName(self), sel_getName(sel), self);&#125;void *_objc_forward_handler = (void*)objc_defaultForwardHandler;#if SUPPORT_STRETstruct stret &#123; int i[100]; &#125;;__attribute__((noreturn)) struct stret objc_defaultForwardStretHandler(id self, SEL sel)&#123; objc_defaultForwardHandler(self, sel);&#125;void *_objc_forward_stret_handler = (void*)objc_defaultForwardStretHandler;#endif objc_defaultForwardHandler 中的 _objc_fatal 作用就是打日志并调用 __builtin_trap() 触发 crash，可以看到我们最熟悉的那句 “unrecognized selector sent to instance” 日志。__builtin_trap() 在杀掉进程的同时还能生成日志，比调用 exit() 更好。objc_defaultForwardStretHandler 就是装模作样搞个形式主义，把 objc_defaultForwardHandler 包了一层。__attribute__((noreturn)) 属性通知编译器函数从不返回值，当遇到类似函数需要返回值而却不可能运行到返回值处就已经退出来的情况，该属性可以避免出现错误信息。这里正适合此属性，因为要求返回结构体哒。 因为默认的 Handler 干的事儿就是打日志触发 crash，我们想要实现消息转发，就需要替换掉 Handler 并赋值给 _objc_forward_handler 或 _objc_forward_handler_stret，赋值的过程就需要用到 objc_setForwardHandler函数，实现也是简单粗暴，就是赋值啊： 1234567void objc_setForwardHandler(void *fwd, void *fwd_stret)&#123; _objc_forward_handler = fwd;#if SUPPORT_STRET _objc_forward_stret_handler = fwd_stret;#endif&#125; 逆向工程助力刨根问底重头戏在于对 objc_setForwardHandler 的调用，以及之后的消息转发调用栈。这回不是在 Objective-C Runtime （libobjc.dylib）中啦，而是在 Core Foundation（CoreFoundation.framework）中。虽然 CF 是开源的，但有意思的是苹果故意在开源的代码中删除了在 CFRuntime.c 文件 __CFInitialize() 中调用 objc_setForwardHandler 的代码。__CFInitialize() 函数是在 CF runtime 连接到进程时初始化调用的。从反编译得到的汇编代码中可以很容易跟 C 源码对比出来，我用红色标出了同一段代码的差异。 汇编语言还是比较好理解的，红色标出的那三个指令就是把 __CF_forwarding_prep_0 和 ___forwarding_prep_1___作为参数调用 objc_setForwardHandler 方法（那么之前那两个 DefaultHandler 卵用都没有咯，反正不出意外会被 CF 替换掉）： 反编译后的 __CFInitialize() 汇编代码 然而在源码中对应的代码却被删掉啦： 苹果提供的 __CFInitialize() 函数源码 在早期版本的 CF 源码中，还是可以看到 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 的声明的，但是不会有实现源码，也没有对 objc_setForwardHandler 的调用。这些细节从函数调用栈中无法看出，只能逆向工程看汇编指令。但从函数调用栈可以看出 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 这两个 Forward Handler 做了啥： 12345678910111213142016-06-14 12:50:15.385 MessageForward[67364:7174239] -[MFObject sendMessage]: unrecognized selector sent to instance 0x1006001a02016-06-14 12:50:15.387 MessageForward[67364:7174239] *** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[MFObject sendMessage]: unrecognized selector sent to instance 0x1006001a0&apos;*** First throw call stack:( 0 CoreFoundation 0x00007fff8fa554f2 __exceptionPreprocess + 178 1 libobjc.A.dylib 0x00007fff98396f7e objc_exception_throw + 48 2 CoreFoundation 0x00007fff8fabf1ad -[NSObject(NSObject) doesNotRecognizeSelector:] + 205 3 CoreFoundation 0x00007fff8f9c5571 ___forwarding___ + 1009 4 CoreFoundation 0x00007fff8f9c50f8 _CF_forwarding_prep_0 + 120 5 MessageForward 0x0000000100000f1f main + 79 6 libdyld.dylib 0x00007fff8bc2c5ad start + 1 7 ??? 0x0000000000000001 0x0 + 1)libc++abi.dylib: terminating with uncaught exception of type NSException 这个日志场景熟悉得不能再熟悉了，可以看出 _CF_forwarding_prep_0 函数调用了 ___forwarding___ 函数，接着又调用了 doesNotRecognizeSelector 方法，最后抛出异常。但是靠这些是无法说服看客的，还得靠逆向工程反编译后再反汇编成伪代码来一探究竟，刨根问底。 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 函数都调用了 ___forwarding___，只是传入参数不同。___forwarding___ 有两个参数，第一个参数为将要被转发消息的栈指针（可以简单理解成 IMP），第二个参数标记是否返回结构体。__CF_forwarding_prep_0 第二个参数传入 0，___forwarding_prep_1___ 传入的是 1，从函数名都能看得出来。下面是这两个函数的伪代码： 12345678910111213141516171819202122232425int __CF_forwarding_prep_0(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) &#123; rax = ____forwarding___(rsp, 0x0); if (rax != 0x0) &#123; // 转发结果不为空，将内容返回 rax = *rax; &#125; else &#123; // 转发结果为空，调用 objc_msgSend(id self, SEL _cmd,...); rsi = *(rsp + 0x8); rdi = *rsp; rax = objc_msgSend(rdi, rsi); &#125; return rax;&#125;int ___forwarding_prep_1___(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) &#123; rax = ____forwarding___(rsp, 0x1); if (rax != 0x0) &#123;// 转发结果不为空，将内容返回 rax = *rax; &#125; else &#123;// 转发结果为空，调用 objc_msgSend_stret(void * st_addr, id self, SEL _cmd, ...); rdx = *(rsp + 0x10); rsi = *(rsp + 0x8); rdi = *rsp; rax = objc_msgSend_stret(rdi, rsi, rdx); &#125; return rax;&#125; 在 x86_64 架构中，rax 寄存器一般是作为返回值，rsp 寄存器是栈指针。在调用 objc_msgSend 函数时，参数 arg0(self), arg1(_cmd), arg2, arg3, arg4, arg5 分别使用寄存器 rdi, rsi, rdx, rcx, r8, r9 的值。在调用 objc_msgSend_stret 时第一个参数为 st_addr，其余参数依次后移。为了能够打包出 NSInvocation 实例并传入后续的 forwardInvocation: 方法，在调用 ___forwarding___ 函数之前会先将所有参数压入栈中。因为寄存器 rsp为栈指针指向栈顶，所以 rsp 的内容就是 self 啦，因为 x86_64 是小端，栈增长方向是由高地址到低地址，所以从栈顶往下移动一个指针需要加 0x8（64bit）。而将参数入栈的顺序是从后往前的，也就是说 arg0 是最后一个入栈的，位于栈顶： 12345678910111213141516171819202122 __CF_forwarding_prep_0:0000000000085080 push rbp ; XREF=___CFInitialize+1380000000000085081 mov rbp, rsp0000000000085084 sub rsp, 0xd0000000000008508b mov qword [ss:rsp+0xb0], rax0000000000085093 movq qword [ss:rsp+0xa0], xmm7000000000008509c movq qword [ss:rsp+0x90], xmm600000000000850a5 movq qword [ss:rsp+0x80], xmm500000000000850ae movq qword [ss:rsp+0x70], xmm400000000000850b4 movq qword [ss:rsp+0x60], xmm300000000000850ba movq qword [ss:rsp+0x50], xmm200000000000850c0 movq qword [ss:rsp+0x40], xmm100000000000850c6 movq qword [ss:rsp+0x30], xmm000000000000850cc mov qword [ss:rsp+0x28], r900000000000850d1 mov qword [ss:rsp+0x20], r800000000000850d6 mov qword [ss:rsp+0x18], rcx00000000000850db mov qword [ss:rsp+0x10], rdx00000000000850e0 mov qword [ss:rsp+0x8], rsi00000000000850e5 mov qword [ss:rsp], rdi00000000000850e9 mov rdi, rsp ; argument #1 for method ____forwarding___00000000000850ec mov rsi, 0x0 ; argument #2 for method ____forwarding___00000000000850f3 call ____forwarding___ 消息转发的逻辑几乎都写在 ___forwarding___ 函数中了，实现比较复杂，反编译出的伪代码也不是很直观。我对 arigrant.com 的结果完善如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485int __forwarding__(void *frameStackPointer, int isStret) &#123; id receiver = *(id *)frameStackPointer; SEL sel = *(SEL *)(frameStackPointer + 8); const char *selName = sel_getName(sel); Class receiverClass = object_getClass(receiver); // 调用 forwardingTargetForSelector: if (class_respondsToSelector(receiverClass, @selector(forwardingTargetForSelector:))) &#123; id forwardingTarget = [receiver forwardingTargetForSelector:sel]; if (forwardingTarget &amp;&amp; forwarding != receiver) &#123; if (isStret == 1) &#123; int ret; objc_msgSend_stret(&amp;ret,forwardingTarget, sel, ...); return ret; &#125; return objc_msgSend(forwardingTarget, sel, ...); &#125; &#125; // 僵尸对象 const char *className = class_getName(receiverClass); const char *zombiePrefix = &quot;_NSZombie_&quot;; size_t prefixLen = strlen(zombiePrefix); // 0xa if (strncmp(className, zombiePrefix, prefixLen) == 0) &#123; CFLog(kCFLogLevelError, @&quot;*** -[%s %s]: message sent to deallocated instance %p&quot;, className + prefixLen, selName, receiver); &lt;breakpoint-interrupt&gt; &#125; // 调用 methodSignatureForSelector 获取方法签名后再调用 forwardInvocation if (class_respondsToSelector(receiverClass, @selector(methodSignatureForSelector:))) &#123; NSMethodSignature *methodSignature = [receiver methodSignatureForSelector:sel]; if (methodSignature) &#123; BOOL signatureIsStret = [methodSignature _frameDescriptor]-&gt;returnArgInfo.flags.isStruct; if (signatureIsStret != isStret) &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: method signature and compiler disagree on struct-return-edness of &apos;%s&apos;. Signature thinks it does%s return a struct, and compiler thinks it does%s.&quot;, selName, signatureIsStret ? &quot;&quot; : not, isStret ? &quot;&quot; : not); &#125; if (class_respondsToSelector(receiverClass, @selector(forwardInvocation:))) &#123; NSInvocation *invocation = [NSInvocation _invocationWithMethodSignature:methodSignature frame:frameStackPointer]; [receiver forwardInvocation:invocation]; void *returnValue = NULL; [invocation getReturnValue:&amp;value]; return returnValue; &#125; else &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: object %p of class &apos;%s&apos; does not implement forwardInvocation: -- dropping message&quot;, receiver, className); return 0; &#125; &#125; &#125; SEL *registeredSel = sel_getUid(selName); // selector 是否已经在 Runtime 注册过 if (sel != registeredSel) &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: selector (%p) for message &apos;%s&apos; does not match selector known to Objective C runtime (%p)-- abort&quot;, sel, selName, registeredSel); &#125; // doesNotRecognizeSelector else if (class_respondsToSelector(receiverClass,@selector(doesNotRecognizeSelector:))) &#123; [receiver doesNotRecognizeSelector:sel]; &#125; else &#123; CFLog(kCFLogLevelWarning , @&quot;*** NSForwarding: warning: object %p of class &apos;%s&apos; does not implement doesNotRecognizeSelector: -- abort&quot;, receiver, className); &#125; // The point of no return. kill(getpid(), 9);&#125; 这么一大坨代码就是整个消息转发路径的逻辑，概括如下： 先调用 forwardingTargetForSelector 方法获取新的 target 作为 receiver 重新执行 selector，如果返回的内容不合法（为 nil 或者跟旧 receiver 一样），那就进入第二步。 调用 methodSignatureForSelector 获取方法签名后，判断返回类型信息是否正确，再调用 forwardInvocation执行 NSInvocation 对象，并将结果返回。如果对象没实现 methodSignatureForSelector 方法，进入第三步。 调用 doesNotRecognizeSelector 方法。 doesNotRecognizeSelector 之前其实还有个判断 selector 在 Runtime 中是否注册过的逻辑，但在我们正常发消息的时候不会出此问题。但如果手动创建一个 NSInvocation 对象并调用 invoke，并将第二个参数设置成一个不存在的 selector，那就会导致这个问题，并输入日志 “does not match selector known to Objective C runtime”。较真儿的读者可能会有疑问：何这段逻辑判断干脆用不到却还存在着？难道除了 __CF_forwarding_prep_0 和 ___forwarding_prep_1___ 函数还有其他函数也调用 ___forwarding___ 么？莫非消息转发还有其他路径？其实并不是！原因是 ___forwarding___ 调用了 ___invoking___ 函数，所以上面的伪代码直接把 ___invoking___ 函数的逻辑也『翻译』过来了。除了 ___forwarding___ 函数，以下方法也会调用___invoking___ 函数: 123-[NSInvocation invoke]-[NSInvocation invokeUsingIMP:]-[NSInvocation invokeSuper] doesNotRecognizeSelector 方法其实在 libobj.A.dylib 中已经废弃了，而是在 CF 框架中实现，而且也不是开源的。从函数调用栈可以发现 doesNotRecognizeSelector 之后会抛出异常，而 Runtime 中废弃的实现只是打日志后直接杀掉进程（__builtin_trap()）。下面是 CF 中实现的伪代码： 123456789101112131415161718192021222324void -[NSObject doesNotRecognizeSelector:](void * self, void * _cmd, void * arg2) &#123; r14 = ___CFFullMethodName([self class], self, arg2); _CFLog(0x3, @&quot;%@: unrecognized selector sent to instance %p&quot;, r14, self, r8, r9, stack[2048]); rbx = _CFMakeCollectable(_CFStringCreateWithFormat(___kCFAllocatorSystemDefault, 0x0, @&quot;%@: unrecognized selector sent to instance %p&quot;)); if (*(int8_t *)___CFOASafe != 0x0) &#123; ___CFRecordAllocationEvent(); &#125; rax = _objc_rootAutorelease(rbx); rax = [NSException exceptionWithName:@&quot;NSInvalidArgumentException&quot; reason:rax userInfo:0x0]; objc_exception_throw(rax); return;&#125;void +[NSObject doesNotRecognizeSelector:](void * self, void * _cmd, void * arg2) &#123; r14 = ___CFFullMethodName([self class], self, arg2); _CFLog(0x3, @&quot;%@: unrecognized selector sent to class %p&quot;, r14, self, r8, r9, stack[2048]); rbx = _CFMakeCollectable(_CFStringCreateWithFormat(___kCFAllocatorSystemDefault, 0x0, @&quot;%@: unrecognized selector sent to class %p&quot;)); if (*(int8_t *)___CFOASafe != 0x0) &#123; ___CFRecordAllocationEvent(); &#125; rax = _objc_rootAutorelease(rbx); rax = [NSException exceptionWithName:@&quot;NSInvalidArgumentException&quot; reason:rax userInfo:0x0]; objc_exception_throw(rax); return;&#125; 也就是说我们可以 override doesNotRecognizeSelector 或者捕获其抛出的异常。在这里还是大有文章可做的。 总结我将整个实现流程绘制出来，过滤了一些不会进入的分支路径和跟主题无关的细节： 消息发送与转发路径流程图 介于国内关于这块知识的好多文章描述不够准确和详细，或是对消息转发的原理描述理解不够深刻，或是侧重贴源码而欠思考，所以我做了一个比较全面详细的讲解。 转自 玉令天下的博客]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[runtime理解]]></title>
    <url>%2F2018%2F09%2F13%2Fruntime%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[什么是Runtime 我们写的代码在程序运行过程中都会被转化成runtime的C代码执行，例如[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));。 OC中一切都被设计成了对象，我们都知道一个类被初始化成一个实例，这个实例是一个对象。实际上一个类本质上也是一个对象，在runtime中用结构体表示。 相关的定义： 1234567891011/// 描述类中的一个方法typedef struct objc_method *Method;/// 实例变量typedef struct objc_ivar *Ivar;/// 类别Categorytypedef struct objc_category *Category;/// 类中声明的属性typedef struct objc_property *objc_property_t; 类在runtime中的表示 12345678910111213141516171819//类在runtime中的表示struct objc_class &#123; Class isa;//指针，顾名思义，表示是一个什么， //实例的isa指向类对象，类对象的isa指向元类#if !__OBJC2__ Class super_class; //指向父类 const char *name; //类名 long version; long info; long instance_size struct objc_ivar_list *ivars //成员变量列表 struct objc_method_list **methodLists; //方法列表 struct objc_cache *cache;//缓存 //一种优化，调用过的方法存入缓存列表，下次调用先找缓存 struct objc_protocol_list *protocols //协议列表 #endif&#125; OBJC2_UNAVAILABLE;/* Use `Class` instead of `struct objc_class *` */ 获取列表有时候会有这样的需求，我们需要知道当前类中每个属性的名字（比如字典转模型，字典的Key和模型对象的属性名字不匹配）。我们可以通过runtime的一系列方法获取类的一些信息（包括属性列表，方法列表，成员变量列表，和遵循的协议列表）。 123456789101112131415161718192021222324252627282930unsigned int count; //获取属性列表 objc_property_t *propertyList = class_copyPropertyList([self class], &amp;count); for (unsigned int i=0; i&lt;count; i++) &#123; const char *propertyName = property_getName(propertyList[i]); NSLog(@&quot;property----&gt;%@&quot;, [NSString stringWithUTF8String:propertyName]); &#125; //获取方法列表 Method *methodList = class_copyMethodList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Method method = methodList[i]; NSLog(@&quot;method----&gt;%@&quot;, NSStringFromSelector(method_getName(method))); &#125; //获取成员变量列表 Ivar *ivarList = class_copyIvarList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Ivar myIvar = ivarList[i]; const char *ivarName = ivar_getName(myIvar); NSLog(@&quot;Ivar----&gt;%@&quot;, [NSString stringWithUTF8String:ivarName]); &#125; //获取协议列表 __unsafe_unretained Protocol **protocolList = class_copyProtocolList([self class], &amp;count); for (unsigned int i; i&lt;count; i++) &#123; Protocol *myProtocal = protocolList[i]; const char *protocolName = protocol_getName(myProtocal); NSLog(@&quot;protocol----&gt;%@&quot;, [NSString stringWithUTF8String:protocolName]); &#125; 在Xcode上跑一下看看输出吧，需要给你当前的类写几个属性，成员变量，方法和协议，不然获取的列表是没有东西的。注意，调用这些获取列表的方法别忘记导入头文件#import &lt;objc/runtime.h&gt;。 方法调用让我们看一下方法调用在运行时的过程（参照前文类在runtime中的表示） 如果用实例对象调用实例方法，会到实例的isa指针指向的对象（也就是类对象）操作。如果调用的是类方法，就会到类对象的isa指针指向的对象（也就是元类对象）中操作。 首先，在相应操作的对象中的缓存方法列表中找调用的方法，如果找到，转向相应实现并执行。 如果没找到，在相应操作的对象中的方法列表中找调用的方法，如果找到，转向相应实现执行 如果没找到，去父类指针所指向的对象中执行1，2. 以此类推，如果一直到根类还没找到，转向拦截调用。 如果没有重写拦截调用的方法，程序报错。 以上的过程给我带来的启发： 重写父类的方法，并没有覆盖掉父类的方法，只是在当前类对象中找到了这个方法后就不会再去父类中找了。 如果想调用已经重写过的方法的父类的实现，只需使用super这个编译器标识，它会在运行时跳过在当前的类对象中寻找方法的过程。 拦截调用在方法调用中说到了，如果没有找到方法就会转向拦截调用。那么什么是拦截调用呢。拦截调用就是，在找不到调用的方法程序崩溃之前，你有机会通过重写NSObject的四个方法来处理。 12345+ (BOOL)resolveClassMethod:(SEL)sel;+ (BOOL)resolveInstanceMethod:(SEL)sel;//后两个方法需要转发到其他的类处理- (id)forwardingTargetForSelector:(SEL)aSelector;- (void)forwardInvocation:(NSInvocation *)anInvocation; 第一个方法是当你调用一个不存在的类方法的时候，会调用这个方法，默认返回NO，你可以加上自己的处理然后返回YES。 第二个方法和第一个方法相似，只不过处理的是实例方法。 第三个方法是将你调用的不存在的方法重定向到一个其他声明了这个方法的类，只需要你返回一个有这个方法的target。 第四个方法是将你调用的不存在的方法打包成NSInvocation传给你。做完你自己的处理后，调用invokeWithTarget:方法让某个target触发这个方法。 动态添加方法重写了拦截调用的方法并且返回了YES，我们要怎么处理呢？有一个办法是根据传进来的SEL类型的selector动态添加一个方法。 首先从外部隐式调用一个不存在的方法： 12//隐式调用方法[target performSelector:@selector(resolveAdd:) withObject:@&quot;test&quot;]; 然后，在target对象内部重写拦截调用的方法，动态添加方法。 1234567891011void runAddMethod(id self, SEL _cmd, NSString *string)&#123; NSLog(@&quot;add C IMP &quot;, string);&#125;+ (BOOL)resolveInstanceMethod:(SEL)sel&#123; //给本类动态添加一个方法 if ([NSStringFromSelector(sel) isEqualToString:@&quot;resolveAdd:&quot;]) &#123; class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;); &#125; return YES;&#125; 其中class_addMethod的四个参数分别是： Class cls给哪个类添加方法，本例中是self SEL name添加的方法，本例中是重写的拦截调用传进来的selector。 IMP imp方法的实现，C方法的方法实现可以直接获得。如果是OC方法，可以用+ (IMP)instanceMethodForSelector:(SEL)aSelector;获得方法的实现。 &quot;v@:*&quot;方法的签名，代表有一个参数的方法。 关联对象现在你准备用一个系统的类，但是系统的类并不能满足你的需求，你需要额外添加一个属性。这种情况的一般解决办法就是继承。但是，只增加一个属性，就去继承一个类，总是觉得太麻烦类。这个时候，runtime的关联属性就发挥它的作用了。 123456//首先定义一个全局变量，用它的地址作为关联对象的keystatic char associatedObjectKey;//设置关联对象objc_setAssociatedObject(target, &amp;associatedObjectKey, @&quot;添加的字符串属性&quot;, OBJC_ASSOCIATION_RETAIN_NONATOMIC); //获取关联对象NSString *string = objc_getAssociatedObject(target, &amp;associatedObjectKey);NSLog(@&quot;AssociatedObject = %@&quot;, string); objc_setAssociatedObject的四个参数： id object给谁设置关联对象。 const void *key关联对象唯一的key，获取时会用到。 id value关联对象。 objc_AssociationPolicy关联策略，有以下几种策略： 1234567enum &#123; OBJC_ASSOCIATION_ASSIGN = 0, OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, OBJC_ASSOCIATION_COPY_NONATOMIC = 3, OBJC_ASSOCIATION_RETAIN = 01401, OBJC_ASSOCIATION_COPY = 01403 &#125;; 如果你熟悉OC，看名字应该知道这几种策略的意思了吧。 objc_getAssociatedObject的两个参数。 id object获取谁的关联对象。 const void *key根据这个唯一的key获取关联对象。 其实，你还可以把添加和获取关联对象的方法写在你需要用到这个功能的类的类别中，方便使用。 12345678//添加关联对象- (void)addAssociatedObject:(id)object&#123; objc_setAssociatedObject(self, @selector(getAssociatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;//获取关联对象- (id)getAssociatedObject&#123; return objc_getAssociatedObject(self, _cmd);&#125; 注意：这里面我们把getAssociatedObject方法的地址作为唯一的key，_cmd代表当前调用方法的地址。 方法交换方法交换，顾名思义，就是将两个方法的实现交换。例如，将A方法和B方法交换，调用A方法的时候，就会执行B方法中的代码，反之亦然。话不多说，这是参考Mattt大神在NSHipster上的文章自己写的代码。 123456789101112131415161718192021222324252627282930313233343536373839404142#import &quot;UIViewController+swizzling.h&quot;#import &lt;objc/runtime.h&gt;@implementation UIViewController (swizzling)//load方法会在类第一次加载的时候被调用//调用的时间比较靠前，适合在这个方法里做方法交换+ (void)load&#123; //方法交换应该被保证，在程序中只会执行一次 static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; //获得viewController的生命周期方法的selector SEL systemSel = @selector(viewWillAppear:); //自己实现的将要被交换的方法的selector SEL swizzSel = @selector(swiz_viewWillAppear:); //两个方法的Method Method systemMethod = class_getInstanceMethod([self class], systemSel); Method swizzMethod = class_getInstanceMethod([self class], swizzSel); //首先动态添加方法，实现是被交换的方法，返回值表示添加成功还是失败 BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(swizzMethod), method_getTypeEncoding(swizzMethod)); if (isAdd) &#123; //如果成功，说明类中不存在这个方法的实现 //将被交换方法的实现替换到这个并不存在的实现 class_replaceMethod(self, swizzSel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod)); &#125;else&#123; //否则，交换两个方法的实现 method_exchangeImplementations(systemMethod, swizzMethod); &#125; &#125;);&#125;- (void)swiz_viewWillAppear:(BOOL)animated&#123; //这时候调用自己，看起来像是死循环 //但是其实自己的实现已经被替换了 [self swiz_viewWillAppear:animated]; NSLog(@&quot;swizzle&quot;);&#125;@end 在一个自己定义的viewController中重写viewWillAppear 1234- (void)viewWillAppear:(BOOL)animated&#123; [super viewWillAppear:animated]; NSLog(@&quot;viewWillAppear&quot;);&#125; Run起来看看输出吧！ 我的理解： 方法交换对于我来说更像是实现一种思想的最佳技术：AOP面向切面编程。 既然是切面，就一定不要忘记，交换完再调回自己。 一定要保证只交换一次，否则就会很乱。 最后，据说这个技术很危险，谨慎使用。 [转自 兴宇是谁]]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[事件的传递和响应机制]]></title>
    <url>%2F2018%2F09%2F12%2F%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[事件的生命周期 事件的产生和传递（事件如何从父控件传递到子控件并寻找到最合适的view、寻找最合适的view的底层实现、拦截事件的处理）-&gt;找到最合适的view后事件的处理（touches方法的重写，也就是事件的响应） ​ 其中重点和难点是： 1.如何寻找最合适的view 2.寻找最合适的view的底层实现（hitTest:withEvent:底层实现） iOS中的事件iOS中的事件可以分为3大类型： 触摸事件 加速计事件 远程控制事件 本文只讨论接触事件 响应者对象(UIResponder)学习触摸事件首先要了解一个比较重要的概念-响应者对象（UIResponder）。 在iOS中不是任何对象都能处理事件，只有继承了UIResponder的对象才能接受并处理事件，我们称之为“响应者对象”。以下都是继承自UIResponder的，所以都能接收并处理事件。 UIApplication UIViewController UIView 那么为什么继承自UIResponder的类就能够接收并处理事件呢？ 因为UIResponder中提供了以下4个对象方法来处理触摸事件。 12345678910111213141516UIResponder内部提供了以下方法来处理事件触摸事件- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;加速计事件- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event;- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event;- (void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event;远程控制事件- (void)remoteControlReceivedWithEvent:(UIEvent *)event;作者：VV木公子链接：https://www.jianshu.com/p/2e074db792ba來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 iOS中的事件的产生和传递事件的产生发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中,为什么是队列而不是栈？因为队列的特点是FIFO，即先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。 UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。 事件的传递 触摸事件的传递是从父控件传递到子控件 也就是UIApplication-&gt;window-&gt;寻找处理事件最合适的view 注 意: 如果父控件不能接受触摸事件，那么子控件就不可能接收到触摸事件 应用如何找到最合适的控件来处理事件？1.首先判断主窗口（keyWindow）自己是否能接受触摸事件 2.判断触摸点是否在自己身上 3.子控件数组中从后往前遍历子控件，重复前面的两个步骤（所谓从后往前遍历子控件，就是首先查找子控件数组中最后一个元素，然后执行1、2步骤） 4.view，比如叫做fitView，那么会把这个事件交给这个fitView，再遍历这个fitView的子控件，直至没有更合适的view为止。 5.如果没有符合条件的子控件，那么就认为自己最合适处理这个事件，也就是自己是最合适的view。 UIView不能接收触摸事件的三种情况： 不允许交互：userInteractionEnabled = NO 隐藏：如果把父控件隐藏，那么子控件也会隐藏，隐藏的控件不能接受事件 透明度：如果设置一个控件的透明度&lt;0.01，会直接影响子控件的透明度。alpha：0.0~0.01为透明。 注 意:默认UIImageView不能接受触摸事件，因为不允许交互，即userInteractionEnabled = NO。所以如果希望UIImageView可以交互，需要设置UIImageView的userInteractionEnabled = YES。 总结一下1.点击一个UIView或产生一个触摸事件A，这个触摸事件A会被添加到由UIApplication管理的事件队列中（即，首先接收到事件的是UIApplication）。2.UIApplication会从事件对列中取出最前面的事件（此处假设为触摸事件A），把事件A传递给应用程序的主窗口（keyWindow）。3.窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件。（至此，第一步已完成） (重难点）如何寻找最合适的view应用如何找到最合适的控件来处理事件？1.首先判断主窗口（keyWindow）自己是否能接受触摸事件2.触摸点是否在自己身上3.从后往前遍历子控件，重复前面的两个步骤（首先查找数组中最后一个元素）4.如果没有符合条件的子控件，那么就认为自己最合适处理 详述：1.主窗口接收到应用程序传递过来的事件后，首先判断自己能否接手触摸事件。如果能，那么在判断触摸点在不在窗口自己身上 2.如果触摸点也在窗口身上，那么窗口会从后往前遍历自己的子控件（遍历自己的子控件只是为了寻找出来最合适的view） 3.遍历到每一个子控件后，又会重复上面的两个步骤（传递事件给子控件，1.判断子控件能否接受事件，2.点在不在子控件上） 4.如此循环遍历子控件，直到找到最合适的view，如果没有更合适的子控件，那么自己就成为最合适的view。找到最合适的view后，就会调用该view的touches方法处理具体的事件。所以，只有找到最合适的view，把事件传递给最合适的view后，才会调用touches方法进行接下来的事件处理。找不到最合适的view，就不会调用touches方法进行事件处理。注意：之所以会采取从后往前遍历子控件的方式寻找最合适的view只是为了做一些循环优化。因为相比较之下，后添加的view在上面，降低循环次数。 寻找最合适的view底层剖析两个重要的方法：hitTest:withEvent:方法pointInside方法 3.3.1.1.hitTest：withEvent：方法什么时候调用？ 只要事件一传递给一个控件,这个控件就会调用他自己的hitTest：withEvent：方法 作用 寻找并返回最合适的view(能够响应事件的那个最合适的view) 注 意：不管这个控件能不能处理事件，也不管触摸点在不在这个控件上，事件都会先传递给这个控件，随后再调用hitTest:withEvent:方法 拦截事件的处理 正因为hitTest：withEvent：方法可以返回最合适的view，所以可以通过重写hitTest：withEvent：方法，返回指定的view作为最合适的view。 不管点击哪里，最合适的view都是hitTest：withEvent：方法中返回的那个view。 通过重写hitTest：withEvent：，就可以拦截事件的传递过程，想让谁处理事件谁就处理事件。 事件传递给谁，就会调用谁的hitTest:withEvent:方法。注 意：如果hitTest:withEvent:方法中返回nil，那么调用该方法的控件本身和其子控件都不是最合适的view，也就是在自己身上没有找到更合适的view。那么最合适的view就是该控件的父控件。所以事件的传递顺序是这样的： 产生触摸事件-&gt;UIApplication事件队列-&gt;[UIWindow hitTest:withEvent:]-&gt;返回更合适的view-&gt;[子控件 hitTest:withEvent:]-&gt;返回最合适的view 事件传递给窗口或控件的后，就调用hitTest:withEvent:方法寻找更合适的view。所以是，先传递事件，再根据事件在自己身上找更合适的view。不管子控件是不是最合适的view，系统默认都要先把事件传递给子控件，经过子控件调用子控件自己的hitTest:withEvent:方法验证后才知道有没有更合适的view。即便父控件是最合适的view了，子控件的hitTest:withEvent:方法还是会调用，不然怎么知道有没有更合适的！即，如果确定最终父控件是最合适的view，那么该父控件的子控件的hitTest:withEvent:方法也是会被调用的。技巧：想让谁成为最合适的view就重写谁自己的父控件的hitTest:withEvent:方法返回指定的子控件，或者重写自己的hitTest:withEvent:方法 return self。但是，建议在父控件的hitTest:withEvent:中返回子控件作为最合适的view！ 原因在于在自己的hitTest:withEvent:方法中返回自己有时候会出现问题。因为会存在这么一种情况：当遍历子控件时，如果触摸点不在子控件A自己身上而是在子控件B身上，还要要求返回子控件A作为最合适的view，采用返回自己的方法可能会导致还没有来得及遍历A自己，就有可能已经遍历了点真正所在的view，也就是B。这就导致了返回的不是自己而是触摸点真正所在的view。所以还是建议在父控件的hitTest:withEvent:中返回子控件作为最合适的view！例如：whiteView有redView和greenView两个子控件。redView先添加，greenView后添加。如果要求无论点击那里都要让redView作为最合适的view（把事件交给redView来处理）那么只能在whiteView的hitTest:withEvent:方法中return self.subViews[0];这种情况下在redView的hitTest:withEvent:方法中return self;是不好使的！ 123456789101112131415161718192021// 这里redView是whiteView的第0个子控件#import &quot;redView.h&quot;@implementation redView- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; return self;&#125;- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@&quot;red-touch&quot;);&#125;@end// 或者#import &quot;whiteView.h&quot;@implementation whiteView- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; return self.subviews[0];&#125;- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@&quot;white-touch&quot;);&#125;@end 特殊情况：谁都不能处理事件，窗口也不能处理。 重写window的hitTest：withEvent：方法return nil 只能有窗口处理事件。 控制器的view的hitTest：withEvent：方法return nil或者window的hitTest：withEvent：方法return self return nil的含义：hitTest：withEvent：中return nil的意思是调用当前hitTest：withEvent：方法的view不是合适的view，子控件也不是合适的view。如果同级的兄弟控件也没有合适的view，那么最合适的view就是父控件。 寻找最合适的view底层剖析之hitTest：withEvent：方法底层做法/** hitTest:withEvent:方法底层实现**/ 12345678910111213141516171819202122232425262728293031323334353637383940#import &quot;WSWindow.h&quot;@implementation WSWindow// 什么时候调用:只要事件一传递给一个控件，那么这个控件就会调用自己的这个方法// 作用:寻找并返回最合适的view// UIApplication -&gt; [UIWindow hitTest:withEvent:]寻找最合适的view告诉系统// point:当前手指触摸的点// point:是方法调用者坐标系上的点- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; // 1.判断下窗口能否接收事件 if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) return nil; // 2.判断下点在不在窗口上 // 不在窗口上 if ([self pointInside:point withEvent:event] == NO) return nil; // 3.从后往前遍历子控件数组 int count = (int)self.subviews.count; for (int i = count - 1; i &gt;= 0; i--) &#123; // 获取子控件 UIView *childView = self.subviews[i]; // 坐标系的转换,把窗口上的点转换为子控件上的点 // 把自己控件上的点转换成子控件上的点 CGPoint childP = [self convertPoint:point toView:childView]; UIView *fitView = [childView hitTest:childP withEvent:event]; if (fitView) &#123; // 如果能找到最合适的view return fitView; &#125; &#125; // 4.没有找到更合适的view，也就是没有比自己更合适的view return self; &#125; // 作用:判断下传入过来的点在不在方法调用者的坐标系上 // point:是方法调用者坐标系上的点 //- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event //&#123; // return NO; //&#125; - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@&quot;%s&quot;,__func__); &#125; @end hit:withEvent:方法底层会调用pointInside:withEvent:方法判断点在不在方法调用者的坐标系上。 3.3.1.2.pointInside:withEvent:方法pointInside:withEvent:方法判断点在不在当前view上（方法调用者的坐标系上）如果返回YES，代表点在方法调用者的坐标系上;返回NO代表点不在方法调用者的坐标系上，那么方法调用者也就不能处理事件。 3.3.2.练习屏幕上现在有一个viewA，viewA有一个subView叫做viewB，要求触摸viewB时,viewB会响应事件，而触摸viewA本身，不会响应该事件。如何实现？ 1234567- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123; UIView *view = [super hitTest:point withEvent:event]; if (view == self) &#123; return nil; &#125; return view;&#125; 事件的响应触摸事件处理的整体过程1&gt;用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件2&gt;找到最合适的视图控件后，就会调用控件的touches方法来作具体的事件处理touchesBegan…touchesMoved…touchedEnded…3&gt;这些touches方法的默认做法是将事件顺着响应者链条向上传递（也就是touch方法默认不处理事件，只传递事件），将事件交给上一个响应者进行处理 响应者链条示意图响应者链条：在iOS程序中无论是最后面的UIWindow还是最前面的某个按钮，它们的摆放是有前后关系的，一个控件可以放到另一个控件上面或下面，那么用户点击某个控件时是触发上面的控件还是下面的控件呢，这种先后关系构成一个链条就叫“响应者链”。也可以说，响应者链是由多个响应者对象连接起来的链条。在iOS中响应者链的关系可以用下图表示： 响应者对象： 作用： 如何判断上一个响应者 1&gt; 如果当前这个view是控制器的view,那么控制器就是上一个响应者 2&gt; 如果当前这个view不是控制器的view,那么父控件就是上一个响应者 响应者链的事件传递过程: 1&gt;如果当前view是控制器的view，那么控制器就是上一个响应者，事件就传递给控制器；如果当前view不是控制器的view，那么父视图就是当前view的上一个响应者，事件就传递给它的父视图 2&gt;在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理 3&gt;如果window对象也不处理，则其将事件或消息传递给UIApplication对象 4&gt;如果UIApplication也不能处理该事件或消息，则将其丢弃 事件处理的整个流程总结： 1.触摸屏幕产生触摸事件后，触摸事件会被添加到由UIApplication管理的事件队列中（即，首先接收到事件的是UIApplication）。 2.UIApplication会从事件队列中取出最前面的事件，把事件传递给应用程序的主窗口（keyWindow）。 3.主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件。（至此，第一步已完成) 4.最合适的view会调用自己的touches方法处理事件 5.touches默认做法是把事件顺着响应者链条向上抛。touches的默认做法： 1234567891011#import &quot;WSView.h&quot;@implementation WSView //只要点击控件,就会调用touchBegin,如果没有重写这个方法,自己处理不了触摸事件// 上一个响应者可能是父控件- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; // 默认会把事件传递给上一个响应者,上一个响应者是父控件,交给父控件处理[super touchesBegan:touches withEvent:event]; // 注意不是调用父控件的touches方法，而是调用父类的touches方法// super是父类 superview是父控件 &#125;@end 事件的传递与响应：1、当一个事件发生后，事件会从父控件传给子控件，也就是说由UIApplication -&gt; UIWindow -&gt; UIView -&gt; initial view,以上就是事件的传递，也就是寻找最合适的view的过程。 2、接下来是事件的响应。首先看initial view能否处理这个事件，如果不能则会将事件传递给其上级视图（inital view的superView）；如果上级视图仍然无法处理则会继续往上传递；一直传递到视图控制器view controller，首先判断视图控制器的根视图view是否能处理此事件；如果不能则接着判断该视图控制器能否处理此事件，如果还是不能则继续向上传 递；（对于第二个图视图控制器本身还在另一个视图控制器中，则继续交给父视图控制器的根视图，如果根视图不能处理则交给父视图控制器处理）；一直到 window，如果window还是不能处理此事件则继续交给application处理，如果最后application还是不能处理此事件则将其丢弃 3、在事件的响应中，如果某个控件实现了touches…方法，则这个事件将由该控件来接受，如果调用了[supertouches….];就会将事件顺着响应者链条往上传递，传递给上一个响应者；接着就会调用上一个响应者的touches….方法 如何做到一个事件多个对象处理：因为系统默认做法是把事件上抛给父控件，所以可以通过重写自己的touches方法和父控件的touches方法来达到一个事件多个对象处理的目的。 123456- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; // 1.自己先处理事件...NSLog(@&quot;do somthing...&quot;);// 2.再调用系统的默认做法，再把事件交给上一个响应者处理[super touchesBegan:touches withEvent:event]; &#125; 事件的传递和响应的区别：事件的传递是从上到下（父控件到子控件），事件的响应是从下到上（顺着响应者链条向上传递：子控件到父控件。 转自VV木公子（简书作者）]]></content>
      <categories>
        <category>UI视图</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[UITableView相关]]></title>
    <url>%2F2018%2F09%2F11%2FUITableView%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[前言先来点概念性的东西， 卡顿&amp;掉帧 概念：在规定的16.7ms之内，下一帧VSync信号到来之前，并没有CPU和GPU共同完成下一帧画面的合成，于是就会造成卡顿和掉帧 滑动优化方案 CPU 对象创建、调整、销毁 预排版（布局计算、文本计算） 预渲染（文本等异步绘制，图片编解码等） GPU 纹理渲染 视图混合 离屏渲染 概念：当我们处理图层的属性在被指定为未被预合成之前不能直接在屏幕上显示，就触发了离屏渲染。离屏渲染的概念起源与GPU层面，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作 何时会触发 圆角（当和maskToBounds一起使用时） 图层蒙版 阴影 光栅化 为何要避免 上下文切换，GPU额外的开销 创建新的渲染缓冲区，内存损耗 高级回答：触发离屏渲染会增加GPU的工作量，而增加了GPU的工作量很有可能导致CPU和GPU的工作总耗时超过了16.67ms，有可能导致UI的卡顿和掉帧 UITableView性能优化当获取到 API JSON 数据后，我会把每条 Cell 需要的数据都在后台线程计算并封装为一个布局对象 CellLayout。CellLayout 包含所有文本的 CoreText 排版结果、Cell 内部每个控件的高度、Cell 的整体高度。每个 CellLayout 的内存占用并不多，所以当生成后，可以全部缓存到内存，以供稍后使用。这样，TableView 在请求各个高度函数时，不会消耗任何多余计算量；当把 CellLayout 设置到 Cell 内部时，Cell 内部也不用再计算布局了。 缓存高度对于通常的 TableView 来说，提前在后台计算好布局结果是非常重要的一个性能优化点。为了达到最高性能，你可能需要牺牲一些开发速度，不要用 Autolayout 等技术，少用 UILabel 等文本控件。但如果你对性能的要求并不那么高，可以尝试用 TableView 的预估高度的功能，并把每个 Cell 高度缓存下来。这里有个来自百度知道团队的开源项目可以很方便的帮你实现这一点：FDTemplateLayoutCell。 tableviewcell高度缓存具体实现方式 预渲染微博的头像在某次改版中换成了圆形，所以我也跟进了一下。当头像下载下来后，我会在后台线程将头像预先渲染为圆形并单独保存到一个 ImageCache 中去。 对于 TableView 来说，Cell 内容的离屏渲染会带来较大的 GPU 消耗。在 Twitter Demo 中，我为了图省事儿用到了不少 layer 的圆角属性，你可以在低性能的设备（比如 iPad 3）上快速滑动一下这个列表，能感受到虽然列表并没有较大的卡顿，但是整体的平均帧数降了下来。用 Instument 查看时能够看到 GPU 已经满负荷运转，而 CPU 却比较清闲。为了避免离屏渲染，你应当尽量避免使用 layer 的 border、corner、shadow、mask 等技术，而尽量在后台线程预先绘制好对应内容。 离屏渲染​ 在使用圆角、阴影和遮罩等视图功能的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，所有就需要在屏幕外的上下文中渲染，即离屏渲染。 离屏渲染产生原因离屏渲染之所以会特别消耗性能，是因为要创建一个屏幕外的缓冲区，然后从当屏缓冲区切换到屏幕外的缓冲区，然后再完成渲染；其中，创建缓冲区和切换上下文最消耗性能，而绘制其实不是性能损耗的主要原因。 设置了以下属性时，就会触发离屏绘制： shouldRasterize（光栅化） masks（遮罩） shadows（阴影） edge antialiasing（抗锯齿） group opacity（不透明） 复杂形状设置圆角等 渐变 光栅化光栅化概念:将图转化为一个个栅格组成的图象。 光栅化特点:每个元素对应帧缓冲区中的一像素。 ​ shouldRasterize = YES在其他属性触发离屏渲染的同时,会将光栅化后的内容缓存起来,如果对应的layer及其sublayers没有发生改变,在下一帧的时候可以直接复用。shouldRasterize = YES,这将隐式的创建一个位图,各种阴影遮罩等效果也会保存到位图中并缓存起来,从而减少渲染的频度 当你使用光栅化时,你可以开启“Color Hits Green and Misses Red”来检查该场景下光栅化操作是否是一个好的选择。绿色表示缓存被复用,红色表示缓存在被重复创建。 如果光栅化的层变红得太频繁那么光栅化对优化可能没有多少用处。位图缓存从内存中删除又重新创建得太过频繁,红色表明缓存重建得太迟。可以针对性的选择某个较小而较深的层结构进行光栅化,来尝试减少渲染时间。 我们经常的TableViewCell,因为TableViewCell的重绘是很频繁的(因为Cell的复用),如果Cell的内容不断变化,则Cell需要不断重绘,如果此时设置了cell.layer可光栅化。则会造成大量的离屏渲染,降低图形性能。 有时候我们可以把那些需要屏幕外绘制的图层开启光栅化以作为一个优化方式,前提是这些图层并不会被频繁地重绘。 针对光栅化处理 12345678910//离屏渲染 - 异步绘制 耗电self.layer.drawsAsynchronously = true //栅格化 - 异步绘制之后 ，会生成一张独立的图片 cell 在屏幕上滚动的时候，本质上滚动的是这张图片 //cell 优化，要尽量减少图层的数量，想当于只有一层//停止滚动之后，可以接受监听self.layer.shouldRasterize = true //使用 “栅格化” 必须指定分辨率self.layer.rasterizationScale = UIScreen.main.scale 阴影处理 12// 指定阴影曲线，防止阴影效果带来的离屏渲染 imageView.layer.shadowPath = UIBezierPath(rect: imageView.bounds).cgPath ​ 遮罩masks(遮罩) mask是layer的一个属性. 当透明度改变的时候,这个 mask 就是覆盖上去的那个阴影。该层的layer的alpha决定了多少层背景跟内容通过并显示,完全或者部分不透明的像素允许潜在的内容 通过并显示。 默认是nil,当配置一个遮罩的时候,记得设置遮罩的大小、位置。已确保跟盖图层对齐。如果你想给这个属性赋值,前提是必须没有 superLayer,如果有superLayer,这个行为则是无效的。 shadows(阴影)在项目中,当我们想要设置View的阴影效果时,可以通过shadow*相关方法实现,如: self.layer.shadowOffset = CGSizeMake(4, -2); self.layer.shadowOpacity = 0.5; self.layer.shadowColor = [[UIColor blackColor] colorWithAlphaComponent:0.5].CGColor; shadows可以给视图周边添加阴影,当给一些滑动视图加阴影时,您可能会注意到在动画不是很流畅,有卡顿。这是因为计算阴影需要Core Animation做一个离屏渲染,以View准确的形状确定清楚如何呈现其阴影。 ####屏幕渲染有如下三种 GPU中的屏幕渲染： 1、On-Screen Rendering 意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行 2、Off-Screen Rendering 意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作 3、CPU中的离屏渲染（特殊离屏渲染，即不在GPU中的渲染） 如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染 切圆角优化切圆角是开发app过程中经常会用到的功能，但是使用不同的方式，性能损耗也会不同，下面会介绍3种切圆角的方法；其中，方法三的性能相对最好。 方法一使用cornerRadius进行切圆角，在iOS9之前会产生离屏渲染，比较消耗性能，而之后系统做了优化，则不会产生离屏渲染，但是操作最简单 12iv.layer.cornerRadius = 30;iv.layer.masksToBounds = YES; 方法二利用mask设置圆角，利用的是UIBezierPath和CAShapeLayer来完成 1234CAShapeLayer *mask1 = [[CAShapeLayer alloc] init];mask1.opacity = 0.5;mask1.path = [UIBezierPath bezierPathWithOvalInRect:iv.bounds].CGPath;iv.layer.mask = mask1; 方法三利用CoreGraphics画一个圆形上下文，然后把图片绘制上去，得到一个圆形的图片，达到切圆角的目的。 12345678910111213141516171819- (UIImage *)drawCircleImage:(UIImage*)image&#123; CGFloat side = MIN(image.size.width, image.size.height); UIGraphicsBeginImageContextWithOptions(CGSizeMake(side, side), false, [UIScreen mainScreen].scale); CGContextAddPath(UIGraphicsGetCurrentContext(), [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0, 0, side, side)].CGPath); CGContextClip(UIGraphicsGetCurrentContext()); CGFloat marginX = -(image.size.width - side) * 0.5; CGFloat marginY = -(image.size.height - side) * 0.5; [image drawInRect:CGRectMake(marginX, marginY, image.size.width, image.size.height)]; CGContextDrawPath(UIGraphicsGetCurrentContext(), kCGPathFillStroke); UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return newImage;&#125; 异步绘制当想进一步优化tableview性能时可以考虑异步绘制cell及文本控件等。大神的YYAsyncLayer实现了异步绘制的控件。 UITableView优化总结UITableView的优化主要从三个方面入手： 123提前计算并缓存好高度（布局），因为heightForRowAtIndexPath:是调用最频繁的方法；异步绘制，遇到复杂界面，遇到性能瓶颈时，可能就是突破口；滑动时按需加载，这个在大量图片展示，网络加载的时候很管用！（SDWebImage已经实现异步加载，配合这条性能杠杠的）。 除了上面最主要的三个方面外，还有很多几乎大伙都很熟知的优化点： 1234567正确使用reuseIdentifier来重用Cells尽量使所有的view opaque，包括Cell自身尽量少用或不用透明图层如果Cell内现实的内容来自web，使用异步加载，缓存请求结果减少subviews的数量在heightForRowAtIndexPath:中尽量不使用cellForRowAtIndexPath:，如果你需要用到它，只用一次然后缓存结果尽量少用addView给Cell动态添加View，可以初始化时就添加，然后通过hide来控制是否显示 参考: ibiremeiOS 保持界面流畅的技巧 mo_xiao_moUITableView的优化技巧－异步绘制Cell iOS_小松哥UITableView自动计算cell高度并缓存，再也不用管高度啦]]></content>
      <categories>
        <category>UI视图</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS runtime应用：关联对象]]></title>
    <url>%2F2018%2F01%2F23%2FiOS-runtime%E5%BA%94%E7%94%A8%EF%BC%9A%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[前言给已有类添加方法使用Category就可以了，但如果向分类里添加一个或多个属性的话会报错，使用属性不能正确创建实例及存取方法。 但是我们可以实现runtime的Associated Objects(关联对象)，它可以让对象在运行时关联任何值。 runtime中提供给我们的方法：123456//关联对象void objc_setAssociatedObject(id object,const void *key,id value,objc_AssociationPolicy policy);//获取关联的对象id objc_getAssociatedObject(id object,const void *key);//移除关联的对象void objc_removeAssociatedObjects(id object); 变量说明：1234id object:被关联的对象const void *key:关联的key，要求唯一id value:关联的对象Objc_AssociationPolicy poliy:内存管理策略 Objc_AssociationPolicy policy的enum值有:1234567891011typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123; OBJC_ASSOCIATION_ASSIGN = 0, /**&lt; Specifies a weak reference to the associated object. */ OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. * The association is not made atomically. */ OBJC_ASSOCIATION_COPY_NONATOMIC = 3, /**&lt; Specifies that the associated object is copied. * The association is not made atomically. */ OBJC_ASSOCIATION_RETAIN = 01401, /**&lt; Specifies a strong reference to the associated object. * The association is made atomically. */ OBJC_ASSOCIATION_COPY = 01403 /**&lt; Specifies that the associated object is copied. * The association is made atomically. */&#125;; 不同的objc_AssociationPolicy对应了不同的属性修饰符。 Objc_AssociationPolicy应用:UIButton扩展之动态添加属性.h文件 1234567#import &lt;UIKit/UIKit.h&gt;typedef void (^block)(void);@interface UIButton (Block)@property(nonatomic,assign) NSString *name;@end .m文件 1234567891011121314151617#import &lt;objc/runtime.h&gt;static const char myKey;@implementation UIButton (Block)- (void)setName:(NSString *)name&#123; //关联对象 objc_setAssociatedObject(self, &amp;myKey, name, OBJC_ASSOCIATION_COPY_NONATOMIC);&#125;- (NSString *)name&#123; //获取关联对象 return objc_getAssociatedObject(self, &amp;myKey);&#125;@end Viewcontroller.m 123456789101112131415161718192021222324#import &quot;ViewController.h&quot;#import &quot;UIButton+Block.h&quot;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; [self.view addSubview:btn]; btn.backgroundColor = [UIColor redColor]; btn.frame = CGRectMake(100, 100, 100, 50); btn.name = @&quot;darling&quot;; [btn addTarget:self action:@selector(message:) forControlEvents:UIControlEventTouchUpInside ]; // Do any additional setup after loading the view, typically from a nib.&#125;- (void)message:(UIButton *)btn&#123; NSLog(@&quot;name = %@&quot;,btn.name);&#125; UIButton扩展之动态添加方法.h文件 123456#import &lt;UIKit/UIKit.h&gt;typedef void (^btnBlock)(void);@interface UIButton (Block)- (void)handelWithBlock:(btnBlock)block;@end .m文件 12345678910111213141516#import &quot;UIButton+Block.h&quot;#import &lt;objc/runtime.h&gt;static const char myKey;@implementation UIButton (Block)- (void)handelWithBlock:(block)block&#123; if (block) &#123; objc_setAssociatedObject(self, &amp;myKey, block, OBJC_ASSOCIATION_COPY_NONATOMIC); &#125; [self addTarget:self action:@selector(btnAction) forControlEvents:UIControlEventTouchUpInside];&#125;- (void)btnAction&#123; block block = objc_getAssociatedObject(self, &amp;myKey); block();&#125;@end ViewController.m文件 1234567891011121314151617181920#import &quot;ViewController.h&quot;#import &quot;UIButton+Block.h&quot;@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; [self.view addSubview:btn]; btn.backgroundColor = [UIColor redColor]; btn.frame = CGRectMake(100, 100, 100, 50); [btn handelWithBlock:^&#123; NSLog(@&quot;darling&quot;); &#125;]; // Do any additional setup after loading the view, typically from a nib.&#125; 参考文献 objc_setAssociatedObject与Block的简单使用 objc_setAssociatedObject/objc_getAssociatedObject]]></content>
      <categories>
        <category>runtime</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[iOS DES总结]]></title>
    <url>%2F2018%2F01%2F15%2FiOS-DES%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[iOS中使用DES加密总结 常见的对称加密有:DES、3DES、RC4、AES等；加密算法都有几个共同的特点：1.秘钥长度；2.加密模式；3.块加密算法里的填充区分；以下是我对做项目时遇到的问题所做的小结 1234567891011ccStatus = CCCrypt(encryptOperation, kCCAlgorithmDES, kCCOptionPKCS7Padding|kCCOptionECBMode, vkey, kCCKeySizeDES, iv, dataIn, dataInLength, (void *)dataOut, dataOutAvailable, &amp;dataOutMoved); 第一个参数encryptOperation：告诉函数加密还是解密 第二个参数kCCAlgorithmDES：使用DES加密 第三个参数 kCCOptionPKCS7Padding|kCCOptionECBMode使用ECB加密模式和PKCS7Padding填充模式，如果使用kCCOptionPKCS7Padding就代表使用CBC加密模式并且使用PKCS7Padding的填充模式。 在DES中加密数据包单位长度是8字节，在8自己的情况下PKCS7Padding等价于PKCS5Padding。 后台大哥给了一个线上加密的地址让我对。 http://tool.chacuo.net/cryptdes 调试了半天原来是我自己的加密模式不对，使用了CBC模式，而后台用的是ECB。 参考资料： http://blog.csdn.net/u010184533/article/details/38975871]]></content>
      <categories>
        <category>加密</category>
      </categories>
  </entry>
</search>
